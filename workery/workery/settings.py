"""
Django settings for workery project.

Generated by 'django-admin startproject' using Django 2.0.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import logging.config
import datetime
import os
import environ
import re
import raven # Third party library
import sys
from django.utils.log import DEFAULT_LOGGING
from trapdoor.utils import get_suspicious_paths_to_ignore_array

'''
django-environ
https://github.com/joke2k/django-environ
'''
root = environ.Path(__file__) - 3 # three folder back (/a/b/c/ - 3 = /)
env = environ.Env(DEBUG=(bool, False),) # set default values and casting
environ.Env.read_env() # reading .env file

SITE_ROOT = root()


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY') # Raises ImproperlyConfigured exception if SECRET_KEY not in os.environ

# SECURITY WARNING: Do not run true in production environment.
DEBUG = env('DEBUG', default=False)
TEMPLATE_DEBUG = env('DEBUG', default=False)

ALLOWED_HOSTS = ['*']

SITE_ID = 1
ADMIN_ENABLED = False

# Application definition

# This configuration ensures that all authenticated users from the public
# schema to exist authenticated in the tenant schemas as well. This is
# important to have "django-tenants" work
SESSION_COOKIE_DOMAIN = '.' + env("WORKERY_APP_HTTP_DOMAIN")

# This configuration ensures all authentication enforcement redirects to this
# specific URL in our application.
LOGIN_URL="/login/"

SHARED_APPS = (
    # Django Apps
    # 'django.contrib.admin', # Our project does not support Django Admin.
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Extra Django Apps
    'django.contrib.sites',
    'django.contrib.sitemaps',
    'django.contrib.postgres',   # Postgres full-text search: https://docs.djangoproject.com/en/1.10/ref/contrib/postgres/search/
    'django.contrib.gis',        # Geo-Django: https://docs.djangoproject.com/en/dev/ref/contrib/gis/
    'django.contrib.humanize',   # Humanize: https://docs.djangoproject.com/en/dev/ref/contrib/humanize/

    # Third Party Apps
    # 'whitenoise.runserver_nostatic',
    'starterkit',
    'django_tenants',
    'trapdoor',
    'rest_framework',
    'rest_framework.authtoken',
    'django_filters',
    'django_rq',
    'djmoney',
    'corsheaders',
    'anymail',
    'phonenumber_field',
    'debug_toolbar',
    'raven.contrib.django.raven_compat',
    'storages',
    'sorl.thumbnail',
    'django_fsm',
    # . . .

    # Shared Apps
    'shared_franchise',
    'shared_home',
    'shared_foundation',
    'shared_api',
    'shared_auth',
    'shared_github_webhook',
    'shared_etl'
    # . . .
)

TENANT_APPS = (
    # The following Django contrib apps must be in TENANT_APPS
    'django.contrib.contenttypes',

    # Tenant-specific apps
    'tenant_api',
    'tenant_account',
    'tenant_associate',
    'tenant_customer',
    'tenant_dashboard',
    'tenant_foundation',
    'tenant_historic_etl',
    'tenant_order',
    'tenant_order_operation',
    'tenant_team',
    'tenant_setting',
    'tenant_resource',
    'tenant_help',
    'tenant_partner',
    'tenant_task',
    'tenant_report',
    'tenant_financial',
    'tenant_ongoing_order',
    'tenant_ongoing_order_operation'
    # . . .
)

INSTALLED_APPS = list(SHARED_APPS) + [app for app in TENANT_APPS if app not in SHARED_APPS]


MIDDLEWARE = [
    # 'raven.contrib.django.raven_compat.middleware.Sentry404CatchMiddleware', # Third Party
    'corsheaders.middleware.CorsMiddleware',                     # Third Party
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django_tenants.middleware.main.TenantMainMiddleware',       # Third Party
    'trapdoor.middleware.TrapdoorMiddleware',                    # Third Party
    'whitenoise.middleware.WhiteNoiseMiddleware',                # Third Party
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',               #TODO: Add CSRF only to specific resources.
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',              # Extra Django App
    'debug_toolbar.middleware.DebugToolbarMiddleware',        # Third Party App
    'htmlmin.middleware.HtmlMinifyMiddleware',                # Third Party
    'htmlmin.middleware.MarkRequestMiddleware',               # Third Party
]

ROOT_URLCONF = 'workery.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR + '/templates/',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.template.context_processors.i18n',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'shared_foundation.context_processors.shared_constants',  # Custom App
                'shared_foundation.context_processors.me',                # Custom App
                'tenant_foundation.context_processors.tenant_constants',  # Custom App
            ],
        },
    },
]

WSGI_APPLICATION = 'workery.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

###########################################
#TODO: WE WANT TO MAKE IT LOOK LIKE THIS. #
###########################################
# DATABASES = {
#     'default': env.db(), # Raises ImproperlyConfigured exception if DATABASE_URL not in os.environ
#     # 'default': {
#     #     'ENGINE': 'django.db.backends.sqlite3',
#     #     'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     # }
# }

DATABASES = {
    "default": {
        'CONN_MAX_AGE': 0,
        'ENGINE': 'django_tenants.postgresql_backend',
        "NAME": env("DB_NAME", default="workery_db"),
        "USER": env("DB_USER", default="django"),
        "PASSWORD": env("DB_PASSWORD", default="123password"), # YOU MUST CHANGE IN PROD!
        "HOST": env("DB_HOST", default="localhost"),
        "PORT": env("DB_PORT", default="5432"),
    }
}

DATABASE_ROUTERS = (
    'django_tenants.routers.TenantSyncRouter',
)

ORIGINAL_BACKEND = "django.contrib.gis.db.backends.postgis"

TENANT_MODEL = "shared_foundation.SharedFranchise"

TENANT_DOMAIN_MODEL = "shared_foundation.SharedFranchiseDomain"


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
    {
        'NAME': 'starterkit.password_validation.UppercaseCharacterPasswortValidator',
        'OPTIONS': {
            'min_occurrence': 1,
        }
    },
    {
        'NAME': 'starterkit.password_validation.SpecialCharacterPasswortValidator',
        'OPTIONS': {
            'min_occurrence': 1,
        }
    }
]


# Custom authentication
# https://docs.djangoproject.com/en/dev/topics/auth/customizing/

AUTH_USER_MODEL = 'shared_foundation.SharedUser'

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

ugettext = lambda s: s
LANGUAGES = (
    ('en', ugettext('English')),
#    ('fr', ugettext('French')),
#    ('es', ugettext('Spanish')),
)

LOCALE_PATHS = (
    os.path.join(BASE_DIR, "locale"),
)


# Email
# https://docs.djangoproject.com/en/1.11/topics/email/

EMAIL_BACKEND = env("EMAIL_BACKEND")
DEFAULT_FROM_EMAIL = env("DEFAULT_FROM_EMAIL")
DEFAULT_TO_EMAIL = env("DEFAULT_TO_EMAIL")


# Anymail
#  https://github.com/anymail/django-anymail

ANYMAIL = {
    # (exact settings here depend on your ESP...)
    "MAILGUN_API_KEY": env("MAILGUN_ACCESS_KEY"),
    "MAILGUN_SENDER_DOMAIN": env("MAILGUN_SERVER_NAME"),
}

#-------------------------------------------------------------------------------

# django-storages
# https://github.com/jschneier/django-storages

AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')
AWS_S3_HOST=env("AWS_S3_HOST")
AWS_S3_CALLING_FORMAT = 'boto3.s3.connection.OrdinaryCallingFormat'
AWS_STORAGE_BUCKET_NAME = env('AWS_STORAGE_BUCKET_NAME')
AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME

AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}

# WE WILL USE "WHITENOISE" WITH AWS CLOUDFRONT CDN SO WE WILL COMMENT THIS CODE OUT.
AWS_STATIC_LOCATION = 'static'
# STATICFILES_STORAGE = 'workery.s3utils.StaticStorage'
# STATIC_URL = "https://%s/%s/" % (AWS_S3_CUSTOM_DOMAIN, AWS_STATIC_LOCATION)

AWS_PUBLIC_MEDIA_LOCATION = 'media/public'
DEFAULT_FILE_STORAGE = 'workery.s3utils.PublicMediaStorage'

AWS_PRIVATE_MEDIA_LOCATION = 'media/private'
PRIVATE_FILE_STORAGE = 'workery.s3utils.PrivateMediaStorage'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/
# http://whitenoise.evans.io/en/stable/django.html

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"), # Attach directory.
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_HOST = env("WORKERY_DJANGO_STATIC_HOST", default="")
STATIC_URL = STATIC_HOST + '/staticfiles/' # Output directory

# http://whitenoise.evans.io/en/stable/django.html#add-compression-and-caching-support
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

#-------------------------------------------------------------------------------
#
# STATIC_URL = STATIC_HOST + '/staticfiles/' # Output directory
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# MEDIA_URL = '/media/'
#
#-------------------------------------------------------------------------------

# Template Directory
#
TEMPLATE_DIRS = (
    BASE_DIR + '/templates/',
)


# django-cors-headers
# https://github.com/ottoyiu/django-cors-headers

CORS_ORIGIN_ALLOW_ALL=True
CORS_ALLOW_HEADERS = (
    'x-requested-with',
    'content-disposition',
    'accept-encoding',
    'content-type',
    'accept',
    'origin',
    'authorization',
    'x-csrftoken'
)


# django-debug-toolbar
# https://django-debug-toolbar.readthedocs.io/en/stable/index.html

INTERNAL_IPS = [
    '127.0.0.1',
    '0.0.0.0'
]


# django-htmlmin
# https://github.com/cobrateam/django-htmlmin

HTML_MINIFY = env("HTML_MINIFY")
KEEP_COMMENTS_ON_MINIFYING = env("KEEP_COMMENTS_ON_MINIFYING")


# Error Emailing
# https://docs.djangoproject.com/en/dev/topics/logging/

# Disable Django's logging setup
LOGGING_CONFIG = None

LOGLEVEL = env("WORKERY_LOGLEVEL")

logging.config.dictConfig({
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console': {
            # exact format is not important, this is the minimum information
            'format': '%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
        },
        'django.server': DEFAULT_LOGGING['formatters']['django.server'],
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
            'formatter': 'console'
        },
        # Add Handler for Sentry for `warning` and above
        'sentry': {
            'level': 'WARNING', # To capture more than ERROR, change to WARNING, INFO, etc.
            'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',
        },
        'django.server': DEFAULT_LOGGING['handlers']['django.server'],
    },
    'loggers': {
        # Default for all Python modules
        '': {
            'level': LOGLEVEL,
            'handlers': [
                'console',
                'sentry'
            ],

            # required to avoid double logging with root logger
            'propagate': False,
        },
        # Prevent noisy modules from logging to Sentry
        'noisy_module': {
            'level': 'ERROR',
            'handlers': ['console'],
            'propagate': False,
        },
        # Default runserver request logging
        'django.server': DEFAULT_LOGGING['loggers']['django.server'],
    },
})


# Sentry
# https://github.com/getsentry/sentry/pulls

RAVEN_CONFIG = {
    'dsn': env("SENTRY_RAVEN_CONFIG_DSN"),
}


# Error Reporting
# https://docs.djangoproject.com/en/2.0/howto/error-reporting/

IGNORABLE_404_URLS = [
    re.compile(r'^$'),
    re.compile(r'^/$'),
    re.compile(r'\.(php|cgi)$'),
    re.compile(r'^/phpmyadmin/'),
    re.compile(r'^/apple-touch-icon.*\.png$'),
    re.compile(r'^/favicon\.ico$'),
    re.compile(r'^/robots\.txt$'),
]
IGNORABLE_404_URLS += get_suspicious_paths_to_ignore_array()


#
# http://getblimp.github.io/django-rest-framework-jwt/

JWT_AUTH = {
    # 'JWT_ENCODE_HANDLER':
    # 'rest_framework_jwt.utils.jwt_encode_handler',
    #
    # 'JWT_DECODE_HANDLER':
    # 'rest_framework_jwt.utils.jwt_decode_handler',
    #
    # 'JWT_PAYLOAD_HANDLER':
    # 'rest_framework_jwt.utils.jwt_payload_handler',
    #
    # 'JWT_PAYLOAD_GET_USER_ID_HANDLER':
    # 'rest_framework_jwt.utils.jwt_get_user_id_from_payload_handler',
    #
    # 'JWT_RESPONSE_PAYLOAD_HANDLER':
    # 'rest_framework_jwt.utils.jwt_response_payload_handler',
    #
    # 'JWT_SECRET_KEY': settings.SECRET_KEY,
    # 'JWT_GET_USER_SECRET_KEY': None,
    # 'JWT_PUBLIC_KEY': None,
    # 'JWT_PRIVATE_KEY': None,
    'JWT_ALGORITHM': 'HS256',
    'JWT_VERIFY': True,
    'JWT_VERIFY_EXPIRATION': True,
    'JWT_LEEWAY': datetime.timedelta(days=1),
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=7),
    'JWT_ALLOW_REFRESH': True,
    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=7),
}


# Django-REST-Framework
# https://github.com/encode/django-rest-framework

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
    ),
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework_msgpack.renderers.MessagePackRenderer',  # Third-party library.
        'rest_framework.renderers.BrowsableAPIRenderer'
    ],
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
        'rest_framework_msgpack.parsers.MessagePackParser',  # Third-party library.
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 100
}


# django-rq
# https://github.com/ui/django-rq

RQ_QUEUES = {
    'default': {
        'USE_REDIS_CACHE': 'default',
    }
}


# django-redis-cache
# https://github.com/sebleier/django-redis-cache

CACHES = {
    'default': {
        'BACKEND': 'redis_cache.RedisCache',
        'LOCATION': 'localhost:6379',
    },
}


SESSION_ENGINE = 'redis_sessions.session'


# django-redis-sessions
# https://github.com/martinrusev/django-redis-sessions

SESSION_REDIS = {
    'host': 'localhost',
    'port': 6379,
    'db': 0,
    'prefix': 'session',
    'socket_timeout': 1
}


# django-phonenumber-field
# https://github.com/stefanfoulis/django-phonenumber-field

PHONENUMBER_DEFAULT_REGION = 'CA'  # ISO-3166-1 Country: Canada
PHONENUMBER_DB_FORMAT = 'E164'     # Format: +1xxxyyyzzzz


# sorl-thumbnail
# https://github.com/jazzband/sorl-thumbnail

THUMBNAIL_ENGINE = 'workery.snorlutil.Engine'
THUMBNAIL_DEBUG = env('DEBUG', default=False)
THUMBNAIL_FORCE_OVERWRITE = True


# Application Specific Variables #
#

# Variables define what URL structure to use in our system.
WORKERY_APP_HTTP_PROTOCOL = env("WORKERY_APP_HTTP_PROTOCOL")
WORKERY_APP_HTTP_DOMAIN = env("WORKERY_APP_HTTP_DOMAIN")
WORKERY_APP_DEFAULT_MONEY_CURRENCY = env("WORKERY_APP_DEFAULT_MONEY_CURRENCY")
WORKERY_GITHUB_WEBHOOK_SECRET = env("WORKERY_GITHUB_WEBHOOK_SECRET")
