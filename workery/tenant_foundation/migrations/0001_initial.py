# Generated by Django 2.0.5 on 2018-06-17 04:28

from decimal import Decimal
from django.conf import settings
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_fsm
import djmoney.models.fields
import phonenumber_field.modelfields
import sorl.thumbnail.fields
import tenant_foundation.models.activity_sheet_item
import tenant_foundation.models.associate
import tenant_foundation.models.associate_comment
import tenant_foundation.models.awaylog
import tenant_foundation.models.comment
import tenant_foundation.models.customer
import tenant_foundation.models.customer_comment
import tenant_foundation.models.insurance_requirement
import tenant_foundation.models.opening_hours_specification
import tenant_foundation.models.organization
import tenant_foundation.models.partner
import tenant_foundation.models.partner_comment
import tenant_foundation.models.public_image_upload
import tenant_foundation.models.resource_category
import tenant_foundation.models.resource_item
import tenant_foundation.models.resource_item_sort_order
import tenant_foundation.models.skill_set
import tenant_foundation.models.staff
import tenant_foundation.models.staff_comment
import tenant_foundation.models.tag
import tenant_foundation.models.taskitem
import tenant_foundation.models.vehicle_type
import tenant_foundation.models.work_order
import tenant_foundation.models.work_order_comment
import tenant_foundation.models.work_order_service_fee
import workery.s3utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ActivitySheetItem',
            fields=[
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.activity_sheet_item.increment_activity_sheet_item_id_number, editable=False, primary_key=True, serialize=False)),
                ('comment', models.TextField(blank=True, default='', help_text='A comment associated with this activity sheet item.', null=True, verbose_name='Comment')),
                ('has_accepted_job', models.BooleanField(help_text='Indicates whether associate has accepted or rejected this job offer.', verbose_name='Has Accepted Job')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
            ],
            options={
                'verbose_name': 'Activity Sheet Item',
                'verbose_name_plural': 'Activity Sheet Items',
                'db_table': 'workery_activity_sheet_items',
                'ordering': ['-created_at'],
                'permissions': (('can_get_activity_sheet_items', 'Can get activity sheets'), ('can_get_activity_sheet_item', 'Can get activity sheet'), ('can_post_activity_sheet_item', 'Can create activity sheet'), ('can_put_activity_sheet_item', 'Can update activity sheet'), ('can_delete_activity_sheet_item', 'Can delete activity sheet')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Associate',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('name', models.CharField(blank=True, db_index=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
                ('area_served', models.CharField(blank=True, help_text='The geographic area where a service or offered item is provided.', max_length=127, null=True, verbose_name='Area Served')),
                ('available_language', models.CharField(blank=True, help_text='A language someone may use with or at the item, service or place. Please use one of the language codes from the <a href="https://tools.ietf.org/html/bcp47">IETF BCP 47 standard</a>.', max_length=127, null=True, verbose_name='Available Language')),
                ('contact_type', models.CharField(blank=True, help_text='A person or organization can have different contact points, for different purposes. For example, a sales contact point, a PR contact point and so on. This property is used to specify the kind of contact point.', max_length=127, null=True, verbose_name='Contact Type')),
                ('email', models.EmailField(blank=True, db_index=True, help_text='Email address.', max_length=254, null=True, validators=[django.core.validators.EmailValidator(message='Invalid email')], verbose_name='Email')),
                ('fax_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='The fax number.', max_length=128, null=True, verbose_name='Fax Number')),
                ('product_supported', models.CharField(blank=True, default='', help_text='The product or service this support contact point is related to (such as product support for a particular product line). This can be a specific product or product line (e.g. "iPhone") or a general category of products or services (e.g. "smartphones").', max_length=31, null=True, verbose_name='Product Supported')),
                ('telephone', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_index=True, help_text='The telephone number.', max_length=128, null=True, verbose_name='Telephone')),
                ('telephone_type_of', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Telephone'), (2, 'Mobile'), (3, 'Work Telephone')], default=1, help_text='The type of phone this is. Ex: work, home, etc.', verbose_name='Telephone type of')),
                ('telephone_extension', models.CharField(blank=True, default='', help_text='The telephone number extension.', max_length=31, null=True, verbose_name='Telephone Extension')),
                ('other_telephone', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_index=True, help_text='The alternative telephone number.', max_length=128, null=True, verbose_name='Other Telephone')),
                ('other_telephone_extension', models.CharField(blank=True, default='', help_text='The alternative telephone extension number.', max_length=31, null=True, verbose_name='Other Telephone Extension')),
                ('other_telephone_type_of', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Telephone'), (2, 'Mobile'), (3, 'Work Telephone')], default=1, help_text='The type of phone the alternative telephone is. Ex: work, home, etc.', verbose_name='Other telephone type of')),
                ('address_country', models.CharField(help_text='The country. For example, USA. You can also provide the two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements">ISO 3166-1 alpha-2</a> country code.', max_length=127, verbose_name='Address Country')),
                ('address_locality', models.CharField(help_text='The locality. For example, Mountain View.', max_length=127, verbose_name='Address Locaility')),
                ('address_region', models.CharField(help_text='The region. For example, CA.', max_length=127, verbose_name='Address Region')),
                ('post_office_box_number', models.CharField(blank=True, help_text='Apartment, suite, unit, building, floor, etc.', max_length=255, null=True, verbose_name='Post Office Box Number')),
                ('postal_code', models.CharField(blank=True, db_index=True, help_text='The postal code. For example, 94043.', max_length=127, null=True, verbose_name='Postal Code')),
                ('street_address', models.CharField(help_text='The street address. For example, 1600 Amphitheatre Pkwy.', max_length=255, verbose_name='Street Address')),
                ('street_address_extra', models.CharField(blank=True, help_text='Apartment, suite, unit, building, floor, etc.', max_length=255, null=True, verbose_name='Street Address (Extra Line)')),
                ('elevation', models.FloatField(blank=True, help_text='The elevation of a location (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', null=True, verbose_name='Elevation')),
                ('latitude', models.DecimalField(blank=True, decimal_places=3, help_text='The latitude of a location. For example 37.42242 (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', max_digits=8, null=True, verbose_name='Latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=3, help_text='The longitude of a location. For example -122.08585 (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', max_digits=8, null=True, verbose_name='Longitude')),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, db_index=True, help_text='A longitude and latitude coordinates of this location.', null=True, srid=4326, verbose_name='Location')),
                ('given_name', models.CharField(blank=True, db_index=True, help_text='The customers given name.', max_length=63, null=True, verbose_name='Given Name')),
                ('middle_name', models.CharField(blank=True, db_index=True, help_text='The customers last name.', max_length=63, null=True, verbose_name='Middle Name')),
                ('last_name', models.CharField(blank=True, db_index=True, help_text='The customers last name.', max_length=63, null=True, verbose_name='Last Name')),
                ('birthdate', models.DateField(blank=True, help_text='The customers birthdate.', null=True, verbose_name='Birthdate')),
                ('join_date', models.DateTimeField(blank=True, help_text='The date the customer joined this organization.', null=True, verbose_name='Join Date')),
                ('nationality', models.CharField(blank=True, help_text='Nationality of the person.', max_length=63, null=True, verbose_name='Nationality')),
                ('gender', models.CharField(blank=True, help_text='Gender of the person. While Male and Female may be used, text strings are also acceptable for people who do not identify as a binary gender.', max_length=31, null=True, verbose_name='Gender')),
                ('tax_id', models.CharField(blank=True, help_text='The Tax / Fiscal ID of the organization or person, e.g. the TIN in the US or the CIF/NIF in Spain.', max_length=127, null=True, verbose_name='Tax ID')),
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.associate.increment_associate_id_number, editable=False, primary_key=True, serialize=False)),
                ('business', models.CharField(blank=True, help_text='The associates business status.', max_length=63, null=True, verbose_name='Business')),
                ('indexed_text', models.CharField(blank=True, db_index=True, help_text='The searchable content text used by the keyword searcher function.', max_length=511, null=True, unique=True, verbose_name='Indexed Text')),
                ('is_ok_to_email', models.BooleanField(default=True, help_text='Indicates whether associate allows being reached by email', verbose_name='Is OK to email')),
                ('is_ok_to_text', models.BooleanField(default=True, help_text='Indicates whether associate allows being reached by text.', verbose_name='Is OK to text')),
                ('hourly_salary_desired', models.PositiveSmallIntegerField(blank=True, help_text='The hourly salary rate the associate', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Hourly Salary Desired')),
                ('limit_special', models.CharField(blank=True, help_text='Any special limitations / handicaps this associate has.', max_length=255, null=True, verbose_name='Limit Special')),
                ('dues_date', models.DateField(blank=True, help_text='-', null=True, verbose_name='Membership Dues Date')),
                ('commercial_insurance_expiry_date', models.DateField(blank=True, help_text='-', null=True, verbose_name='Commercial Insurance Expiry Date')),
                ('auto_insurance_expiry_date', models.DateField(blank=True, help_text='-', null=True, verbose_name='Auto Insurance Expiry Date')),
                ('wsib_insurance_date', models.DateField(blank=True, help_text='-', null=True, verbose_name='WSIB Insurance Date')),
                ('police_check', models.DateField(blank=True, help_text='The date the associate took a police check.', null=True, verbose_name='Police Check')),
                ('drivers_license_class', models.CharField(blank=True, help_text='The associates license class for driving.', max_length=31, null=True, verbose_name='Divers License Class')),
                ('how_hear', models.PositiveSmallIntegerField(blank=True, default=8, help_text='How associate heared about this us from a select range of choices.', verbose_name='How hear')),
                ('how_hear_other', models.CharField(blank=True, help_text='How associate heared about this us in detail.', max_length=2055, null=True, verbose_name='How hear (other)')),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('score', models.FloatField(blank=True, default=0, help_text='The score with this associated.', verbose_name='Score')),
                ('is_archived', models.BooleanField(db_index=True, default=False, help_text='Indicates whether associate was archived.', verbose_name='Is Archived')),
            ],
            options={
                'verbose_name': 'Associate',
                'verbose_name_plural': 'Associates',
                'db_table': 'workery_associates',
                'permissions': (('can_get_associates', 'Can get associates'), ('can_get_associate', 'Can get associate'), ('can_post_associate', 'Can create associate'), ('can_put_associate', 'Can update associate'), ('can_delete_associate', 'Can delete associate')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='AssociateComment',
            fields=[
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.associate_comment.increment_associate_comment_id_number, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('about', models.ForeignKey(help_text='The associate whom this comment is about.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_associatecomment_about_related', to='tenant_foundation.Associate')),
            ],
            options={
                'verbose_name': 'Associate Comment',
                'verbose_name_plural': 'Associate Comments',
                'db_table': 'workery_associate_comments',
                'ordering': ['-created_at'],
                'permissions': (('can_get_associate_comments', 'Can get associate comments'), ('can_get_associate_comment', 'Can get associate comment'), ('can_post_associate_comment', 'Can create associate comment'), ('can_put_associate_comment', 'Can update associate comment'), ('can_delete_associate_comment', 'Can delete associate comment')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='AwayLog',
            fields=[
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.awaylog.increment_away_log_id_number, editable=False, primary_key=True, serialize=False)),
                ('reason', models.PositiveSmallIntegerField(blank=True, default=0, help_text='The reason the user is away.', null=True, verbose_name='Reason')),
                ('reason_other', models.CharField(blank=True, default='', help_text='A specific reason the user is away.', max_length=511, null=True, verbose_name='Reason other')),
                ('until_further_notice', models.BooleanField(default=False, help_text='Track whether .', verbose_name='Away until further notice')),
                ('until_date', models.DateField(blank=True, help_text='The date that this user will return on.', null=True, verbose_name='Away until date')),
                ('was_deleted', models.BooleanField(db_index=True, default=False, help_text='Track whether this away log was deleted or not.', verbose_name='Was deleted')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('associate', models.ForeignKey(help_text='The associate of our away log.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_awaylog_associate_related', to='tenant_foundation.Associate')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this away log.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_awaylog_created_by_related', to=settings.AUTH_USER_MODEL)),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom last modified this away log.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_awaylog_last_modified_by_related', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'AwayLog',
                'verbose_name_plural': 'AwayLogs',
                'db_table': 'workery_away_logs',
                'permissions': (('can_get_away_logs', 'Can get away logs'), ('can_get_away_log', 'Can get away log'), ('can_post_away_log', 'Can create away log'), ('can_put_away_log', 'Can update away log'), ('can_delete_away_log', 'Can delete away log')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.comment.increment_comment_id_number, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('text', models.TextField(help_text='The text content of this comment.', verbose_name='Text')),
                ('is_archived', models.BooleanField(db_index=True, default=False, help_text='Indicates whether comment was archived.', verbose_name='Is Archived')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this away log.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_comment_created_by_related', to=settings.AUTH_USER_MODEL)),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom last modified this away log.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_comment_last_modified_by_related', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Comment',
                'verbose_name_plural': 'Comments',
                'db_table': 'workery_comments',
                'ordering': ['-created_at'],
                'permissions': (('can_get_comments', 'Can get comments'), ('can_get_comment', 'Can get comment'), ('can_post_comment', 'Can create comment'), ('can_put_comment', 'Can update comment'), ('can_delete_comment', 'Can delete comment')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('name', models.CharField(blank=True, db_index=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
                ('area_served', models.CharField(blank=True, help_text='The geographic area where a service or offered item is provided.', max_length=127, null=True, verbose_name='Area Served')),
                ('available_language', models.CharField(blank=True, help_text='A language someone may use with or at the item, service or place. Please use one of the language codes from the <a href="https://tools.ietf.org/html/bcp47">IETF BCP 47 standard</a>.', max_length=127, null=True, verbose_name='Available Language')),
                ('contact_type', models.CharField(blank=True, help_text='A person or organization can have different contact points, for different purposes. For example, a sales contact point, a PR contact point and so on. This property is used to specify the kind of contact point.', max_length=127, null=True, verbose_name='Contact Type')),
                ('email', models.EmailField(blank=True, db_index=True, help_text='Email address.', max_length=254, null=True, validators=[django.core.validators.EmailValidator(message='Invalid email')], verbose_name='Email')),
                ('fax_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='The fax number.', max_length=128, null=True, verbose_name='Fax Number')),
                ('product_supported', models.CharField(blank=True, default='', help_text='The product or service this support contact point is related to (such as product support for a particular product line). This can be a specific product or product line (e.g. "iPhone") or a general category of products or services (e.g. "smartphones").', max_length=31, null=True, verbose_name='Product Supported')),
                ('telephone', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_index=True, help_text='The telephone number.', max_length=128, null=True, verbose_name='Telephone')),
                ('telephone_type_of', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Telephone'), (2, 'Mobile'), (3, 'Work Telephone')], default=1, help_text='The type of phone this is. Ex: work, home, etc.', verbose_name='Telephone type of')),
                ('telephone_extension', models.CharField(blank=True, default='', help_text='The telephone number extension.', max_length=31, null=True, verbose_name='Telephone Extension')),
                ('other_telephone', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_index=True, help_text='The alternative telephone number.', max_length=128, null=True, verbose_name='Other Telephone')),
                ('other_telephone_extension', models.CharField(blank=True, default='', help_text='The alternative telephone extension number.', max_length=31, null=True, verbose_name='Other Telephone Extension')),
                ('other_telephone_type_of', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Telephone'), (2, 'Mobile'), (3, 'Work Telephone')], default=1, help_text='The type of phone the alternative telephone is. Ex: work, home, etc.', verbose_name='Other telephone type of')),
                ('address_country', models.CharField(help_text='The country. For example, USA. You can also provide the two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements">ISO 3166-1 alpha-2</a> country code.', max_length=127, verbose_name='Address Country')),
                ('address_locality', models.CharField(help_text='The locality. For example, Mountain View.', max_length=127, verbose_name='Address Locaility')),
                ('address_region', models.CharField(help_text='The region. For example, CA.', max_length=127, verbose_name='Address Region')),
                ('post_office_box_number', models.CharField(blank=True, help_text='Apartment, suite, unit, building, floor, etc.', max_length=255, null=True, verbose_name='Post Office Box Number')),
                ('postal_code', models.CharField(blank=True, db_index=True, help_text='The postal code. For example, 94043.', max_length=127, null=True, verbose_name='Postal Code')),
                ('street_address', models.CharField(help_text='The street address. For example, 1600 Amphitheatre Pkwy.', max_length=255, verbose_name='Street Address')),
                ('street_address_extra', models.CharField(blank=True, help_text='Apartment, suite, unit, building, floor, etc.', max_length=255, null=True, verbose_name='Street Address (Extra Line)')),
                ('elevation', models.FloatField(blank=True, help_text='The elevation of a location (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', null=True, verbose_name='Elevation')),
                ('latitude', models.DecimalField(blank=True, decimal_places=3, help_text='The latitude of a location. For example 37.42242 (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', max_digits=8, null=True, verbose_name='Latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=3, help_text='The longitude of a location. For example -122.08585 (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', max_digits=8, null=True, verbose_name='Longitude')),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, db_index=True, help_text='A longitude and latitude coordinates of this location.', null=True, srid=4326, verbose_name='Location')),
                ('given_name', models.CharField(blank=True, db_index=True, help_text='The customers given name.', max_length=63, null=True, verbose_name='Given Name')),
                ('middle_name', models.CharField(blank=True, db_index=True, help_text='The customers last name.', max_length=63, null=True, verbose_name='Middle Name')),
                ('last_name', models.CharField(blank=True, db_index=True, help_text='The customers last name.', max_length=63, null=True, verbose_name='Last Name')),
                ('birthdate', models.DateField(blank=True, help_text='The customers birthdate.', null=True, verbose_name='Birthdate')),
                ('join_date', models.DateTimeField(blank=True, help_text='The date the customer joined this organization.', null=True, verbose_name='Join Date')),
                ('nationality', models.CharField(blank=True, help_text='Nationality of the person.', max_length=63, null=True, verbose_name='Nationality')),
                ('gender', models.CharField(blank=True, help_text='Gender of the person. While Male and Female may be used, text strings are also acceptable for people who do not identify as a binary gender.', max_length=31, null=True, verbose_name='Gender')),
                ('tax_id', models.CharField(blank=True, help_text='The Tax / Fiscal ID of the organization or person, e.g. the TIN in the US or the CIF/NIF in Spain.', max_length=127, null=True, verbose_name='Tax ID')),
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.customer.increment_customer_id_number, editable=False, primary_key=True, serialize=False)),
                ('indexed_text', models.CharField(blank=True, db_index=True, help_text='The searchable content text used by the keyword searcher function.', max_length=511, null=True, unique=True, verbose_name='Indexed Text')),
                ('type_of', models.PositiveSmallIntegerField(blank=True, choices=[(2, 'Residential Customer'), (3, 'Commercial Customer'), (1, 'Unknown Customer')], db_index=True, default=1, help_text='The type of customer this is.', verbose_name='Type of')),
                ('is_ok_to_email', models.BooleanField(default=True, help_text='Indicates whether customer allows being reached by email', verbose_name='Is OK to email')),
                ('is_ok_to_text', models.BooleanField(default=True, help_text='Indicates whether customer allows being reached by text.', verbose_name='Is OK to text')),
                ('is_business', models.BooleanField(default=False, help_text='Indicates whether customer is considered a business representive or not.', verbose_name='Is Business')),
                ('is_senior', models.BooleanField(default=False, help_text='Indicates whether customer is considered a senior or not.', verbose_name='Is Senior')),
                ('is_support', models.BooleanField(default=False, help_text='Indicates whether customer needs support or not.', verbose_name='Is Support')),
                ('job_info_read', models.CharField(blank=True, help_text="The volunteer's name whom received this customer.", max_length=255, null=True, verbose_name='Job information received by')),
                ('how_hear', models.CharField(blank=True, help_text='How customer heared/learned about this Over 55 Inc.', max_length=2055, null=True, verbose_name='Learned about Over 55')),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('is_archived', models.BooleanField(db_index=True, default=True, help_text='Indicates whether customer was archived.', verbose_name='Is Archived')),
            ],
            options={
                'verbose_name': 'Customer',
                'verbose_name_plural': 'Customers',
                'db_table': 'workery_customers',
                'permissions': (('can_get_customers', 'Can get customers'), ('can_get_customer', 'Can get customer'), ('can_post_customer', 'Can create customer'), ('can_put_customer', 'Can update customer'), ('can_delete_customer', 'Can delete customer')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='CustomerComment',
            fields=[
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.customer_comment.increment_customer_comment_id_number, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('about', models.ForeignKey(help_text='The customer whom this comment is about.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_customercomment_about_related', to='tenant_foundation.Customer')),
                ('comment', models.ForeignKey(help_text='The comment this item belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_customercomment_comment_categories', to='tenant_foundation.Comment')),
            ],
            options={
                'verbose_name': 'Customer Comment',
                'verbose_name_plural': 'Customer Comments',
                'db_table': 'workery_customer_comments',
                'ordering': ['-created_at'],
                'permissions': (('can_get_customer_comments', 'Can get customer comments'), ('can_get_customer_comment', 'Can get customer comment'), ('can_post_customer_comment', 'Can create customer comment'), ('can_put_customer_comment', 'Can update customer comment'), ('can_delete_customer_comment', 'Can delete customer comment')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='InsuranceRequirement',
            fields=[
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.insurance_requirement.increment_insurance_requirement_id_number, editable=False, primary_key=True, serialize=False)),
                ('text', models.CharField(db_index=True, help_text='The text content of this insurance requirement.', max_length=31, unique=True, verbose_name='Text')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of this insurance requirement.', null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Insurance Requirement',
                'verbose_name_plural': 'Insurance Requirements',
                'db_table': 'workery_insurance_requirements',
                'permissions': (('can_get_insurance_requirements', 'Can get insurance_requirements'), ('can_get_insurance_requirement', 'Can get insurance_requirement'), ('can_post_insurance_requirement', 'Can create insurance_requirement'), ('can_put_insurance_requirement', 'Can update insurance_requirement'), ('can_delete_insurance_requirement', 'Can delete insurance_requirement')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='OpeningHoursSpecification',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('name', models.CharField(blank=True, db_index=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.opening_hours_specification.increment_opening_hours_specification_id_number, editable=False, primary_key=True, serialize=False)),
                ('closes', models.CharField(blank=True, help_text='The closing hour of the place or service on the given day(s) of the week.', max_length=15, null=True, verbose_name='Closes')),
                ('day_of_week', models.CharField(blank=True, help_text='The day of the week for which these opening hours are valid.', max_length=15, null=True, verbose_name='Day Of Week')),
                ('opens', models.CharField(blank=True, help_text='The opening hour of the place or service on the given day(s) of the week.', max_length=15, null=True, verbose_name='Opens')),
                ('valid_from', models.DateField(blank=True, help_text='The date when the item becomes valid.', null=True, verbose_name='Valid From')),
                ('valid_through', models.DateField(blank=True, help_text='The end of the validity of offer, price specification, or opening hours data.', null=True, verbose_name='Valid Through')),
                ('owner', models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_openinghoursspecification_abstract_thing_owner_related', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Opening Hours Specification',
                'verbose_name_plural': 'Opening Hours Specifications',
                'db_table': 'workery_opening_hours_specifications',
                'permissions': (('can_get_tenant_opening_hours_specifications', 'Can get opening hours specifications (tenant)'), ('can_get_tenant_opening_hours_specification', 'Can get opening hours specifications (tenant)'), ('can_post_tenant_opening_hours_specification', 'Can create opening hours specifications (tenant)'), ('can_put_tenant_opening_hours_specification', 'Can update opening hours specifications (tenant)'), ('can_delete_tenant_opening_hours_specification', 'Can delete opening hours specifications (tenant)')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('name', models.CharField(blank=True, db_index=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
                ('area_served', models.CharField(blank=True, help_text='The geographic area where a service or offered item is provided.', max_length=127, null=True, verbose_name='Area Served')),
                ('available_language', models.CharField(blank=True, help_text='A language someone may use with or at the item, service or place. Please use one of the language codes from the <a href="https://tools.ietf.org/html/bcp47">IETF BCP 47 standard</a>.', max_length=127, null=True, verbose_name='Available Language')),
                ('contact_type', models.CharField(blank=True, help_text='A person or organization can have different contact points, for different purposes. For example, a sales contact point, a PR contact point and so on. This property is used to specify the kind of contact point.', max_length=127, null=True, verbose_name='Contact Type')),
                ('email', models.EmailField(blank=True, db_index=True, help_text='Email address.', max_length=254, null=True, validators=[django.core.validators.EmailValidator(message='Invalid email')], verbose_name='Email')),
                ('fax_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='The fax number.', max_length=128, null=True, verbose_name='Fax Number')),
                ('product_supported', models.CharField(blank=True, default='', help_text='The product or service this support contact point is related to (such as product support for a particular product line). This can be a specific product or product line (e.g. "iPhone") or a general category of products or services (e.g. "smartphones").', max_length=31, null=True, verbose_name='Product Supported')),
                ('telephone', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_index=True, help_text='The telephone number.', max_length=128, null=True, verbose_name='Telephone')),
                ('telephone_type_of', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Telephone'), (2, 'Mobile'), (3, 'Work Telephone')], default=1, help_text='The type of phone this is. Ex: work, home, etc.', verbose_name='Telephone type of')),
                ('telephone_extension', models.CharField(blank=True, default='', help_text='The telephone number extension.', max_length=31, null=True, verbose_name='Telephone Extension')),
                ('other_telephone', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_index=True, help_text='The alternative telephone number.', max_length=128, null=True, verbose_name='Other Telephone')),
                ('other_telephone_extension', models.CharField(blank=True, default='', help_text='The alternative telephone extension number.', max_length=31, null=True, verbose_name='Other Telephone Extension')),
                ('other_telephone_type_of', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Telephone'), (2, 'Mobile'), (3, 'Work Telephone')], default=1, help_text='The type of phone the alternative telephone is. Ex: work, home, etc.', verbose_name='Other telephone type of')),
                ('address_country', models.CharField(help_text='The country. For example, USA. You can also provide the two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements">ISO 3166-1 alpha-2</a> country code.', max_length=127, verbose_name='Address Country')),
                ('address_locality', models.CharField(help_text='The locality. For example, Mountain View.', max_length=127, verbose_name='Address Locaility')),
                ('address_region', models.CharField(help_text='The region. For example, CA.', max_length=127, verbose_name='Address Region')),
                ('post_office_box_number', models.CharField(blank=True, help_text='Apartment, suite, unit, building, floor, etc.', max_length=255, null=True, verbose_name='Post Office Box Number')),
                ('postal_code', models.CharField(blank=True, db_index=True, help_text='The postal code. For example, 94043.', max_length=127, null=True, verbose_name='Postal Code')),
                ('street_address', models.CharField(help_text='The street address. For example, 1600 Amphitheatre Pkwy.', max_length=255, verbose_name='Street Address')),
                ('street_address_extra', models.CharField(blank=True, help_text='Apartment, suite, unit, building, floor, etc.', max_length=255, null=True, verbose_name='Street Address (Extra Line)')),
                ('elevation', models.FloatField(blank=True, help_text='The elevation of a location (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', null=True, verbose_name='Elevation')),
                ('latitude', models.DecimalField(blank=True, decimal_places=3, help_text='The latitude of a location. For example 37.42242 (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', max_digits=8, null=True, verbose_name='Latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=3, help_text='The longitude of a location. For example -122.08585 (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', max_digits=8, null=True, verbose_name='Longitude')),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, db_index=True, help_text='A longitude and latitude coordinates of this location.', null=True, srid=4326, verbose_name='Location')),
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.organization.increment_organization_id_number, editable=False, primary_key=True, serialize=False)),
                ('type_of', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Unknown Organization Type'), (2, 'Private Organization Type'), (3, 'Non-Profit Organization Type'), (4, 'Government Organization')], default=1, help_text='The type of organization this is based on Over55 internal classification.', verbose_name='Type of')),
                ('indexed_text', models.CharField(blank=True, db_index=True, help_text='The searchable content text used by the keyword searcher function.', max_length=511, null=True, unique=True, verbose_name='Indexed Text')),
                ('naics', models.CharField(blank=True, help_text='The North American Industry Classification System (NAICS) code for a particular organization or business person.', max_length=15, null=True, verbose_name='NAICS')),
            ],
            options={
                'verbose_name': 'Organization',
                'verbose_name_plural': 'Organizations',
                'db_table': 'workery_organizations',
                'permissions': (('can_get_organizations', 'Can get organizations'), ('can_get_organization', 'Can get organization'), ('can_post_organization', 'Can create organization'), ('can_put_organization', 'Can update organization'), ('can_delete_organization', 'Can delete organization')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='OrganizationAssociateAffiliation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_of', models.PositiveSmallIntegerField(choices=[(1, 'Affiliation'), (2, 'Alumni Of'), (3, 'Funder'), (4, 'Member Of'), (5, 'Sponsor'), (6, 'Owns'), (7, 'Founder'), (8, 'Employee')], help_text='The type of affilication this customer has with the organization.', verbose_name='Type Of')),
                ('associate', models.ForeignKey(help_text='The associate of our reference.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_organizationassociateaffiliation_associate_related', to='tenant_foundation.Associate')),
                ('organization', models.ForeignKey(help_text='The organization whom this user is affiliated to.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_organizationassociateaffiliation_organization_related', to='tenant_foundation.Organization')),
            ],
            options={
                'verbose_name': 'Organization Associate Affiliation',
                'verbose_name_plural': 'Organization Associate Affiliation',
                'db_table': 'workery_organization_associate_affiliations',
            },
        ),
        migrations.CreateModel(
            name='Partner',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('name', models.CharField(blank=True, db_index=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
                ('area_served', models.CharField(blank=True, help_text='The geographic area where a service or offered item is provided.', max_length=127, null=True, verbose_name='Area Served')),
                ('available_language', models.CharField(blank=True, help_text='A language someone may use with or at the item, service or place. Please use one of the language codes from the <a href="https://tools.ietf.org/html/bcp47">IETF BCP 47 standard</a>.', max_length=127, null=True, verbose_name='Available Language')),
                ('contact_type', models.CharField(blank=True, help_text='A person or organization can have different contact points, for different purposes. For example, a sales contact point, a PR contact point and so on. This property is used to specify the kind of contact point.', max_length=127, null=True, verbose_name='Contact Type')),
                ('email', models.EmailField(blank=True, db_index=True, help_text='Email address.', max_length=254, null=True, validators=[django.core.validators.EmailValidator(message='Invalid email')], verbose_name='Email')),
                ('fax_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='The fax number.', max_length=128, null=True, verbose_name='Fax Number')),
                ('product_supported', models.CharField(blank=True, default='', help_text='The product or service this support contact point is related to (such as product support for a particular product line). This can be a specific product or product line (e.g. "iPhone") or a general category of products or services (e.g. "smartphones").', max_length=31, null=True, verbose_name='Product Supported')),
                ('telephone', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_index=True, help_text='The telephone number.', max_length=128, null=True, verbose_name='Telephone')),
                ('telephone_type_of', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Telephone'), (2, 'Mobile'), (3, 'Work Telephone')], default=1, help_text='The type of phone this is. Ex: work, home, etc.', verbose_name='Telephone type of')),
                ('telephone_extension', models.CharField(blank=True, default='', help_text='The telephone number extension.', max_length=31, null=True, verbose_name='Telephone Extension')),
                ('other_telephone', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_index=True, help_text='The alternative telephone number.', max_length=128, null=True, verbose_name='Other Telephone')),
                ('other_telephone_extension', models.CharField(blank=True, default='', help_text='The alternative telephone extension number.', max_length=31, null=True, verbose_name='Other Telephone Extension')),
                ('other_telephone_type_of', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Telephone'), (2, 'Mobile'), (3, 'Work Telephone')], default=1, help_text='The type of phone the alternative telephone is. Ex: work, home, etc.', verbose_name='Other telephone type of')),
                ('address_country', models.CharField(help_text='The country. For example, USA. You can also provide the two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements">ISO 3166-1 alpha-2</a> country code.', max_length=127, verbose_name='Address Country')),
                ('address_locality', models.CharField(help_text='The locality. For example, Mountain View.', max_length=127, verbose_name='Address Locaility')),
                ('address_region', models.CharField(help_text='The region. For example, CA.', max_length=127, verbose_name='Address Region')),
                ('post_office_box_number', models.CharField(blank=True, help_text='Apartment, suite, unit, building, floor, etc.', max_length=255, null=True, verbose_name='Post Office Box Number')),
                ('postal_code', models.CharField(blank=True, db_index=True, help_text='The postal code. For example, 94043.', max_length=127, null=True, verbose_name='Postal Code')),
                ('street_address', models.CharField(help_text='The street address. For example, 1600 Amphitheatre Pkwy.', max_length=255, verbose_name='Street Address')),
                ('street_address_extra', models.CharField(blank=True, help_text='Apartment, suite, unit, building, floor, etc.', max_length=255, null=True, verbose_name='Street Address (Extra Line)')),
                ('elevation', models.FloatField(blank=True, help_text='The elevation of a location (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', null=True, verbose_name='Elevation')),
                ('latitude', models.DecimalField(blank=True, decimal_places=3, help_text='The latitude of a location. For example 37.42242 (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', max_digits=8, null=True, verbose_name='Latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=3, help_text='The longitude of a location. For example -122.08585 (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', max_digits=8, null=True, verbose_name='Longitude')),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, db_index=True, help_text='A longitude and latitude coordinates of this location.', null=True, srid=4326, verbose_name='Location')),
                ('given_name', models.CharField(blank=True, db_index=True, help_text='The customers given name.', max_length=63, null=True, verbose_name='Given Name')),
                ('middle_name', models.CharField(blank=True, db_index=True, help_text='The customers last name.', max_length=63, null=True, verbose_name='Middle Name')),
                ('last_name', models.CharField(blank=True, db_index=True, help_text='The customers last name.', max_length=63, null=True, verbose_name='Last Name')),
                ('birthdate', models.DateField(blank=True, help_text='The customers birthdate.', null=True, verbose_name='Birthdate')),
                ('join_date', models.DateTimeField(blank=True, help_text='The date the customer joined this organization.', null=True, verbose_name='Join Date')),
                ('nationality', models.CharField(blank=True, help_text='Nationality of the person.', max_length=63, null=True, verbose_name='Nationality')),
                ('gender', models.CharField(blank=True, help_text='Gender of the person. While Male and Female may be used, text strings are also acceptable for people who do not identify as a binary gender.', max_length=31, null=True, verbose_name='Gender')),
                ('tax_id', models.CharField(blank=True, help_text='The Tax / Fiscal ID of the organization or person, e.g. the TIN in the US or the CIF/NIF in Spain.', max_length=127, null=True, verbose_name='Tax ID')),
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.partner.increment_partner_id_number, editable=False, primary_key=True, serialize=False)),
                ('indexed_text', models.CharField(blank=True, db_index=True, help_text='The searchable content text used by the keyword searcher function.', max_length=511, null=True, unique=True, verbose_name='Indexed Text')),
                ('is_ok_to_email', models.BooleanField(default=True, help_text='Indicates whether partner allows being reached by email', verbose_name='Is OK to email')),
                ('is_ok_to_text', models.BooleanField(default=True, help_text='Indicates whether partner allows being reached by text.', verbose_name='Is OK to text')),
                ('how_hear', models.CharField(blank=True, help_text='How partner heared about this business.', max_length=2055, null=True, verbose_name='How hear')),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('is_archived', models.BooleanField(db_index=True, default=False, help_text='Indicates whether partner was archived.', verbose_name='Is Archived')),
            ],
            options={
                'verbose_name': 'Partner',
                'verbose_name_plural': 'Partners',
                'db_table': 'workery_partners',
                'permissions': (('can_get_partners', 'Can get partners'), ('can_get_partner', 'Can get partner'), ('can_post_partner', 'Can create partner'), ('can_put_partner', 'Can update partner'), ('can_delete_partner', 'Can delete partner')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='PartnerComment',
            fields=[
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.partner_comment.increment_partner_comment_id_number, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('about', models.ForeignKey(help_text='The partner whom this comment is about.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_partnercomment_about_related', to='tenant_foundation.Partner')),
                ('comment', models.ForeignKey(help_text='The comment this item belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_partnercomment_comment_categories', to='tenant_foundation.Comment')),
            ],
            options={
                'verbose_name': 'Partner Comment',
                'verbose_name_plural': 'Partner Comments',
                'db_table': 'workery_partner_comments',
                'ordering': ['-created_at'],
                'permissions': (('can_get_partner_comments', 'Can get partner comments'), ('can_get_partner_comment', 'Can get partner comment'), ('can_post_partner_comment', 'Can create partner comment'), ('can_put_partner_comment', 'Can update partner comment'), ('can_delete_partner_comment', 'Can delete partner comment')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='PublicImageUpload',
            fields=[
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.public_image_upload.increment_public_image_upload_id_number, editable=False, primary_key=True, serialize=False)),
                ('image_file', sorl.thumbnail.fields.ImageField(help_text='The upload image.', storage=workery.s3utils.PublicMediaStorage(), upload_to='uploads/%Y/%m/%d/')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this away log.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_publicimageupload_created_by_related', to=settings.AUTH_USER_MODEL)),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom last modified this away log.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_publicimageupload_last_modified_by_related', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Public Image Upload',
                'verbose_name_plural': 'Public Image Uploads',
                'db_table': 'workery_public_image_uploads',
                'permissions': (('can_get_public_image_uploads', 'Can get public image uploads'), ('can_get_public_image_upload', 'Can get public image upload'), ('can_post_public_image_upload', 'Can create public image upload'), ('can_put_public_image_upload', 'Can update public image upload'), ('can_delete_public_image_upload', 'Can delete public image upload')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='ResourceCategory',
            fields=[
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.resource_category.increment_resource_category_id_number, editable=False, primary_key=True, serialize=False)),
                ('icon', models.CharField(db_index=True, help_text='The icon of this resource category.', max_length=31, unique=True, verbose_name='icon')),
                ('title', models.CharField(db_index=True, help_text='The title of this resource category.', max_length=63, unique=True, verbose_name='title')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of this resource category.', null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Resource Category',
                'verbose_name_plural': 'Resource Categories',
                'db_table': 'workery_resource_categories',
                'permissions': (('can_get_resource_categories', 'Can get resource_categories'), ('can_get_resource_category', 'Can get resource_category'), ('can_post_resource_category', 'Can create resource_category'), ('can_put_resource_category', 'Can update resource_category'), ('can_delete_resource_category', 'Can delete resource_category')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='ResourceItem',
            fields=[
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.resource_item.increment_resource_item_id_number, editable=False, primary_key=True, serialize=False)),
                ('icon', models.CharField(blank=True, db_index=True, help_text='The icon of this resource item.', max_length=31, verbose_name='icon')),
                ('title', models.CharField(db_index=True, help_text='The title of this resource item.', max_length=63, verbose_name='title')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of this resource item.', null=True, verbose_name='Description')),
                ('category', models.ForeignKey(help_text='The resource category this item belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_resourceitem_resource_categories', to='tenant_foundation.ResourceCategory')),
            ],
            options={
                'verbose_name': 'Resource Item',
                'verbose_name_plural': 'Resource Items',
                'db_table': 'workery_resource_items',
                'permissions': (('can_get_resource_items', 'Can get resource_items'), ('can_get_resource_item', 'Can get resource_item'), ('can_post_resource_item', 'Can create resource_item'), ('can_put_resource_item', 'Can update resource_item'), ('can_delete_resource_item', 'Can delete resource_item')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='ResourceItemSortOrder',
            fields=[
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.resource_item_sort_order.increment_resource_item_sort_order_id_number, editable=False, primary_key=True, serialize=False)),
                ('ordering_number', models.PositiveSmallIntegerField(blank=True, default=1, help_text='The ordering number this item will be placed per category.', verbose_name='Ordering Number')),
                ('category', models.ForeignKey(help_text='The resource category this item belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_resourceitemsortorder_resource_categories', to='tenant_foundation.ResourceCategory')),
                ('item', models.ForeignKey(help_text='The resource item this object belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_resourceitemsortorder_resource_items', to='tenant_foundation.ResourceItem')),
            ],
            options={
                'verbose_name': 'Resource Item Sort Order',
                'verbose_name_plural': 'Resource Item Sort Orders',
                'db_table': 'workery_resource_item_sort_orders',
                'permissions': (('can_get_resource_item_sort_orders', 'Can get resource item sort orders'), ('can_get_resource_item_sort_order', 'Can get resource item sort order'), ('can_post_resource_item_sort_order', 'Can create resource item sort order'), ('can_put_resource_item_sort_order', 'Can update resource item sort order'), ('can_delete_resource_item_sort_order', 'Can delete resource item sort order')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='SkillSet',
            fields=[
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.skill_set.increment_skillset_id_number, editable=False, primary_key=True, serialize=False)),
                ('category', models.CharField(db_index=True, help_text='The category text of this skill set.', max_length=31, verbose_name='Category')),
                ('sub_category', models.CharField(db_index=True, help_text='The sub-category text of this skill set.', max_length=31, verbose_name='Sub-Category')),
                ('description', models.TextField(blank=True, default='', help_text='A description of the skill set.', null=True, verbose_name='Description')),
                ('insurance_requirements', models.ManyToManyField(blank=True, help_text='The insurance requirements this associate meets.', related_name='tenant_foundation_skillset_insurance_requirements_related', to='tenant_foundation.InsuranceRequirement')),
            ],
            options={
                'verbose_name': 'Skill Set',
                'verbose_name_plural': 'Skill Sets',
                'db_table': 'workery_skill_sets',
                'permissions': (('can_get_skill_sets', 'Can get skill sets'), ('can_get_skill_set', 'Can get skill set'), ('can_post_skill_set', 'Can create skill set'), ('can_put_skill_set', 'Can update skill set'), ('can_delete_skill_set', 'Can delete skill set')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('name', models.CharField(blank=True, db_index=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
                ('area_served', models.CharField(blank=True, help_text='The geographic area where a service or offered item is provided.', max_length=127, null=True, verbose_name='Area Served')),
                ('available_language', models.CharField(blank=True, help_text='A language someone may use with or at the item, service or place. Please use one of the language codes from the <a href="https://tools.ietf.org/html/bcp47">IETF BCP 47 standard</a>.', max_length=127, null=True, verbose_name='Available Language')),
                ('contact_type', models.CharField(blank=True, help_text='A person or organization can have different contact points, for different purposes. For example, a sales contact point, a PR contact point and so on. This property is used to specify the kind of contact point.', max_length=127, null=True, verbose_name='Contact Type')),
                ('email', models.EmailField(blank=True, db_index=True, help_text='Email address.', max_length=254, null=True, validators=[django.core.validators.EmailValidator(message='Invalid email')], verbose_name='Email')),
                ('fax_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='The fax number.', max_length=128, null=True, verbose_name='Fax Number')),
                ('product_supported', models.CharField(blank=True, default='', help_text='The product or service this support contact point is related to (such as product support for a particular product line). This can be a specific product or product line (e.g. "iPhone") or a general category of products or services (e.g. "smartphones").', max_length=31, null=True, verbose_name='Product Supported')),
                ('telephone', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_index=True, help_text='The telephone number.', max_length=128, null=True, verbose_name='Telephone')),
                ('telephone_type_of', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Telephone'), (2, 'Mobile'), (3, 'Work Telephone')], default=1, help_text='The type of phone this is. Ex: work, home, etc.', verbose_name='Telephone type of')),
                ('telephone_extension', models.CharField(blank=True, default='', help_text='The telephone number extension.', max_length=31, null=True, verbose_name='Telephone Extension')),
                ('other_telephone', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_index=True, help_text='The alternative telephone number.', max_length=128, null=True, verbose_name='Other Telephone')),
                ('other_telephone_extension', models.CharField(blank=True, default='', help_text='The alternative telephone extension number.', max_length=31, null=True, verbose_name='Other Telephone Extension')),
                ('other_telephone_type_of', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Telephone'), (2, 'Mobile'), (3, 'Work Telephone')], default=1, help_text='The type of phone the alternative telephone is. Ex: work, home, etc.', verbose_name='Other telephone type of')),
                ('address_country', models.CharField(help_text='The country. For example, USA. You can also provide the two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements">ISO 3166-1 alpha-2</a> country code.', max_length=127, verbose_name='Address Country')),
                ('address_locality', models.CharField(help_text='The locality. For example, Mountain View.', max_length=127, verbose_name='Address Locaility')),
                ('address_region', models.CharField(help_text='The region. For example, CA.', max_length=127, verbose_name='Address Region')),
                ('post_office_box_number', models.CharField(blank=True, help_text='Apartment, suite, unit, building, floor, etc.', max_length=255, null=True, verbose_name='Post Office Box Number')),
                ('postal_code', models.CharField(blank=True, db_index=True, help_text='The postal code. For example, 94043.', max_length=127, null=True, verbose_name='Postal Code')),
                ('street_address', models.CharField(help_text='The street address. For example, 1600 Amphitheatre Pkwy.', max_length=255, verbose_name='Street Address')),
                ('street_address_extra', models.CharField(blank=True, help_text='Apartment, suite, unit, building, floor, etc.', max_length=255, null=True, verbose_name='Street Address (Extra Line)')),
                ('elevation', models.FloatField(blank=True, help_text='The elevation of a location (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', null=True, verbose_name='Elevation')),
                ('latitude', models.DecimalField(blank=True, decimal_places=3, help_text='The latitude of a location. For example 37.42242 (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', max_digits=8, null=True, verbose_name='Latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=3, help_text='The longitude of a location. For example -122.08585 (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', max_digits=8, null=True, verbose_name='Longitude')),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, db_index=True, help_text='A longitude and latitude coordinates of this location.', null=True, srid=4326, verbose_name='Location')),
                ('given_name', models.CharField(blank=True, db_index=True, help_text='The customers given name.', max_length=63, null=True, verbose_name='Given Name')),
                ('middle_name', models.CharField(blank=True, db_index=True, help_text='The customers last name.', max_length=63, null=True, verbose_name='Middle Name')),
                ('last_name', models.CharField(blank=True, db_index=True, help_text='The customers last name.', max_length=63, null=True, verbose_name='Last Name')),
                ('birthdate', models.DateField(blank=True, help_text='The customers birthdate.', null=True, verbose_name='Birthdate')),
                ('join_date', models.DateTimeField(blank=True, help_text='The date the customer joined this organization.', null=True, verbose_name='Join Date')),
                ('nationality', models.CharField(blank=True, help_text='Nationality of the person.', max_length=63, null=True, verbose_name='Nationality')),
                ('gender', models.CharField(blank=True, help_text='Gender of the person. While Male and Female may be used, text strings are also acceptable for people who do not identify as a binary gender.', max_length=31, null=True, verbose_name='Gender')),
                ('tax_id', models.CharField(blank=True, help_text='The Tax / Fiscal ID of the organization or person, e.g. the TIN in the US or the CIF/NIF in Spain.', max_length=127, null=True, verbose_name='Tax ID')),
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.staff.increment_staff_id_number, editable=False, primary_key=True, serialize=False)),
                ('how_hear', models.CharField(blank=True, help_text='How this staff member heared about this organization.', max_length=2055, null=True, verbose_name='How hear')),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('indexed_text', models.CharField(blank=True, db_index=True, help_text='The searchable content text used by the keyword searcher function.', max_length=511, null=True, unique=True, verbose_name='Indexed Text')),
                ('is_archived', models.BooleanField(db_index=True, default=False, help_text='Indicates whether staff was archived.', verbose_name='Is Archived')),
                ('avatar_image', models.ForeignKey(blank=True, help_text='The avatar image of this staff.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_staff_avatar_image_related', to='tenant_foundation.PublicImageUpload')),
            ],
            options={
                'verbose_name': 'Staff',
                'verbose_name_plural': 'Staves',
                'db_table': 'workery_staff',
                'permissions': (('can_get_staves', 'Can get staves'), ('can_get_staff', 'Can get staff'), ('can_post_staff', 'Can create staff'), ('can_put_staff', 'Can update staff'), ('can_delete_staff', 'Can delete staff')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='StaffComment',
            fields=[
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.staff_comment.increment_staff_comment_id_number, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('about', models.ForeignKey(help_text='The staff whom this comment is about.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_staffcomment_about_related', to='tenant_foundation.Staff')),
                ('comment', models.ForeignKey(help_text='The comment this item belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_staffcomment_comment_categories', to='tenant_foundation.Comment')),
            ],
            options={
                'verbose_name': 'Staff Comment',
                'verbose_name_plural': 'Staff Comments',
                'db_table': 'workery_staff_comments',
                'ordering': ['-created_at'],
                'permissions': (('can_get_staff_comments', 'Can get staff comments'), ('can_get_staff_comment', 'Can get staff comment'), ('can_post_staff_comment', 'Can create staff comment'), ('can_put_staff_comment', 'Can update staff comment'), ('can_delete_staff_comment', 'Can delete staff comment')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.tag.increment_tag_id_number, editable=False, primary_key=True, serialize=False)),
                ('text', models.CharField(db_index=True, help_text='The text content of this tag.', max_length=31, unique=True, verbose_name='Text')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of this tag.', null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'db_table': 'workery_tags',
                'permissions': (('can_get_tags', 'Can get tags'), ('can_get_tag', 'Can get tag'), ('can_post_tag', 'Can create tag'), ('can_put_tag', 'Can update tag'), ('can_delete_tag', 'Can delete tag')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='TaskItem',
            fields=[
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.taskitem.increment_task_item_id_number, editable=False, primary_key=True, serialize=False)),
                ('type_of', models.PositiveSmallIntegerField(choices=[(1, 'Assign associate'), (2, 'Follow up is job complete'), (3, 'Follow up customer survey')], help_text='The type of task item this is.', verbose_name='Type of')),
                ('title', models.CharField(help_text='The title this task item.', max_length=63, verbose_name='Title')),
                ('description', models.TextField(help_text='A short description of this task item.', verbose_name='Description')),
                ('due_date', models.DateField(blank=True, db_index=True, default=tenant_foundation.models.taskitem.get_todays_date, help_text='The date that this task must be finished by.', verbose_name='Due Date')),
                ('is_closed', models.BooleanField(db_index=True, default=False, help_text='Was this task completed or closed?', verbose_name='Is Closed')),
                ('was_postponed', models.BooleanField(default=False, help_text='Was this task postponed?', verbose_name='Was postponed')),
                ('closing_reason', models.PositiveSmallIntegerField(blank=True, default=0, help_text='The reason for this task was closed.', null=True, verbose_name='Closing Reason')),
                ('closing_reason_other', models.CharField(blank=True, default='', help_text='A specific reason this task was closed.', max_length=1024, null=True, verbose_name='Closing Reason other')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this order.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_taskitem_created_by_related', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'TaskItem',
                'verbose_name_plural': 'TaskItems',
                'db_table': 'workery_task_items',
                'ordering': ['due_date'],
                'permissions': (('can_get_task_items', 'Can get task_items'), ('can_get_task_item', 'Can get task_item'), ('can_post_task_item', 'Can create task_item'), ('can_put_task_item', 'Can update task_item'), ('can_delete_task_item', 'Can delete task_item')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='VehicleType',
            fields=[
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.vehicle_type.increment_vehicle_type_id_number, editable=False, primary_key=True, serialize=False)),
                ('text', models.CharField(db_index=True, help_text='The text content of this vehicle_type.', max_length=31, unique=True, verbose_name='Text')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of this vehicle_type.', null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'VehicleType',
                'verbose_name_plural': 'VehicleTypes',
                'db_table': 'workery_vehicle_types',
                'permissions': (('can_get_vehicle_types', 'Can get vehicle_types'), ('can_get_vehicle_type', 'Can get vehicle_type'), ('can_post_vehicle_type', 'Can create vehicle_type'), ('can_put_vehicle_type', 'Can update vehicle_type'), ('can_delete_vehicle_type', 'Can delete vehicle_type')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='WorkOrder',
            fields=[
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.work_order.increment_order_id_number, editable=False, primary_key=True, serialize=False)),
                ('description', models.TextField(blank=True, default='', help_text='A description of this job.', null=True, verbose_name='Description')),
                ('assignment_date', models.DateField(blank=True, help_text='The date that an associate was assigned to the customer.', null=True, verbose_name='Assignment Date')),
                ('is_ongoing', models.BooleanField(default=False, help_text='Track whether this order is ongoing job or one-time job.', verbose_name='Is ongoing')),
                ('is_home_support_service', models.BooleanField(default=False, help_text='Track whether this order is a home support service request.', verbose_name='Is Home Support Service')),
                ('start_date', models.DateField(blank=True, default=tenant_foundation.models.work_order.get_todays_date, help_text='The date that this order will begin.', verbose_name='Start Date')),
                ('completion_date', models.DateField(blank=True, help_text='The date that this order was completed.', null=True, verbose_name='Completion Date')),
                ('hours', models.DecimalField(blank=True, decimal_places=1, default=0, help_text='The total amount of hours worked on for this order by the associate.', max_digits=7, null=True, verbose_name='Hours')),
                ('type_of', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Residential Job Type'), (2, 'Commercial Job Type'), (3, 'Unassigned Job Type')], default=3, help_text='The type of job this is.', verbose_name='Type Of')),
                ('indexed_text', models.CharField(blank=True, db_index=True, help_text='The searchable content text used by the keyword searcher function.', max_length=1024, null=True, unique=True, verbose_name='Indexed Text')),
                ('follow_up_days_number', models.PositiveSmallIntegerField(blank=True, default=0, help_text='The number of days from now to follow up on for the ongoing job.', verbose_name='Follow Up Days Number')),
                ('closing_reason', models.PositiveSmallIntegerField(blank=True, default=0, help_text='The reason for this job order closing.', null=True, verbose_name='Closing Reason')),
                ('closing_reason_other', models.CharField(blank=True, default='', help_text='A specific reason this job order was closed.', max_length=1024, null=True, verbose_name='Closing Reason other')),
                ('state', django_fsm.FSMField(blank=True, db_index=True, default='pending', help_text='The state of this job order.', max_length=50, verbose_name='State')),
                ('was_job_satisfactory', models.BooleanField(default=True, help_text='Customer Survey Q1: Was the quality of the work satisfactory?', verbose_name='Was job satisfactory?')),
                ('was_job_finished_on_time_and_on_budget', models.BooleanField(default=True, help_text='Customer Survey Q2: Was the work completed on time and on budget?', verbose_name='Was job finished on time and on budget?')),
                ('was_associate_punctual', models.BooleanField(default=True, help_text='Customer Survey Q3: Was the Associate Member punctual?', verbose_name='Was associate punctual?')),
                ('was_associate_professional', models.BooleanField(default=True, help_text='Customer Survey Q4: Was the Associate Member professional?', verbose_name='Was associate professional?')),
                ('would_customer_refer_our_organization', models.BooleanField(default=True, help_text='Customer Survey Q5: Would you refer Over55 to a friend of family member?', verbose_name='Would customer refer our organization?')),
                ('score', models.PositiveSmallIntegerField(blank=True, default=0, help_text='The score number earned at the completion of this date.', verbose_name='Score')),
                ('invoice_date', models.DateField(blank=True, help_text='The date that this order was completed.', null=True, verbose_name='Invoice Date')),
                ('invoice_id', models.PositiveIntegerField(blank=True, choices=[(1, 'Residential Job Type'), (2, 'Commercial Job Type'), (3, 'Unassigned Job Type')], default=3, help_text='The type of job this is.', verbose_name='Invoice ID')),
                ('invoice_quote_amount_currency', djmoney.models.fields.CurrencyField(choices=[('XUA', 'ADB Unit of Account'), ('AFN', 'Afghani'), ('DZD', 'Algerian Dinar'), ('ARS', 'Argentine Peso'), ('AMD', 'Armenian Dram'), ('AWG', 'Aruban Guilder'), ('AUD', 'Australian Dollar'), ('AZN', 'Azerbaijanian Manat'), ('BSD', 'Bahamian Dollar'), ('BHD', 'Bahraini Dinar'), ('THB', 'Baht'), ('PAB', 'Balboa'), ('BBD', 'Barbados Dollar'), ('BYN', 'Belarussian Ruble'), ('BYR', 'Belarussian Ruble'), ('BZD', 'Belize Dollar'), ('BMD', 'Bermudian Dollar (customarily known as Bermuda Dollar)'), ('BTN', 'Bhutanese ngultrum'), ('VEF', 'Bolivar Fuerte'), ('BOB', 'Boliviano'), ('XBA', 'Bond Markets Units European Composite Unit (EURCO)'), ('BRL', 'Brazilian Real'), ('BND', 'Brunei Dollar'), ('BGN', 'Bulgarian Lev'), ('BIF', 'Burundi Franc'), ('XOF', 'CFA Franc BCEAO'), ('XAF', 'CFA franc BEAC'), ('XPF', 'CFP Franc'), ('CAD', 'Canadian Dollar'), ('CVE', 'Cape Verde Escudo'), ('KYD', 'Cayman Islands Dollar'), ('CLP', 'Chilean peso'), ('XTS', 'Codes specifically reserved for testing purposes'), ('COP', 'Colombian peso'), ('KMF', 'Comoro Franc'), ('CDF', 'Congolese franc'), ('BAM', 'Convertible Marks'), ('NIO', 'Cordoba Oro'), ('CRC', 'Costa Rican Colon'), ('HRK', 'Croatian Kuna'), ('CUP', 'Cuban Peso'), ('CUC', 'Cuban convertible peso'), ('CZK', 'Czech Koruna'), ('GMD', 'Dalasi'), ('DKK', 'Danish Krone'), ('MKD', 'Denar'), ('DJF', 'Djibouti Franc'), ('STD', 'Dobra'), ('DOP', 'Dominican Peso'), ('VND', 'Dong'), ('XCD', 'East Caribbean Dollar'), ('EGP', 'Egyptian Pound'), ('SVC', 'El Salvador Colon'), ('ETB', 'Ethiopian Birr'), ('EUR', 'Euro'), ('XBB', 'European Monetary Unit (E.M.U.-6)'), ('XBD', 'European Unit of Account 17(E.U.A.-17)'), ('XBC', 'European Unit of Account 9(E.U.A.-9)'), ('FKP', 'Falkland Islands Pound'), ('FJD', 'Fiji Dollar'), ('HUF', 'Forint'), ('GHS', 'Ghana Cedi'), ('GIP', 'Gibraltar Pound'), ('XAU', 'Gold'), ('XFO', 'Gold-Franc'), ('PYG', 'Guarani'), ('GNF', 'Guinea Franc'), ('GYD', 'Guyana Dollar'), ('HTG', 'Haitian gourde'), ('HKD', 'Hong Kong Dollar'), ('UAH', 'Hryvnia'), ('ISK', 'Iceland Krona'), ('INR', 'Indian Rupee'), ('IRR', 'Iranian Rial'), ('IQD', 'Iraqi Dinar'), ('IMP', 'Isle of Man Pound'), ('JMD', 'Jamaican Dollar'), ('JOD', 'Jordanian Dinar'), ('KES', 'Kenyan Shilling'), ('PGK', 'Kina'), ('LAK', 'Kip'), ('KWD', 'Kuwaiti Dinar'), ('AOA', 'Kwanza'), ('MMK', 'Kyat'), ('GEL', 'Lari'), ('LVL', 'Latvian Lats'), ('LBP', 'Lebanese Pound'), ('ALL', 'Lek'), ('HNL', 'Lempira'), ('SLL', 'Leone'), ('LSL', 'Lesotho loti'), ('LRD', 'Liberian Dollar'), ('LYD', 'Libyan Dinar'), ('SZL', 'Lilangeni'), ('LTL', 'Lithuanian Litas'), ('MGA', 'Malagasy Ariary'), ('MWK', 'Malawian Kwacha'), ('MYR', 'Malaysian Ringgit'), ('TMM', 'Manat'), ('MUR', 'Mauritius Rupee'), ('MZN', 'Metical'), ('MXV', 'Mexican Unidad de Inversion (UDI)'), ('MXN', 'Mexican peso'), ('MDL', 'Moldovan Leu'), ('MAD', 'Moroccan Dirham'), ('BOV', 'Mvdol'), ('NGN', 'Naira'), ('ERN', 'Nakfa'), ('NAD', 'Namibian Dollar'), ('NPR', 'Nepalese Rupee'), ('ANG', 'Netherlands Antillian Guilder'), ('ILS', 'New Israeli Sheqel'), ('RON', 'New Leu'), ('TWD', 'New Taiwan Dollar'), ('NZD', 'New Zealand Dollar'), ('KPW', 'North Korean Won'), ('NOK', 'Norwegian Krone'), ('PEN', 'Nuevo Sol'), ('MRO', 'Ouguiya'), ('TOP', 'Paanga'), ('PKR', 'Pakistan Rupee'), ('XPD', 'Palladium'), ('MOP', 'Pataca'), ('PHP', 'Philippine Peso'), ('XPT', 'Platinum'), ('GBP', 'Pound Sterling'), ('BWP', 'Pula'), ('QAR', 'Qatari Rial'), ('GTQ', 'Quetzal'), ('ZAR', 'Rand'), ('OMR', 'Rial Omani'), ('KHR', 'Riel'), ('MVR', 'Rufiyaa'), ('IDR', 'Rupiah'), ('RUB', 'Russian Ruble'), ('RWF', 'Rwanda Franc'), ('XDR', 'SDR'), ('SHP', 'Saint Helena Pound'), ('SAR', 'Saudi Riyal'), ('RSD', 'Serbian Dinar'), ('SCR', 'Seychelles Rupee'), ('XAG', 'Silver'), ('SGD', 'Singapore Dollar'), ('SBD', 'Solomon Islands Dollar'), ('KGS', 'Som'), ('SOS', 'Somali Shilling'), ('TJS', 'Somoni'), ('SSP', 'South Sudanese Pound'), ('LKR', 'Sri Lanka Rupee'), ('XSU', 'Sucre'), ('SDG', 'Sudanese Pound'), ('SRD', 'Surinam Dollar'), ('SEK', 'Swedish Krona'), ('CHF', 'Swiss Franc'), ('SYP', 'Syrian Pound'), ('BDT', 'Taka'), ('WST', 'Tala'), ('TZS', 'Tanzanian Shilling'), ('KZT', 'Tenge'), ('XXX', 'The codes assigned for transactions where no currency is involved'), ('TTD', 'Trinidad and Tobago Dollar'), ('MNT', 'Tugrik'), ('TND', 'Tunisian Dinar'), ('TRY', 'Turkish Lira'), ('TMT', 'Turkmenistan New Manat'), ('TVD', 'Tuvalu dollar'), ('AED', 'UAE Dirham'), ('XFU', 'UIC-Franc'), ('USD', 'US Dollar'), ('USN', 'US Dollar (Next day)'), ('UGX', 'Uganda Shilling'), ('CLF', 'Unidad de Fomento'), ('COU', 'Unidad de Valor Real'), ('UYI', 'Uruguay Peso en Unidades Indexadas (URUIURUI)'), ('UYU', 'Uruguayan peso'), ('UZS', 'Uzbekistan Sum'), ('VUV', 'Vatu'), ('CHE', 'WIR Euro'), ('CHW', 'WIR Franc'), ('KRW', 'Won'), ('YER', 'Yemeni Rial'), ('JPY', 'Yen'), ('CNY', 'Yuan Renminbi'), ('ZMK', 'Zambian Kwacha'), ('ZMW', 'Zambian Kwacha'), ('ZWD', 'Zimbabwe Dollar A/06'), ('ZWN', 'Zimbabwe dollar A/08'), ('ZWL', 'Zimbabwe dollar A/09'), ('PLN', 'Zloty')], default='CAD', editable=False, max_length=3)),
                ('invoice_quote_amount', djmoney.models.fields.MoneyField(blank=True, decimal_places=2, default=Decimal('0'), default_currency='CAD', help_text='The original quote made by the associate for this job.', max_digits=10, verbose_name='Invoice Original Quote Amount')),
                ('invoice_labour_amount_currency', djmoney.models.fields.CurrencyField(choices=[('XUA', 'ADB Unit of Account'), ('AFN', 'Afghani'), ('DZD', 'Algerian Dinar'), ('ARS', 'Argentine Peso'), ('AMD', 'Armenian Dram'), ('AWG', 'Aruban Guilder'), ('AUD', 'Australian Dollar'), ('AZN', 'Azerbaijanian Manat'), ('BSD', 'Bahamian Dollar'), ('BHD', 'Bahraini Dinar'), ('THB', 'Baht'), ('PAB', 'Balboa'), ('BBD', 'Barbados Dollar'), ('BYN', 'Belarussian Ruble'), ('BYR', 'Belarussian Ruble'), ('BZD', 'Belize Dollar'), ('BMD', 'Bermudian Dollar (customarily known as Bermuda Dollar)'), ('BTN', 'Bhutanese ngultrum'), ('VEF', 'Bolivar Fuerte'), ('BOB', 'Boliviano'), ('XBA', 'Bond Markets Units European Composite Unit (EURCO)'), ('BRL', 'Brazilian Real'), ('BND', 'Brunei Dollar'), ('BGN', 'Bulgarian Lev'), ('BIF', 'Burundi Franc'), ('XOF', 'CFA Franc BCEAO'), ('XAF', 'CFA franc BEAC'), ('XPF', 'CFP Franc'), ('CAD', 'Canadian Dollar'), ('CVE', 'Cape Verde Escudo'), ('KYD', 'Cayman Islands Dollar'), ('CLP', 'Chilean peso'), ('XTS', 'Codes specifically reserved for testing purposes'), ('COP', 'Colombian peso'), ('KMF', 'Comoro Franc'), ('CDF', 'Congolese franc'), ('BAM', 'Convertible Marks'), ('NIO', 'Cordoba Oro'), ('CRC', 'Costa Rican Colon'), ('HRK', 'Croatian Kuna'), ('CUP', 'Cuban Peso'), ('CUC', 'Cuban convertible peso'), ('CZK', 'Czech Koruna'), ('GMD', 'Dalasi'), ('DKK', 'Danish Krone'), ('MKD', 'Denar'), ('DJF', 'Djibouti Franc'), ('STD', 'Dobra'), ('DOP', 'Dominican Peso'), ('VND', 'Dong'), ('XCD', 'East Caribbean Dollar'), ('EGP', 'Egyptian Pound'), ('SVC', 'El Salvador Colon'), ('ETB', 'Ethiopian Birr'), ('EUR', 'Euro'), ('XBB', 'European Monetary Unit (E.M.U.-6)'), ('XBD', 'European Unit of Account 17(E.U.A.-17)'), ('XBC', 'European Unit of Account 9(E.U.A.-9)'), ('FKP', 'Falkland Islands Pound'), ('FJD', 'Fiji Dollar'), ('HUF', 'Forint'), ('GHS', 'Ghana Cedi'), ('GIP', 'Gibraltar Pound'), ('XAU', 'Gold'), ('XFO', 'Gold-Franc'), ('PYG', 'Guarani'), ('GNF', 'Guinea Franc'), ('GYD', 'Guyana Dollar'), ('HTG', 'Haitian gourde'), ('HKD', 'Hong Kong Dollar'), ('UAH', 'Hryvnia'), ('ISK', 'Iceland Krona'), ('INR', 'Indian Rupee'), ('IRR', 'Iranian Rial'), ('IQD', 'Iraqi Dinar'), ('IMP', 'Isle of Man Pound'), ('JMD', 'Jamaican Dollar'), ('JOD', 'Jordanian Dinar'), ('KES', 'Kenyan Shilling'), ('PGK', 'Kina'), ('LAK', 'Kip'), ('KWD', 'Kuwaiti Dinar'), ('AOA', 'Kwanza'), ('MMK', 'Kyat'), ('GEL', 'Lari'), ('LVL', 'Latvian Lats'), ('LBP', 'Lebanese Pound'), ('ALL', 'Lek'), ('HNL', 'Lempira'), ('SLL', 'Leone'), ('LSL', 'Lesotho loti'), ('LRD', 'Liberian Dollar'), ('LYD', 'Libyan Dinar'), ('SZL', 'Lilangeni'), ('LTL', 'Lithuanian Litas'), ('MGA', 'Malagasy Ariary'), ('MWK', 'Malawian Kwacha'), ('MYR', 'Malaysian Ringgit'), ('TMM', 'Manat'), ('MUR', 'Mauritius Rupee'), ('MZN', 'Metical'), ('MXV', 'Mexican Unidad de Inversion (UDI)'), ('MXN', 'Mexican peso'), ('MDL', 'Moldovan Leu'), ('MAD', 'Moroccan Dirham'), ('BOV', 'Mvdol'), ('NGN', 'Naira'), ('ERN', 'Nakfa'), ('NAD', 'Namibian Dollar'), ('NPR', 'Nepalese Rupee'), ('ANG', 'Netherlands Antillian Guilder'), ('ILS', 'New Israeli Sheqel'), ('RON', 'New Leu'), ('TWD', 'New Taiwan Dollar'), ('NZD', 'New Zealand Dollar'), ('KPW', 'North Korean Won'), ('NOK', 'Norwegian Krone'), ('PEN', 'Nuevo Sol'), ('MRO', 'Ouguiya'), ('TOP', 'Paanga'), ('PKR', 'Pakistan Rupee'), ('XPD', 'Palladium'), ('MOP', 'Pataca'), ('PHP', 'Philippine Peso'), ('XPT', 'Platinum'), ('GBP', 'Pound Sterling'), ('BWP', 'Pula'), ('QAR', 'Qatari Rial'), ('GTQ', 'Quetzal'), ('ZAR', 'Rand'), ('OMR', 'Rial Omani'), ('KHR', 'Riel'), ('MVR', 'Rufiyaa'), ('IDR', 'Rupiah'), ('RUB', 'Russian Ruble'), ('RWF', 'Rwanda Franc'), ('XDR', 'SDR'), ('SHP', 'Saint Helena Pound'), ('SAR', 'Saudi Riyal'), ('RSD', 'Serbian Dinar'), ('SCR', 'Seychelles Rupee'), ('XAG', 'Silver'), ('SGD', 'Singapore Dollar'), ('SBD', 'Solomon Islands Dollar'), ('KGS', 'Som'), ('SOS', 'Somali Shilling'), ('TJS', 'Somoni'), ('SSP', 'South Sudanese Pound'), ('LKR', 'Sri Lanka Rupee'), ('XSU', 'Sucre'), ('SDG', 'Sudanese Pound'), ('SRD', 'Surinam Dollar'), ('SEK', 'Swedish Krona'), ('CHF', 'Swiss Franc'), ('SYP', 'Syrian Pound'), ('BDT', 'Taka'), ('WST', 'Tala'), ('TZS', 'Tanzanian Shilling'), ('KZT', 'Tenge'), ('XXX', 'The codes assigned for transactions where no currency is involved'), ('TTD', 'Trinidad and Tobago Dollar'), ('MNT', 'Tugrik'), ('TND', 'Tunisian Dinar'), ('TRY', 'Turkish Lira'), ('TMT', 'Turkmenistan New Manat'), ('TVD', 'Tuvalu dollar'), ('AED', 'UAE Dirham'), ('XFU', 'UIC-Franc'), ('USD', 'US Dollar'), ('USN', 'US Dollar (Next day)'), ('UGX', 'Uganda Shilling'), ('CLF', 'Unidad de Fomento'), ('COU', 'Unidad de Valor Real'), ('UYI', 'Uruguay Peso en Unidades Indexadas (URUIURUI)'), ('UYU', 'Uruguayan peso'), ('UZS', 'Uzbekistan Sum'), ('VUV', 'Vatu'), ('CHE', 'WIR Euro'), ('CHW', 'WIR Franc'), ('KRW', 'Won'), ('YER', 'Yemeni Rial'), ('JPY', 'Yen'), ('CNY', 'Yuan Renminbi'), ('ZMK', 'Zambian Kwacha'), ('ZMW', 'Zambian Kwacha'), ('ZWD', 'Zimbabwe Dollar A/06'), ('ZWN', 'Zimbabwe dollar A/08'), ('ZWL', 'Zimbabwe dollar A/09'), ('PLN', 'Zloty')], default='CAD', editable=False, max_length=3)),
                ('invoice_labour_amount', djmoney.models.fields.MoneyField(blank=True, decimal_places=2, default=Decimal('0'), default_currency='CAD', help_text='The amount charged for labour by the associate for this job.', max_digits=10, verbose_name='Invoice Labour Costs Amount')),
                ('invoice_material_amount_currency', djmoney.models.fields.CurrencyField(choices=[('XUA', 'ADB Unit of Account'), ('AFN', 'Afghani'), ('DZD', 'Algerian Dinar'), ('ARS', 'Argentine Peso'), ('AMD', 'Armenian Dram'), ('AWG', 'Aruban Guilder'), ('AUD', 'Australian Dollar'), ('AZN', 'Azerbaijanian Manat'), ('BSD', 'Bahamian Dollar'), ('BHD', 'Bahraini Dinar'), ('THB', 'Baht'), ('PAB', 'Balboa'), ('BBD', 'Barbados Dollar'), ('BYN', 'Belarussian Ruble'), ('BYR', 'Belarussian Ruble'), ('BZD', 'Belize Dollar'), ('BMD', 'Bermudian Dollar (customarily known as Bermuda Dollar)'), ('BTN', 'Bhutanese ngultrum'), ('VEF', 'Bolivar Fuerte'), ('BOB', 'Boliviano'), ('XBA', 'Bond Markets Units European Composite Unit (EURCO)'), ('BRL', 'Brazilian Real'), ('BND', 'Brunei Dollar'), ('BGN', 'Bulgarian Lev'), ('BIF', 'Burundi Franc'), ('XOF', 'CFA Franc BCEAO'), ('XAF', 'CFA franc BEAC'), ('XPF', 'CFP Franc'), ('CAD', 'Canadian Dollar'), ('CVE', 'Cape Verde Escudo'), ('KYD', 'Cayman Islands Dollar'), ('CLP', 'Chilean peso'), ('XTS', 'Codes specifically reserved for testing purposes'), ('COP', 'Colombian peso'), ('KMF', 'Comoro Franc'), ('CDF', 'Congolese franc'), ('BAM', 'Convertible Marks'), ('NIO', 'Cordoba Oro'), ('CRC', 'Costa Rican Colon'), ('HRK', 'Croatian Kuna'), ('CUP', 'Cuban Peso'), ('CUC', 'Cuban convertible peso'), ('CZK', 'Czech Koruna'), ('GMD', 'Dalasi'), ('DKK', 'Danish Krone'), ('MKD', 'Denar'), ('DJF', 'Djibouti Franc'), ('STD', 'Dobra'), ('DOP', 'Dominican Peso'), ('VND', 'Dong'), ('XCD', 'East Caribbean Dollar'), ('EGP', 'Egyptian Pound'), ('SVC', 'El Salvador Colon'), ('ETB', 'Ethiopian Birr'), ('EUR', 'Euro'), ('XBB', 'European Monetary Unit (E.M.U.-6)'), ('XBD', 'European Unit of Account 17(E.U.A.-17)'), ('XBC', 'European Unit of Account 9(E.U.A.-9)'), ('FKP', 'Falkland Islands Pound'), ('FJD', 'Fiji Dollar'), ('HUF', 'Forint'), ('GHS', 'Ghana Cedi'), ('GIP', 'Gibraltar Pound'), ('XAU', 'Gold'), ('XFO', 'Gold-Franc'), ('PYG', 'Guarani'), ('GNF', 'Guinea Franc'), ('GYD', 'Guyana Dollar'), ('HTG', 'Haitian gourde'), ('HKD', 'Hong Kong Dollar'), ('UAH', 'Hryvnia'), ('ISK', 'Iceland Krona'), ('INR', 'Indian Rupee'), ('IRR', 'Iranian Rial'), ('IQD', 'Iraqi Dinar'), ('IMP', 'Isle of Man Pound'), ('JMD', 'Jamaican Dollar'), ('JOD', 'Jordanian Dinar'), ('KES', 'Kenyan Shilling'), ('PGK', 'Kina'), ('LAK', 'Kip'), ('KWD', 'Kuwaiti Dinar'), ('AOA', 'Kwanza'), ('MMK', 'Kyat'), ('GEL', 'Lari'), ('LVL', 'Latvian Lats'), ('LBP', 'Lebanese Pound'), ('ALL', 'Lek'), ('HNL', 'Lempira'), ('SLL', 'Leone'), ('LSL', 'Lesotho loti'), ('LRD', 'Liberian Dollar'), ('LYD', 'Libyan Dinar'), ('SZL', 'Lilangeni'), ('LTL', 'Lithuanian Litas'), ('MGA', 'Malagasy Ariary'), ('MWK', 'Malawian Kwacha'), ('MYR', 'Malaysian Ringgit'), ('TMM', 'Manat'), ('MUR', 'Mauritius Rupee'), ('MZN', 'Metical'), ('MXV', 'Mexican Unidad de Inversion (UDI)'), ('MXN', 'Mexican peso'), ('MDL', 'Moldovan Leu'), ('MAD', 'Moroccan Dirham'), ('BOV', 'Mvdol'), ('NGN', 'Naira'), ('ERN', 'Nakfa'), ('NAD', 'Namibian Dollar'), ('NPR', 'Nepalese Rupee'), ('ANG', 'Netherlands Antillian Guilder'), ('ILS', 'New Israeli Sheqel'), ('RON', 'New Leu'), ('TWD', 'New Taiwan Dollar'), ('NZD', 'New Zealand Dollar'), ('KPW', 'North Korean Won'), ('NOK', 'Norwegian Krone'), ('PEN', 'Nuevo Sol'), ('MRO', 'Ouguiya'), ('TOP', 'Paanga'), ('PKR', 'Pakistan Rupee'), ('XPD', 'Palladium'), ('MOP', 'Pataca'), ('PHP', 'Philippine Peso'), ('XPT', 'Platinum'), ('GBP', 'Pound Sterling'), ('BWP', 'Pula'), ('QAR', 'Qatari Rial'), ('GTQ', 'Quetzal'), ('ZAR', 'Rand'), ('OMR', 'Rial Omani'), ('KHR', 'Riel'), ('MVR', 'Rufiyaa'), ('IDR', 'Rupiah'), ('RUB', 'Russian Ruble'), ('RWF', 'Rwanda Franc'), ('XDR', 'SDR'), ('SHP', 'Saint Helena Pound'), ('SAR', 'Saudi Riyal'), ('RSD', 'Serbian Dinar'), ('SCR', 'Seychelles Rupee'), ('XAG', 'Silver'), ('SGD', 'Singapore Dollar'), ('SBD', 'Solomon Islands Dollar'), ('KGS', 'Som'), ('SOS', 'Somali Shilling'), ('TJS', 'Somoni'), ('SSP', 'South Sudanese Pound'), ('LKR', 'Sri Lanka Rupee'), ('XSU', 'Sucre'), ('SDG', 'Sudanese Pound'), ('SRD', 'Surinam Dollar'), ('SEK', 'Swedish Krona'), ('CHF', 'Swiss Franc'), ('SYP', 'Syrian Pound'), ('BDT', 'Taka'), ('WST', 'Tala'), ('TZS', 'Tanzanian Shilling'), ('KZT', 'Tenge'), ('XXX', 'The codes assigned for transactions where no currency is involved'), ('TTD', 'Trinidad and Tobago Dollar'), ('MNT', 'Tugrik'), ('TND', 'Tunisian Dinar'), ('TRY', 'Turkish Lira'), ('TMT', 'Turkmenistan New Manat'), ('TVD', 'Tuvalu dollar'), ('AED', 'UAE Dirham'), ('XFU', 'UIC-Franc'), ('USD', 'US Dollar'), ('USN', 'US Dollar (Next day)'), ('UGX', 'Uganda Shilling'), ('CLF', 'Unidad de Fomento'), ('COU', 'Unidad de Valor Real'), ('UYI', 'Uruguay Peso en Unidades Indexadas (URUIURUI)'), ('UYU', 'Uruguayan peso'), ('UZS', 'Uzbekistan Sum'), ('VUV', 'Vatu'), ('CHE', 'WIR Euro'), ('CHW', 'WIR Franc'), ('KRW', 'Won'), ('YER', 'Yemeni Rial'), ('JPY', 'Yen'), ('CNY', 'Yuan Renminbi'), ('ZMK', 'Zambian Kwacha'), ('ZMW', 'Zambian Kwacha'), ('ZWD', 'Zimbabwe Dollar A/06'), ('ZWN', 'Zimbabwe dollar A/08'), ('ZWL', 'Zimbabwe dollar A/09'), ('PLN', 'Zloty')], default='CAD', editable=False, max_length=3)),
                ('invoice_material_amount', djmoney.models.fields.MoneyField(blank=True, decimal_places=2, default=Decimal('0'), default_currency='CAD', help_text='The amount charged for material costs by the associate for this job.', max_digits=10, verbose_name='Invoice Material Costs Amount')),
                ('invoice_tax_amount_currency', djmoney.models.fields.CurrencyField(choices=[('XUA', 'ADB Unit of Account'), ('AFN', 'Afghani'), ('DZD', 'Algerian Dinar'), ('ARS', 'Argentine Peso'), ('AMD', 'Armenian Dram'), ('AWG', 'Aruban Guilder'), ('AUD', 'Australian Dollar'), ('AZN', 'Azerbaijanian Manat'), ('BSD', 'Bahamian Dollar'), ('BHD', 'Bahraini Dinar'), ('THB', 'Baht'), ('PAB', 'Balboa'), ('BBD', 'Barbados Dollar'), ('BYN', 'Belarussian Ruble'), ('BYR', 'Belarussian Ruble'), ('BZD', 'Belize Dollar'), ('BMD', 'Bermudian Dollar (customarily known as Bermuda Dollar)'), ('BTN', 'Bhutanese ngultrum'), ('VEF', 'Bolivar Fuerte'), ('BOB', 'Boliviano'), ('XBA', 'Bond Markets Units European Composite Unit (EURCO)'), ('BRL', 'Brazilian Real'), ('BND', 'Brunei Dollar'), ('BGN', 'Bulgarian Lev'), ('BIF', 'Burundi Franc'), ('XOF', 'CFA Franc BCEAO'), ('XAF', 'CFA franc BEAC'), ('XPF', 'CFP Franc'), ('CAD', 'Canadian Dollar'), ('CVE', 'Cape Verde Escudo'), ('KYD', 'Cayman Islands Dollar'), ('CLP', 'Chilean peso'), ('XTS', 'Codes specifically reserved for testing purposes'), ('COP', 'Colombian peso'), ('KMF', 'Comoro Franc'), ('CDF', 'Congolese franc'), ('BAM', 'Convertible Marks'), ('NIO', 'Cordoba Oro'), ('CRC', 'Costa Rican Colon'), ('HRK', 'Croatian Kuna'), ('CUP', 'Cuban Peso'), ('CUC', 'Cuban convertible peso'), ('CZK', 'Czech Koruna'), ('GMD', 'Dalasi'), ('DKK', 'Danish Krone'), ('MKD', 'Denar'), ('DJF', 'Djibouti Franc'), ('STD', 'Dobra'), ('DOP', 'Dominican Peso'), ('VND', 'Dong'), ('XCD', 'East Caribbean Dollar'), ('EGP', 'Egyptian Pound'), ('SVC', 'El Salvador Colon'), ('ETB', 'Ethiopian Birr'), ('EUR', 'Euro'), ('XBB', 'European Monetary Unit (E.M.U.-6)'), ('XBD', 'European Unit of Account 17(E.U.A.-17)'), ('XBC', 'European Unit of Account 9(E.U.A.-9)'), ('FKP', 'Falkland Islands Pound'), ('FJD', 'Fiji Dollar'), ('HUF', 'Forint'), ('GHS', 'Ghana Cedi'), ('GIP', 'Gibraltar Pound'), ('XAU', 'Gold'), ('XFO', 'Gold-Franc'), ('PYG', 'Guarani'), ('GNF', 'Guinea Franc'), ('GYD', 'Guyana Dollar'), ('HTG', 'Haitian gourde'), ('HKD', 'Hong Kong Dollar'), ('UAH', 'Hryvnia'), ('ISK', 'Iceland Krona'), ('INR', 'Indian Rupee'), ('IRR', 'Iranian Rial'), ('IQD', 'Iraqi Dinar'), ('IMP', 'Isle of Man Pound'), ('JMD', 'Jamaican Dollar'), ('JOD', 'Jordanian Dinar'), ('KES', 'Kenyan Shilling'), ('PGK', 'Kina'), ('LAK', 'Kip'), ('KWD', 'Kuwaiti Dinar'), ('AOA', 'Kwanza'), ('MMK', 'Kyat'), ('GEL', 'Lari'), ('LVL', 'Latvian Lats'), ('LBP', 'Lebanese Pound'), ('ALL', 'Lek'), ('HNL', 'Lempira'), ('SLL', 'Leone'), ('LSL', 'Lesotho loti'), ('LRD', 'Liberian Dollar'), ('LYD', 'Libyan Dinar'), ('SZL', 'Lilangeni'), ('LTL', 'Lithuanian Litas'), ('MGA', 'Malagasy Ariary'), ('MWK', 'Malawian Kwacha'), ('MYR', 'Malaysian Ringgit'), ('TMM', 'Manat'), ('MUR', 'Mauritius Rupee'), ('MZN', 'Metical'), ('MXV', 'Mexican Unidad de Inversion (UDI)'), ('MXN', 'Mexican peso'), ('MDL', 'Moldovan Leu'), ('MAD', 'Moroccan Dirham'), ('BOV', 'Mvdol'), ('NGN', 'Naira'), ('ERN', 'Nakfa'), ('NAD', 'Namibian Dollar'), ('NPR', 'Nepalese Rupee'), ('ANG', 'Netherlands Antillian Guilder'), ('ILS', 'New Israeli Sheqel'), ('RON', 'New Leu'), ('TWD', 'New Taiwan Dollar'), ('NZD', 'New Zealand Dollar'), ('KPW', 'North Korean Won'), ('NOK', 'Norwegian Krone'), ('PEN', 'Nuevo Sol'), ('MRO', 'Ouguiya'), ('TOP', 'Paanga'), ('PKR', 'Pakistan Rupee'), ('XPD', 'Palladium'), ('MOP', 'Pataca'), ('PHP', 'Philippine Peso'), ('XPT', 'Platinum'), ('GBP', 'Pound Sterling'), ('BWP', 'Pula'), ('QAR', 'Qatari Rial'), ('GTQ', 'Quetzal'), ('ZAR', 'Rand'), ('OMR', 'Rial Omani'), ('KHR', 'Riel'), ('MVR', 'Rufiyaa'), ('IDR', 'Rupiah'), ('RUB', 'Russian Ruble'), ('RWF', 'Rwanda Franc'), ('XDR', 'SDR'), ('SHP', 'Saint Helena Pound'), ('SAR', 'Saudi Riyal'), ('RSD', 'Serbian Dinar'), ('SCR', 'Seychelles Rupee'), ('XAG', 'Silver'), ('SGD', 'Singapore Dollar'), ('SBD', 'Solomon Islands Dollar'), ('KGS', 'Som'), ('SOS', 'Somali Shilling'), ('TJS', 'Somoni'), ('SSP', 'South Sudanese Pound'), ('LKR', 'Sri Lanka Rupee'), ('XSU', 'Sucre'), ('SDG', 'Sudanese Pound'), ('SRD', 'Surinam Dollar'), ('SEK', 'Swedish Krona'), ('CHF', 'Swiss Franc'), ('SYP', 'Syrian Pound'), ('BDT', 'Taka'), ('WST', 'Tala'), ('TZS', 'Tanzanian Shilling'), ('KZT', 'Tenge'), ('XXX', 'The codes assigned for transactions where no currency is involved'), ('TTD', 'Trinidad and Tobago Dollar'), ('MNT', 'Tugrik'), ('TND', 'Tunisian Dinar'), ('TRY', 'Turkish Lira'), ('TMT', 'Turkmenistan New Manat'), ('TVD', 'Tuvalu dollar'), ('AED', 'UAE Dirham'), ('XFU', 'UIC-Franc'), ('USD', 'US Dollar'), ('USN', 'US Dollar (Next day)'), ('UGX', 'Uganda Shilling'), ('CLF', 'Unidad de Fomento'), ('COU', 'Unidad de Valor Real'), ('UYI', 'Uruguay Peso en Unidades Indexadas (URUIURUI)'), ('UYU', 'Uruguayan peso'), ('UZS', 'Uzbekistan Sum'), ('VUV', 'Vatu'), ('CHE', 'WIR Euro'), ('CHW', 'WIR Franc'), ('KRW', 'Won'), ('YER', 'Yemeni Rial'), ('JPY', 'Yen'), ('CNY', 'Yuan Renminbi'), ('ZMK', 'Zambian Kwacha'), ('ZMW', 'Zambian Kwacha'), ('ZWD', 'Zimbabwe Dollar A/06'), ('ZWN', 'Zimbabwe dollar A/08'), ('ZWL', 'Zimbabwe dollar A/09'), ('PLN', 'Zloty')], default='CAD', editable=False, max_length=3)),
                ('invoice_tax_amount', djmoney.models.fields.MoneyField(blank=True, decimal_places=2, default=Decimal('0'), default_currency='CAD', help_text='The amount charged for taxes by the associate for this job.', max_digits=10, verbose_name='Invoice Tax Amount')),
                ('invoice_total_amount_currency', djmoney.models.fields.CurrencyField(choices=[('XUA', 'ADB Unit of Account'), ('AFN', 'Afghani'), ('DZD', 'Algerian Dinar'), ('ARS', 'Argentine Peso'), ('AMD', 'Armenian Dram'), ('AWG', 'Aruban Guilder'), ('AUD', 'Australian Dollar'), ('AZN', 'Azerbaijanian Manat'), ('BSD', 'Bahamian Dollar'), ('BHD', 'Bahraini Dinar'), ('THB', 'Baht'), ('PAB', 'Balboa'), ('BBD', 'Barbados Dollar'), ('BYN', 'Belarussian Ruble'), ('BYR', 'Belarussian Ruble'), ('BZD', 'Belize Dollar'), ('BMD', 'Bermudian Dollar (customarily known as Bermuda Dollar)'), ('BTN', 'Bhutanese ngultrum'), ('VEF', 'Bolivar Fuerte'), ('BOB', 'Boliviano'), ('XBA', 'Bond Markets Units European Composite Unit (EURCO)'), ('BRL', 'Brazilian Real'), ('BND', 'Brunei Dollar'), ('BGN', 'Bulgarian Lev'), ('BIF', 'Burundi Franc'), ('XOF', 'CFA Franc BCEAO'), ('XAF', 'CFA franc BEAC'), ('XPF', 'CFP Franc'), ('CAD', 'Canadian Dollar'), ('CVE', 'Cape Verde Escudo'), ('KYD', 'Cayman Islands Dollar'), ('CLP', 'Chilean peso'), ('XTS', 'Codes specifically reserved for testing purposes'), ('COP', 'Colombian peso'), ('KMF', 'Comoro Franc'), ('CDF', 'Congolese franc'), ('BAM', 'Convertible Marks'), ('NIO', 'Cordoba Oro'), ('CRC', 'Costa Rican Colon'), ('HRK', 'Croatian Kuna'), ('CUP', 'Cuban Peso'), ('CUC', 'Cuban convertible peso'), ('CZK', 'Czech Koruna'), ('GMD', 'Dalasi'), ('DKK', 'Danish Krone'), ('MKD', 'Denar'), ('DJF', 'Djibouti Franc'), ('STD', 'Dobra'), ('DOP', 'Dominican Peso'), ('VND', 'Dong'), ('XCD', 'East Caribbean Dollar'), ('EGP', 'Egyptian Pound'), ('SVC', 'El Salvador Colon'), ('ETB', 'Ethiopian Birr'), ('EUR', 'Euro'), ('XBB', 'European Monetary Unit (E.M.U.-6)'), ('XBD', 'European Unit of Account 17(E.U.A.-17)'), ('XBC', 'European Unit of Account 9(E.U.A.-9)'), ('FKP', 'Falkland Islands Pound'), ('FJD', 'Fiji Dollar'), ('HUF', 'Forint'), ('GHS', 'Ghana Cedi'), ('GIP', 'Gibraltar Pound'), ('XAU', 'Gold'), ('XFO', 'Gold-Franc'), ('PYG', 'Guarani'), ('GNF', 'Guinea Franc'), ('GYD', 'Guyana Dollar'), ('HTG', 'Haitian gourde'), ('HKD', 'Hong Kong Dollar'), ('UAH', 'Hryvnia'), ('ISK', 'Iceland Krona'), ('INR', 'Indian Rupee'), ('IRR', 'Iranian Rial'), ('IQD', 'Iraqi Dinar'), ('IMP', 'Isle of Man Pound'), ('JMD', 'Jamaican Dollar'), ('JOD', 'Jordanian Dinar'), ('KES', 'Kenyan Shilling'), ('PGK', 'Kina'), ('LAK', 'Kip'), ('KWD', 'Kuwaiti Dinar'), ('AOA', 'Kwanza'), ('MMK', 'Kyat'), ('GEL', 'Lari'), ('LVL', 'Latvian Lats'), ('LBP', 'Lebanese Pound'), ('ALL', 'Lek'), ('HNL', 'Lempira'), ('SLL', 'Leone'), ('LSL', 'Lesotho loti'), ('LRD', 'Liberian Dollar'), ('LYD', 'Libyan Dinar'), ('SZL', 'Lilangeni'), ('LTL', 'Lithuanian Litas'), ('MGA', 'Malagasy Ariary'), ('MWK', 'Malawian Kwacha'), ('MYR', 'Malaysian Ringgit'), ('TMM', 'Manat'), ('MUR', 'Mauritius Rupee'), ('MZN', 'Metical'), ('MXV', 'Mexican Unidad de Inversion (UDI)'), ('MXN', 'Mexican peso'), ('MDL', 'Moldovan Leu'), ('MAD', 'Moroccan Dirham'), ('BOV', 'Mvdol'), ('NGN', 'Naira'), ('ERN', 'Nakfa'), ('NAD', 'Namibian Dollar'), ('NPR', 'Nepalese Rupee'), ('ANG', 'Netherlands Antillian Guilder'), ('ILS', 'New Israeli Sheqel'), ('RON', 'New Leu'), ('TWD', 'New Taiwan Dollar'), ('NZD', 'New Zealand Dollar'), ('KPW', 'North Korean Won'), ('NOK', 'Norwegian Krone'), ('PEN', 'Nuevo Sol'), ('MRO', 'Ouguiya'), ('TOP', 'Paanga'), ('PKR', 'Pakistan Rupee'), ('XPD', 'Palladium'), ('MOP', 'Pataca'), ('PHP', 'Philippine Peso'), ('XPT', 'Platinum'), ('GBP', 'Pound Sterling'), ('BWP', 'Pula'), ('QAR', 'Qatari Rial'), ('GTQ', 'Quetzal'), ('ZAR', 'Rand'), ('OMR', 'Rial Omani'), ('KHR', 'Riel'), ('MVR', 'Rufiyaa'), ('IDR', 'Rupiah'), ('RUB', 'Russian Ruble'), ('RWF', 'Rwanda Franc'), ('XDR', 'SDR'), ('SHP', 'Saint Helena Pound'), ('SAR', 'Saudi Riyal'), ('RSD', 'Serbian Dinar'), ('SCR', 'Seychelles Rupee'), ('XAG', 'Silver'), ('SGD', 'Singapore Dollar'), ('SBD', 'Solomon Islands Dollar'), ('KGS', 'Som'), ('SOS', 'Somali Shilling'), ('TJS', 'Somoni'), ('SSP', 'South Sudanese Pound'), ('LKR', 'Sri Lanka Rupee'), ('XSU', 'Sucre'), ('SDG', 'Sudanese Pound'), ('SRD', 'Surinam Dollar'), ('SEK', 'Swedish Krona'), ('CHF', 'Swiss Franc'), ('SYP', 'Syrian Pound'), ('BDT', 'Taka'), ('WST', 'Tala'), ('TZS', 'Tanzanian Shilling'), ('KZT', 'Tenge'), ('XXX', 'The codes assigned for transactions where no currency is involved'), ('TTD', 'Trinidad and Tobago Dollar'), ('MNT', 'Tugrik'), ('TND', 'Tunisian Dinar'), ('TRY', 'Turkish Lira'), ('TMT', 'Turkmenistan New Manat'), ('TVD', 'Tuvalu dollar'), ('AED', 'UAE Dirham'), ('XFU', 'UIC-Franc'), ('USD', 'US Dollar'), ('USN', 'US Dollar (Next day)'), ('UGX', 'Uganda Shilling'), ('CLF', 'Unidad de Fomento'), ('COU', 'Unidad de Valor Real'), ('UYI', 'Uruguay Peso en Unidades Indexadas (URUIURUI)'), ('UYU', 'Uruguayan peso'), ('UZS', 'Uzbekistan Sum'), ('VUV', 'Vatu'), ('CHE', 'WIR Euro'), ('CHW', 'WIR Franc'), ('KRW', 'Won'), ('YER', 'Yemeni Rial'), ('JPY', 'Yen'), ('CNY', 'Yuan Renminbi'), ('ZMK', 'Zambian Kwacha'), ('ZMW', 'Zambian Kwacha'), ('ZWD', 'Zimbabwe Dollar A/06'), ('ZWN', 'Zimbabwe dollar A/08'), ('ZWL', 'Zimbabwe dollar A/09'), ('PLN', 'Zloty')], default='CAD', editable=False, max_length=3)),
                ('invoice_total_amount', djmoney.models.fields.MoneyField(blank=True, decimal_places=2, default=Decimal('0'), default_currency='CAD', help_text='The total amount charged by the associate for this job.', max_digits=10, verbose_name='Invoice Total Amount')),
                ('invoice_service_fee_amount_currency', djmoney.models.fields.CurrencyField(choices=[('XUA', 'ADB Unit of Account'), ('AFN', 'Afghani'), ('DZD', 'Algerian Dinar'), ('ARS', 'Argentine Peso'), ('AMD', 'Armenian Dram'), ('AWG', 'Aruban Guilder'), ('AUD', 'Australian Dollar'), ('AZN', 'Azerbaijanian Manat'), ('BSD', 'Bahamian Dollar'), ('BHD', 'Bahraini Dinar'), ('THB', 'Baht'), ('PAB', 'Balboa'), ('BBD', 'Barbados Dollar'), ('BYN', 'Belarussian Ruble'), ('BYR', 'Belarussian Ruble'), ('BZD', 'Belize Dollar'), ('BMD', 'Bermudian Dollar (customarily known as Bermuda Dollar)'), ('BTN', 'Bhutanese ngultrum'), ('VEF', 'Bolivar Fuerte'), ('BOB', 'Boliviano'), ('XBA', 'Bond Markets Units European Composite Unit (EURCO)'), ('BRL', 'Brazilian Real'), ('BND', 'Brunei Dollar'), ('BGN', 'Bulgarian Lev'), ('BIF', 'Burundi Franc'), ('XOF', 'CFA Franc BCEAO'), ('XAF', 'CFA franc BEAC'), ('XPF', 'CFP Franc'), ('CAD', 'Canadian Dollar'), ('CVE', 'Cape Verde Escudo'), ('KYD', 'Cayman Islands Dollar'), ('CLP', 'Chilean peso'), ('XTS', 'Codes specifically reserved for testing purposes'), ('COP', 'Colombian peso'), ('KMF', 'Comoro Franc'), ('CDF', 'Congolese franc'), ('BAM', 'Convertible Marks'), ('NIO', 'Cordoba Oro'), ('CRC', 'Costa Rican Colon'), ('HRK', 'Croatian Kuna'), ('CUP', 'Cuban Peso'), ('CUC', 'Cuban convertible peso'), ('CZK', 'Czech Koruna'), ('GMD', 'Dalasi'), ('DKK', 'Danish Krone'), ('MKD', 'Denar'), ('DJF', 'Djibouti Franc'), ('STD', 'Dobra'), ('DOP', 'Dominican Peso'), ('VND', 'Dong'), ('XCD', 'East Caribbean Dollar'), ('EGP', 'Egyptian Pound'), ('SVC', 'El Salvador Colon'), ('ETB', 'Ethiopian Birr'), ('EUR', 'Euro'), ('XBB', 'European Monetary Unit (E.M.U.-6)'), ('XBD', 'European Unit of Account 17(E.U.A.-17)'), ('XBC', 'European Unit of Account 9(E.U.A.-9)'), ('FKP', 'Falkland Islands Pound'), ('FJD', 'Fiji Dollar'), ('HUF', 'Forint'), ('GHS', 'Ghana Cedi'), ('GIP', 'Gibraltar Pound'), ('XAU', 'Gold'), ('XFO', 'Gold-Franc'), ('PYG', 'Guarani'), ('GNF', 'Guinea Franc'), ('GYD', 'Guyana Dollar'), ('HTG', 'Haitian gourde'), ('HKD', 'Hong Kong Dollar'), ('UAH', 'Hryvnia'), ('ISK', 'Iceland Krona'), ('INR', 'Indian Rupee'), ('IRR', 'Iranian Rial'), ('IQD', 'Iraqi Dinar'), ('IMP', 'Isle of Man Pound'), ('JMD', 'Jamaican Dollar'), ('JOD', 'Jordanian Dinar'), ('KES', 'Kenyan Shilling'), ('PGK', 'Kina'), ('LAK', 'Kip'), ('KWD', 'Kuwaiti Dinar'), ('AOA', 'Kwanza'), ('MMK', 'Kyat'), ('GEL', 'Lari'), ('LVL', 'Latvian Lats'), ('LBP', 'Lebanese Pound'), ('ALL', 'Lek'), ('HNL', 'Lempira'), ('SLL', 'Leone'), ('LSL', 'Lesotho loti'), ('LRD', 'Liberian Dollar'), ('LYD', 'Libyan Dinar'), ('SZL', 'Lilangeni'), ('LTL', 'Lithuanian Litas'), ('MGA', 'Malagasy Ariary'), ('MWK', 'Malawian Kwacha'), ('MYR', 'Malaysian Ringgit'), ('TMM', 'Manat'), ('MUR', 'Mauritius Rupee'), ('MZN', 'Metical'), ('MXV', 'Mexican Unidad de Inversion (UDI)'), ('MXN', 'Mexican peso'), ('MDL', 'Moldovan Leu'), ('MAD', 'Moroccan Dirham'), ('BOV', 'Mvdol'), ('NGN', 'Naira'), ('ERN', 'Nakfa'), ('NAD', 'Namibian Dollar'), ('NPR', 'Nepalese Rupee'), ('ANG', 'Netherlands Antillian Guilder'), ('ILS', 'New Israeli Sheqel'), ('RON', 'New Leu'), ('TWD', 'New Taiwan Dollar'), ('NZD', 'New Zealand Dollar'), ('KPW', 'North Korean Won'), ('NOK', 'Norwegian Krone'), ('PEN', 'Nuevo Sol'), ('MRO', 'Ouguiya'), ('TOP', 'Paanga'), ('PKR', 'Pakistan Rupee'), ('XPD', 'Palladium'), ('MOP', 'Pataca'), ('PHP', 'Philippine Peso'), ('XPT', 'Platinum'), ('GBP', 'Pound Sterling'), ('BWP', 'Pula'), ('QAR', 'Qatari Rial'), ('GTQ', 'Quetzal'), ('ZAR', 'Rand'), ('OMR', 'Rial Omani'), ('KHR', 'Riel'), ('MVR', 'Rufiyaa'), ('IDR', 'Rupiah'), ('RUB', 'Russian Ruble'), ('RWF', 'Rwanda Franc'), ('XDR', 'SDR'), ('SHP', 'Saint Helena Pound'), ('SAR', 'Saudi Riyal'), ('RSD', 'Serbian Dinar'), ('SCR', 'Seychelles Rupee'), ('XAG', 'Silver'), ('SGD', 'Singapore Dollar'), ('SBD', 'Solomon Islands Dollar'), ('KGS', 'Som'), ('SOS', 'Somali Shilling'), ('TJS', 'Somoni'), ('SSP', 'South Sudanese Pound'), ('LKR', 'Sri Lanka Rupee'), ('XSU', 'Sucre'), ('SDG', 'Sudanese Pound'), ('SRD', 'Surinam Dollar'), ('SEK', 'Swedish Krona'), ('CHF', 'Swiss Franc'), ('SYP', 'Syrian Pound'), ('BDT', 'Taka'), ('WST', 'Tala'), ('TZS', 'Tanzanian Shilling'), ('KZT', 'Tenge'), ('XXX', 'The codes assigned for transactions where no currency is involved'), ('TTD', 'Trinidad and Tobago Dollar'), ('MNT', 'Tugrik'), ('TND', 'Tunisian Dinar'), ('TRY', 'Turkish Lira'), ('TMT', 'Turkmenistan New Manat'), ('TVD', 'Tuvalu dollar'), ('AED', 'UAE Dirham'), ('XFU', 'UIC-Franc'), ('USD', 'US Dollar'), ('USN', 'US Dollar (Next day)'), ('UGX', 'Uganda Shilling'), ('CLF', 'Unidad de Fomento'), ('COU', 'Unidad de Valor Real'), ('UYI', 'Uruguay Peso en Unidades Indexadas (URUIURUI)'), ('UYU', 'Uruguayan peso'), ('UZS', 'Uzbekistan Sum'), ('VUV', 'Vatu'), ('CHE', 'WIR Euro'), ('CHW', 'WIR Franc'), ('KRW', 'Won'), ('YER', 'Yemeni Rial'), ('JPY', 'Yen'), ('CNY', 'Yuan Renminbi'), ('ZMK', 'Zambian Kwacha'), ('ZMW', 'Zambian Kwacha'), ('ZWD', 'Zimbabwe Dollar A/06'), ('ZWN', 'Zimbabwe dollar A/08'), ('ZWL', 'Zimbabwe dollar A/09'), ('PLN', 'Zloty')], default='CAD', editable=False, max_length=3)),
                ('invoice_service_fee_amount', djmoney.models.fields.MoneyField(blank=True, decimal_places=2, default=Decimal('0'), default_currency='CAD', help_text='The total amount charged by the associate for this job.', max_digits=10, verbose_name='Invoice Service Fee Amount')),
                ('invoice_service_fee_payment_date', models.DateField(blank=True, db_index=True, help_text='The date when the service fee was paid by the associate.', null=True, verbose_name='Invoice Service Fee Payment Date')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the creator.', null=True, verbose_name='Created from')),
                ('created_from_is_public', models.BooleanField(default=False, help_text='Is creator a public IP and is routable.', verbose_name='Is the IP ')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('last_modified_from', models.GenericIPAddressField(blank=True, help_text='The IP address of the modifier.', null=True, verbose_name='Last modified from')),
                ('last_modified_from_is_public', models.BooleanField(default=False, help_text='Is modifier a public IP and is routable.', verbose_name='Is the IP ')),
                ('activity_sheet', models.ManyToManyField(blank=True, help_text='The activity sheet items related to the associates who accepted or rejected this order.', related_name='tenant_foundation_workorder_activity_sheet_items_related', through='tenant_foundation.ActivitySheetItem', to='tenant_foundation.Associate')),
                ('associate', models.ForeignKey(blank=True, help_text='The associate of our order.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_workorder_associate_related', to='tenant_foundation.Associate')),
            ],
            options={
                'verbose_name': 'Work Order',
                'verbose_name_plural': 'Work Orders',
                'db_table': 'workery_work_orders',
                'permissions': (('can_get_orders', 'Can get work orders'), ('can_get_order', 'Can get work order'), ('can_post_order', 'Can create work order'), ('can_put_order', 'Can update work order'), ('can_delete_order', 'Can delete work order')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='WorkOrderComment',
            fields=[
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.work_order_comment.increment_order_comment_id_number, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('about', models.ForeignKey(help_text='The order whom this comment is about.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_workordercomment_about_related', to='tenant_foundation.WorkOrder')),
                ('comment', models.ForeignKey(help_text='The comment this item belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_workordercomment_comment_categories', to='tenant_foundation.Comment')),
            ],
            options={
                'verbose_name': 'Work Order Comment',
                'verbose_name_plural': 'Work Order Comments',
                'db_table': 'workery_work_order_comments',
                'ordering': ['-created_at'],
                'permissions': (('can_get_order_comments', 'Can get order comments'), ('can_get_order_comment', 'Can get order comment'), ('can_post_order_comment', 'Can create order comment'), ('can_put_order_comment', 'Can update order comment'), ('can_delete_order_comment', 'Can delete order comment')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='WorkOrderServiceFee',
            fields=[
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.work_order_service_fee.increment_order_service_fee_id_number, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='The official title of this service.', max_length=63, verbose_name='Title')),
                ('description', models.TextField(help_text='A short description of this service fee.', verbose_name='Description')),
                ('percentage', models.FloatField(blank=True, default=0, help_text='The percent to take from job orders', verbose_name='Percent')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this order.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_workorderservicefee_created_by_related', to=settings.AUTH_USER_MODEL)),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom last modified this order.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_workorderservicefee_last_modified_by_related', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Work Order Service Fee',
                'verbose_name_plural': 'Work Order Service Fees',
                'db_table': 'workery_work_order_service_fees',
                'ordering': ['percentage'],
                'permissions': (('can_get_order_service_fees', 'Can get work order service fees'), ('can_get_order_service_fee', 'Can get work order service fee'), ('can_post_order_service_fee', 'Can create work order service fee'), ('can_put_order_service_fee', 'Can update work order service fee'), ('can_delete_order_service_fee', 'Can delete work order service fee')),
                'default_permissions': (),
            },
        ),
        migrations.AddField(
            model_name='workorder',
            name='comments',
            field=models.ManyToManyField(blank=True, help_text='The comments belonging to this order made by other people.', related_name='tenant_foundation_workorder_order_comments_related', through='tenant_foundation.WorkOrderComment', to='tenant_foundation.Comment'),
        ),
        migrations.AddField(
            model_name='workorder',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='The user whom created this order.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_workorder_created_by_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='workorder',
            name='customer',
            field=models.ForeignKey(help_text='The customer of our order.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_workorder_customer_related', to='tenant_foundation.Customer'),
        ),
        migrations.AddField(
            model_name='workorder',
            name='invoice_service_fee',
            field=models.ForeignKey(blank=True, help_text='The service fee applied by the franchise on the total cost of this job order which will be paid by the associate member.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_workorder_service_fee_related', to='tenant_foundation.WorkOrderServiceFee'),
        ),
        migrations.AddField(
            model_name='workorder',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, help_text='The user whom last modified this order.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_workorder_last_modified_by_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='workorder',
            name='latest_pending_task',
            field=models.ForeignKey(blank=True, help_text='The latest pending task of our job order.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_workorder_latest_pending_task_related', to='tenant_foundation.TaskItem'),
        ),
        migrations.AddField(
            model_name='workorder',
            name='skill_sets',
            field=models.ManyToManyField(blank=True, help_text='The skill sets that belong to this order.', related_name='tenant_foundation_workorder_skill_sets_related', to='tenant_foundation.SkillSet'),
        ),
        migrations.AddField(
            model_name='workorder',
            name='tags',
            field=models.ManyToManyField(blank=True, help_text='The category tags that this order belongs to.', related_name='tenant_foundation_workorder_tags_related', to='tenant_foundation.Tag'),
        ),
        migrations.AddField(
            model_name='taskitem',
            name='job',
            field=models.ForeignKey(help_text='The job order that this task is referencing.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_taskitem_job_related', to='tenant_foundation.WorkOrder'),
        ),
        migrations.AddField(
            model_name='taskitem',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, help_text='The user whom last modified this order.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_taskitem_last_modified_by_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='staff',
            name='comments',
            field=models.ManyToManyField(blank=True, help_text='The comments belonging to this staff made by other people.', related_name='tenant_foundation_staff_staff_comments_related', through='tenant_foundation.StaffComment', to='tenant_foundation.Comment'),
        ),
        migrations.AddField(
            model_name='staff',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='The user whom created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_staff_created_by_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='staff',
            name='hours_available',
            field=models.ManyToManyField(blank=True, help_text='The hours during which this service or contact is available.', related_name='tenant_foundation_staff_contact_point_hours_available_related', to='tenant_foundation.OpeningHoursSpecification'),
        ),
        migrations.AddField(
            model_name='staff',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, help_text='The user whom modified this object last.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_staff_last_modified_by_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='staff',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_staff_abstract_thing_owner_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='staff',
            name='tags',
            field=models.ManyToManyField(blank=True, help_text='The tags associated with this staff member.', related_name='tenant_foundation_staff_tags_related', to='tenant_foundation.Tag'),
        ),
        migrations.AddField(
            model_name='resourcecategory',
            name='sorted_items',
            field=models.ManyToManyField(blank=True, help_text='The items belonging to this category sorted by "ordering_number" field.', through='tenant_foundation.ResourceItemSortOrder', to='tenant_foundation.ResourceItem'),
        ),
        migrations.AddField(
            model_name='partner',
            name='avatar_image',
            field=models.ForeignKey(blank=True, help_text='The avatar image of this partner.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_partner_avatar_image_related', to='tenant_foundation.PublicImageUpload'),
        ),
        migrations.AddField(
            model_name='partner',
            name='comments',
            field=models.ManyToManyField(blank=True, help_text='The comments belonging to this partner made by other people.', related_name='tenant_foundation_partner_partner_comments_related', through='tenant_foundation.PartnerComment', to='tenant_foundation.Comment'),
        ),
        migrations.AddField(
            model_name='partner',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='The user whom created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_partner_created_by_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='partner',
            name='hours_available',
            field=models.ManyToManyField(blank=True, help_text='The hours during which this service or contact is available.', related_name='tenant_foundation_partner_contact_point_hours_available_related', to='tenant_foundation.OpeningHoursSpecification'),
        ),
        migrations.AddField(
            model_name='partner',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, help_text='The user whom modified this object last.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_partner_last_modified_by_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='partner',
            name='organization',
            field=models.ForeignKey(blank=True, help_text='The organization that this partner that is affiliated with.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='tenant_foundation.Organization'),
        ),
        migrations.AddField(
            model_name='partner',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_partner_abstract_thing_owner_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='organization',
            name='avatar_image',
            field=models.ForeignKey(blank=True, help_text='The avatar image of this organization.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_organization_avatar_image_related', to='tenant_foundation.PublicImageUpload'),
        ),
        migrations.AddField(
            model_name='organization',
            name='hours_available',
            field=models.ManyToManyField(blank=True, help_text='The hours during which this service or contact is available.', related_name='tenant_foundation_organization_contact_point_hours_available_related', to='tenant_foundation.OpeningHoursSpecification'),
        ),
        migrations.AddField(
            model_name='organization',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_organization_abstract_thing_owner_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='organization',
            name='tags',
            field=models.ManyToManyField(blank=True, help_text='The tags associated with this organization.', related_name='tenant_foundation_organization_tags_related', to='tenant_foundation.Tag'),
        ),
        migrations.AddField(
            model_name='customer',
            name='avatar_image',
            field=models.ForeignKey(blank=True, help_text='The avatar image of this customer.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_customer_avatar_image_related', to='tenant_foundation.PublicImageUpload'),
        ),
        migrations.AddField(
            model_name='customer',
            name='comments',
            field=models.ManyToManyField(blank=True, help_text='The comments belonging to this customer made by other people.', related_name='tenant_foundation_customer_customer_comments_related', through='tenant_foundation.CustomerComment', to='tenant_foundation.Comment'),
        ),
        migrations.AddField(
            model_name='customer',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='The user whom created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_customer_created_by_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='customer',
            name='hours_available',
            field=models.ManyToManyField(blank=True, help_text='The hours during which this service or contact is available.', related_name='tenant_foundation_customer_contact_point_hours_available_related', to='tenant_foundation.OpeningHoursSpecification'),
        ),
        migrations.AddField(
            model_name='customer',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, help_text='The user whom modified this object last.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_customer_last_modified_by_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='customer',
            name='organization',
            field=models.ForeignKey(help_text='The organization that this customer is affiliated with.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='tenant_foundation.Organization'),
        ),
        migrations.AddField(
            model_name='customer',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_customer_abstract_thing_owner_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='customer',
            name='tags',
            field=models.ManyToManyField(blank=True, help_text='The tags associated with this customer.', related_name='tenant_foundation_customer_tags_related', to='tenant_foundation.Tag'),
        ),
        migrations.AddField(
            model_name='associatecomment',
            name='comment',
            field=models.ForeignKey(help_text='The comment this item belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_associatecomment_comment_categories', to='tenant_foundation.Comment'),
        ),
        migrations.AddField(
            model_name='associate',
            name='activity_sheet',
            field=models.ManyToManyField(blank=True, help_text='The activity sheet items of the orders the associate accepted or rejected.', related_name='tenant_foundation_associate_activity_sheet_items_related', through='tenant_foundation.ActivitySheetItem', to='tenant_foundation.WorkOrder'),
        ),
        migrations.AddField(
            model_name='associate',
            name='avatar_image',
            field=models.ForeignKey(blank=True, help_text='The avatar image of this associate.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_associate_avatar_image_related', to='tenant_foundation.PublicImageUpload'),
        ),
        migrations.AddField(
            model_name='associate',
            name='away_log',
            field=models.ForeignKey(blank=True, help_text='The object referencing our Assocaites away log (if they have one).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_associate_away_info_related', to='tenant_foundation.AwayLog'),
        ),
        migrations.AddField(
            model_name='associate',
            name='comments',
            field=models.ManyToManyField(blank=True, help_text='The comments belonging to this associate made by other people.', related_name='tenant_foundation_associate_associate_comments_related', through='tenant_foundation.AssociateComment', to='tenant_foundation.Comment'),
        ),
        migrations.AddField(
            model_name='associate',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='The user whom created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_associate_created_by_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='associate',
            name='hours_available',
            field=models.ManyToManyField(blank=True, help_text='The hours during which this service or contact is available.', related_name='tenant_foundation_associate_contact_point_hours_available_related', to='tenant_foundation.OpeningHoursSpecification'),
        ),
        migrations.AddField(
            model_name='associate',
            name='insurance_requirements',
            field=models.ManyToManyField(blank=True, help_text='The insurance requirements this associate meets.', related_name='tenant_foundation_associate_insurance_requirements_related', to='tenant_foundation.InsuranceRequirement'),
        ),
        migrations.AddField(
            model_name='associate',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, help_text='The user whom modified this object last.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_associate_last_modified_by_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='associate',
            name='organizations',
            field=models.ManyToManyField(blank=True, help_text='The organizations that this associate is affiliated with.', through='tenant_foundation.OrganizationAssociateAffiliation', to='tenant_foundation.Organization'),
        ),
        migrations.AddField(
            model_name='associate',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_associate_abstract_thing_owner_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='associate',
            name='skill_sets',
            field=models.ManyToManyField(blank=True, help_text='The skill sets this associate has.', related_name='tenant_foundation_associate_skill_sets_related', to='tenant_foundation.SkillSet'),
        ),
        migrations.AddField(
            model_name='associate',
            name='tags',
            field=models.ManyToManyField(blank=True, help_text='The tags associated with this associate.', related_name='tenant_foundation_associate_tags_related', to='tenant_foundation.Tag'),
        ),
        migrations.AddField(
            model_name='associate',
            name='vehicle_types',
            field=models.ManyToManyField(blank=True, help_text='The type of vehicles this associate has for servicing customers.', related_name='tenant_foundation_associate_vehicle_types_related', to='tenant_foundation.VehicleType'),
        ),
        migrations.AddField(
            model_name='activitysheetitem',
            name='associate',
            field=models.ForeignKey(help_text='The associate with this activity sheet item.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_activitysheetitem_associate_related', to='tenant_foundation.Associate'),
        ),
        migrations.AddField(
            model_name='activitysheetitem',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='The user whom created this activity sheet item.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_activitysheetitem_created_by_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='activitysheetitem',
            name='job',
            field=models.ForeignKey(help_text='The job associated with thie activity sheet item.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_activitysheetitem_work_order_related', to='tenant_foundation.WorkOrder'),
        ),
    ]
