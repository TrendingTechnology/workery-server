# Generated by Django 2.0.2 on 2018-03-05 01:51

from decimal import Decimal
from django.conf import settings
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import djmoney.models.fields
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('shared_foundation', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Associate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('name', models.CharField(blank=True, db_index=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
                ('area_served', models.CharField(blank=True, help_text='The geographic area where a service or offered item is provided.', max_length=127, null=True, verbose_name='Area Served')),
                ('available_language', models.CharField(blank=True, help_text='A language someone may use with or at the item, service or place. Please use one of the language codes from the <a href="https://tools.ietf.org/html/bcp47">IETF BCP 47 standard</a>.', max_length=127, null=True, verbose_name='Available Language')),
                ('contact_type', models.CharField(blank=True, help_text='A person or organization can have different contact points, for different purposes. For example, a sales contact point, a PR contact point and so on. This property is used to specify the kind of contact point.', max_length=127, null=True, verbose_name='Contact Type')),
                ('email', models.EmailField(blank=True, db_index=True, help_text='Email address.', max_length=254, null=True, validators=[django.core.validators.EmailValidator(message='Invalid email')], verbose_name='Email')),
                ('fax_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='The fax number.', max_length=128, verbose_name='Fax Number')),
                ('product_supported', models.CharField(blank=True, default='', help_text='The product or service this support contact point is related to (such as product support for a particular product line). This can be a specific product or product line (e.g. "iPhone") or a general category of products or services (e.g. "smartphones").', max_length=31, null=True, verbose_name='Product Supported')),
                ('telephone', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_index=True, default='', help_text='The telephone number.', max_length=128, verbose_name='Telephone')),
                ('telephone_extension', models.CharField(blank=True, default='', help_text='The telephone extension for the number.', max_length=31, null=True, verbose_name='Telephone Extension')),
                ('mobile', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_index=True, help_text='The mobile telephone number.', max_length=128, verbose_name='Mobile')),
                ('address_country', models.CharField(help_text='The country. For example, USA. You can also provide the two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements">ISO 3166-1 alpha-2</a> country code.', max_length=127, verbose_name='Address Country')),
                ('address_locality', models.CharField(help_text='The locality. For example, Mountain View.', max_length=127, verbose_name='Address Locaility')),
                ('address_region', models.CharField(help_text='The region. For example, CA.', max_length=127, verbose_name='Address Region')),
                ('post_office_box_number', models.CharField(blank=True, help_text='Apartment, suite, unit, building, floor, etc.', max_length=255, null=True, verbose_name='Post Office Box Number')),
                ('postal_code', models.CharField(blank=True, db_index=True, help_text='The postal code. For example, 94043.', max_length=127, null=True, verbose_name='Postal Code')),
                ('street_address', models.CharField(help_text='The street address. For example, 1600 Amphitheatre Pkwy.', max_length=255, verbose_name='Street Address')),
                ('street_address_extra', models.CharField(blank=True, help_text='Apartment, suite, unit, building, floor, etc.', max_length=255, null=True, verbose_name='Street Address (Extra Line)')),
                ('elevation', models.FloatField(blank=True, help_text='The elevation of a location (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', null=True, verbose_name='Elevation')),
                ('latitude', models.DecimalField(blank=True, decimal_places=3, help_text='The latitude of a location. For example 37.42242 (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', max_digits=8, null=True, verbose_name='Latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=3, help_text='The longitude of a location. For example -122.08585 (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', max_digits=8, null=True, verbose_name='Longitude')),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, db_index=True, help_text='A longitude and latitude coordinates of this location.', null=True, srid=4326, verbose_name='Location')),
                ('given_name', models.CharField(blank=True, db_index=True, help_text='The associates given name.', max_length=63, null=True, verbose_name='Given Name')),
                ('middle_name', models.CharField(blank=True, db_index=True, help_text='The associates last name.', max_length=63, null=True, verbose_name='Middle Name')),
                ('last_name', models.CharField(blank=True, db_index=True, help_text='The associates last name.', max_length=63, null=True, verbose_name='Last Name')),
                ('business', models.CharField(blank=True, help_text='The associates business status.', max_length=63, null=True, verbose_name='Business')),
                ('birthdate', models.DateTimeField(blank=True, help_text='The associates birthdate.', null=True, verbose_name='Birthdate')),
                ('join_date', models.DateTimeField(blank=True, help_text='The date the associate joined.', null=True, verbose_name='Join Date')),
                ('hourly_salary_desired', models.PositiveSmallIntegerField(blank=True, help_text='The hourly salary rate the associate', null=True, verbose_name='Hourly Salary Desired')),
                ('limit_special', models.CharField(blank=True, help_text='Any special limitations / handicaps this associate has.', max_length=255, null=True, verbose_name='Limit Special')),
                ('dues_pd', models.DateTimeField(blank=True, help_text='-', null=True, verbose_name='Deus PD')),
                ('ins_due', models.DateTimeField(blank=True, help_text='-', null=True, verbose_name='Ins Due')),
                ('police_check', models.DateTimeField(blank=True, help_text='The date the associate took a police check.', null=True, verbose_name='Police Check')),
                ('drivers_license_class', models.CharField(blank=True, help_text='The associates license class for driving.', max_length=7, null=True, verbose_name='Divers License Class')),
                ('has_car', models.BooleanField(default=False, help_text='Indicates whether associate has a car or not.', verbose_name='Has Car')),
                ('has_van', models.BooleanField(default=False, help_text='Indicates whether associate has a van or not.', verbose_name='Has Van')),
                ('has_truck', models.BooleanField(default=False, help_text='Indicates whether associate has a truck or not.', verbose_name='Has Truck')),
                ('is_full_time', models.BooleanField(default=False, help_text='Indicates whether associate is full time or not.', verbose_name='Is Full Time')),
                ('is_part_time', models.BooleanField(default=False, help_text='Indicates whether associate is part time or not.', verbose_name='Is Part Time')),
                ('is_contract_time', models.BooleanField(default=False, help_text='Indicates whether associate is contracted or not.', verbose_name='Is Contract Time')),
                ('is_small_job', models.BooleanField(default=False, help_text='Indicates whether associate is employed for small jobs or not.', verbose_name='Is Small Job')),
                ('how_hear', models.CharField(blank=True, help_text='How associate heared about this business.', max_length=2055, null=True, verbose_name='How hear')),
            ],
            options={
                'verbose_name': 'Associate',
                'verbose_name_plural': 'Associates',
                'db_table': 'o55_associates',
                'permissions': (('can_get_associates', 'Can get associates'), ('can_get_associate', 'Can get associate'), ('can_post_associate', 'Can create associate'), ('can_put_associate', 'Can update associate'), ('can_delete_associate', 'Can delete associate')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='AssociateAffiliation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_of', models.PositiveSmallIntegerField(choices=[(1, 'Affiliation'), (2, 'Alumni Of'), (3, 'Funder'), (4, 'Member Of'), (5, 'Sponsor'), (6, 'Owns'), (7, 'Founder')], help_text='The type of affilication this customer has with the organization.', verbose_name='Type Of')),
                ('associate', models.ForeignKey(help_text='The associate of our reference.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_associateaffiliation_associate_related', to='tenant_foundation.Associate')),
            ],
            options={
                'verbose_name': 'Associate Affiliation',
                'verbose_name_plural': 'Associate Affiliation',
                'db_table': 'o55_associate_affiliations',
            },
        ),
        migrations.CreateModel(
            name='AssociateComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('associate', models.ForeignKey(help_text='The associate of our reference.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_associatecomment_associate_related', to='tenant_foundation.Associate')),
            ],
            options={
                'verbose_name': 'Associate Comment',
                'verbose_name_plural': 'Associate Comments',
                'db_table': 'o55_associate_comments',
                'ordering': ('-created_at',),
                'permissions': (('can_get_associate_comments', 'Can get associate comments'), ('can_get_associate_comment', 'Can get associate comment'), ('can_post_associate_comment', 'Can post associate comment'), ('can_put_associate_comment', 'Can update associate comment'), ('can_delete_associate_comment', 'Can delete associate comment')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('text', models.TextField(blank=True, help_text='The text content of the comment.', null=True, verbose_name='Text')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom owns this comment.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_comment_created_by_related', to='shared_foundation.O55User')),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom last modified this comment.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_comment_last_modified_by_related', to='shared_foundation.O55User')),
            ],
            options={
                'verbose_name': 'Comment',
                'verbose_name_plural': 'Comments',
                'db_table': 'o55_comments',
                'permissions': (('can_get_comments', 'Can get comments'), ('can_get_comment', 'Can get comment'), ('can_post_comment', 'Can create comment'), ('can_put_comment', 'Can update comment'), ('can_delete_comment', 'Can delete comment')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('name', models.CharField(blank=True, db_index=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
                ('area_served', models.CharField(blank=True, help_text='The geographic area where a service or offered item is provided.', max_length=127, null=True, verbose_name='Area Served')),
                ('available_language', models.CharField(blank=True, help_text='A language someone may use with or at the item, service or place. Please use one of the language codes from the <a href="https://tools.ietf.org/html/bcp47">IETF BCP 47 standard</a>.', max_length=127, null=True, verbose_name='Available Language')),
                ('contact_type', models.CharField(blank=True, help_text='A person or organization can have different contact points, for different purposes. For example, a sales contact point, a PR contact point and so on. This property is used to specify the kind of contact point.', max_length=127, null=True, verbose_name='Contact Type')),
                ('email', models.EmailField(blank=True, db_index=True, help_text='Email address.', max_length=254, null=True, validators=[django.core.validators.EmailValidator(message='Invalid email')], verbose_name='Email')),
                ('fax_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='The fax number.', max_length=128, verbose_name='Fax Number')),
                ('product_supported', models.CharField(blank=True, default='', help_text='The product or service this support contact point is related to (such as product support for a particular product line). This can be a specific product or product line (e.g. "iPhone") or a general category of products or services (e.g. "smartphones").', max_length=31, null=True, verbose_name='Product Supported')),
                ('telephone', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_index=True, default='', help_text='The telephone number.', max_length=128, verbose_name='Telephone')),
                ('telephone_extension', models.CharField(blank=True, default='', help_text='The telephone extension for the number.', max_length=31, null=True, verbose_name='Telephone Extension')),
                ('mobile', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_index=True, help_text='The mobile telephone number.', max_length=128, verbose_name='Mobile')),
                ('address_country', models.CharField(help_text='The country. For example, USA. You can also provide the two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements">ISO 3166-1 alpha-2</a> country code.', max_length=127, verbose_name='Address Country')),
                ('address_locality', models.CharField(help_text='The locality. For example, Mountain View.', max_length=127, verbose_name='Address Locaility')),
                ('address_region', models.CharField(help_text='The region. For example, CA.', max_length=127, verbose_name='Address Region')),
                ('post_office_box_number', models.CharField(blank=True, help_text='Apartment, suite, unit, building, floor, etc.', max_length=255, null=True, verbose_name='Post Office Box Number')),
                ('postal_code', models.CharField(blank=True, db_index=True, help_text='The postal code. For example, 94043.', max_length=127, null=True, verbose_name='Postal Code')),
                ('street_address', models.CharField(help_text='The street address. For example, 1600 Amphitheatre Pkwy.', max_length=255, verbose_name='Street Address')),
                ('street_address_extra', models.CharField(blank=True, help_text='Apartment, suite, unit, building, floor, etc.', max_length=255, null=True, verbose_name='Street Address (Extra Line)')),
                ('elevation', models.FloatField(blank=True, help_text='The elevation of a location (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', null=True, verbose_name='Elevation')),
                ('latitude', models.DecimalField(blank=True, decimal_places=3, help_text='The latitude of a location. For example 37.42242 (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', max_digits=8, null=True, verbose_name='Latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=3, help_text='The longitude of a location. For example -122.08585 (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', max_digits=8, null=True, verbose_name='Longitude')),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, db_index=True, help_text='A longitude and latitude coordinates of this location.', null=True, srid=4326, verbose_name='Location')),
                ('given_name', models.CharField(blank=True, db_index=True, help_text='The customers given name.', max_length=63, null=True, verbose_name='Given Name')),
                ('middle_name', models.CharField(blank=True, db_index=True, help_text='The customers last name.', max_length=63, null=True, verbose_name='Middle Name')),
                ('last_name', models.CharField(blank=True, db_index=True, help_text='The customers last name.', max_length=63, null=True, verbose_name='Last Name')),
                ('birthdate', models.DateTimeField(blank=True, help_text='The customers birthdate.', null=True, verbose_name='Birthdate')),
                ('join_date', models.DateTimeField(blank=True, help_text='The date the customer joined this organization.', null=True, verbose_name='Join Date')),
                ('nationality', models.CharField(blank=True, help_text='Nationality of the person.', max_length=63, null=True, verbose_name='Nationality')),
                ('is_business', models.BooleanField(default=False, help_text='Indicates whether customer is considered a business representive or not.', verbose_name='Is Business')),
                ('is_senior', models.BooleanField(default=False, help_text='Indicates whether customer is considered a senior or not.', verbose_name='Is Senior')),
                ('is_support', models.BooleanField(default=False, help_text='Indicates whether customer needs support or not.', verbose_name='Is Support')),
                ('job_info_read', models.CharField(blank=True, help_text="The volunteer's name whom received this customer.", max_length=255, null=True, verbose_name='Job information received by')),
                ('how_hear', models.CharField(blank=True, help_text='How customer heared/learned about this Over 55 Inc.', max_length=2055, null=True, verbose_name='Learned about Over 55')),
            ],
            options={
                'verbose_name': 'Customer',
                'verbose_name_plural': 'Customers',
                'db_table': 'o55_customers',
                'permissions': (('can_get_customers', 'Can get customers'), ('can_get_customer', 'Can get customer'), ('can_post_customer', 'Can create customer'), ('can_put_customer', 'Can update customer'), ('can_delete_customer', 'Can delete customer')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='CustomerAffiliation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_of', models.PositiveSmallIntegerField(choices=[(1, 'Affiliation'), (2, 'Alumni Of'), (3, 'Funder'), (4, 'Member Of'), (5, 'Sponsor'), (6, 'Owns'), (7, 'Founder')], help_text='The type of affilication this customer has with the organization.', verbose_name='Type Of')),
                ('customer', models.ForeignKey(help_text='The customer of our reference.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_customeraffiliation_customer_related', to='tenant_foundation.Customer')),
            ],
            options={
                'verbose_name': 'Customer Affiliation',
                'verbose_name_plural': 'Customer Affiliation',
                'db_table': 'o55_customer_affiliations',
                'permissions': (('can_get_customer_affiliations', 'Can get customer affiliations'), ('can_get_customer_affiliation', 'Can get customer affiliation'), ('can_post_customer_affiliation', 'Can create customer affiliation'), ('can_put_customer_affiliation', 'Can update customer affiliation'), ('can_delete_customer_affiliation', 'Can delete customer affiliation')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='CustomerComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('comment', models.ForeignKey(help_text='The comment of our reference.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_customercomment_comment_related', to='tenant_foundation.Comment')),
                ('created_by', models.ForeignKey(help_text='The user whom created this object.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_customercomment_created_by_related', to='shared_foundation.O55User')),
                ('customer', models.ForeignKey(help_text='The customer of our reference.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_customercomment_customer_related', to='tenant_foundation.Customer')),
            ],
            options={
                'verbose_name': 'Customer Comment',
                'verbose_name_plural': 'Customer Comments',
                'db_table': 'o55_customer_comments',
                'ordering': ('-created_at',),
                'permissions': (('can_get_customer_comments', 'Can get customer comments'), ('can_get_customer_comment', 'Can get customer comment'), ('can_post_customer_comment', 'Can post customer comment'), ('can_put_customer_comment', 'Can update customer comment'), ('can_delete_customer_comment', 'Can delete customer comment')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='OpeningHoursSpecification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('name', models.CharField(blank=True, db_index=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
                ('closes', models.CharField(blank=True, help_text='The closing hour of the place or service on the given day(s) of the week.', max_length=15, null=True, verbose_name='Closes')),
                ('day_of_week', models.CharField(blank=True, help_text='The day of the week for which these opening hours are valid.', max_length=15, null=True, verbose_name='Day Of Week')),
                ('opens', models.CharField(blank=True, help_text='The opening hour of the place or service on the given day(s) of the week.', max_length=15, null=True, verbose_name='Opens')),
                ('valid_from', models.DateField(blank=True, help_text='The date when the item becomes valid.', null=True, verbose_name='Valid From')),
                ('valid_through', models.DateField(blank=True, help_text='The end of the validity of offer, price specification, or opening hours data.', null=True, verbose_name='Valid Through')),
                ('owner', models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_openinghoursspecification_abstract_thing_owner_related', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Opening Hours Specification',
                'verbose_name_plural': 'Opening Hours Specifications',
                'db_table': 'o55_opening_hours_specifications',
                'permissions': (('can_get_tenant_opening_hours_specifications', 'Can get opening hours specifications (tenant)'), ('can_get_tenant_opening_hours_specification', 'Can get opening hours specifications (tenant)'), ('can_post_tenant_opening_hours_specification', 'Can create opening hours specifications (tenant)'), ('can_put_tenant_opening_hours_specification', 'Can update opening hours specifications (tenant)'), ('can_delete_tenant_opening_hours_specification', 'Can delete opening hours specifications (tenant)')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assignment_date', models.DateField(blank=True, help_text='The date that an associate was assigned to the customer.', null=True, verbose_name='Assignment Date')),
                ('is_ongoing', models.BooleanField(default=False, help_text='Track whether this order is ongoing.', verbose_name='Is Active')),
                ('is_cancelled', models.BooleanField(default=False, help_text='Track whether this order was cancelled.', verbose_name='Is Cancelled')),
                ('completion_date', models.DateField(blank=True, help_text='The date that this order was completed.', null=True, verbose_name='Completion Date')),
                ('hours', models.PositiveSmallIntegerField(default=0, help_text='The total amount of hours worked on for this order by the associate.', verbose_name='Hours')),
                ('service_fee_currency', djmoney.models.fields.CurrencyField(choices=[('XUA', 'ADB Unit of Account'), ('AFN', 'Afghani'), ('DZD', 'Algerian Dinar'), ('ARS', 'Argentine Peso'), ('AMD', 'Armenian Dram'), ('AWG', 'Aruban Guilder'), ('AUD', 'Australian Dollar'), ('AZN', 'Azerbaijanian Manat'), ('BSD', 'Bahamian Dollar'), ('BHD', 'Bahraini Dinar'), ('THB', 'Baht'), ('PAB', 'Balboa'), ('BBD', 'Barbados Dollar'), ('BYN', 'Belarussian Ruble'), ('BYR', 'Belarussian Ruble'), ('BZD', 'Belize Dollar'), ('BMD', 'Bermudian Dollar (customarily known as Bermuda Dollar)'), ('BTN', 'Bhutanese ngultrum'), ('VEF', 'Bolivar Fuerte'), ('BOB', 'Boliviano'), ('XBA', 'Bond Markets Units European Composite Unit (EURCO)'), ('BRL', 'Brazilian Real'), ('BND', 'Brunei Dollar'), ('BGN', 'Bulgarian Lev'), ('BIF', 'Burundi Franc'), ('XOF', 'CFA Franc BCEAO'), ('XAF', 'CFA franc BEAC'), ('XPF', 'CFP Franc'), ('CAD', 'Canadian Dollar'), ('CVE', 'Cape Verde Escudo'), ('KYD', 'Cayman Islands Dollar'), ('CLP', 'Chilean peso'), ('XTS', 'Codes specifically reserved for testing purposes'), ('COP', 'Colombian peso'), ('KMF', 'Comoro Franc'), ('CDF', 'Congolese franc'), ('BAM', 'Convertible Marks'), ('NIO', 'Cordoba Oro'), ('CRC', 'Costa Rican Colon'), ('HRK', 'Croatian Kuna'), ('CUP', 'Cuban Peso'), ('CUC', 'Cuban convertible peso'), ('CZK', 'Czech Koruna'), ('GMD', 'Dalasi'), ('DKK', 'Danish Krone'), ('MKD', 'Denar'), ('DJF', 'Djibouti Franc'), ('STD', 'Dobra'), ('DOP', 'Dominican Peso'), ('VND', 'Dong'), ('XCD', 'East Caribbean Dollar'), ('EGP', 'Egyptian Pound'), ('SVC', 'El Salvador Colon'), ('ETB', 'Ethiopian Birr'), ('EUR', 'Euro'), ('XBB', 'European Monetary Unit (E.M.U.-6)'), ('XBD', 'European Unit of Account 17(E.U.A.-17)'), ('XBC', 'European Unit of Account 9(E.U.A.-9)'), ('FKP', 'Falkland Islands Pound'), ('FJD', 'Fiji Dollar'), ('HUF', 'Forint'), ('GHS', 'Ghana Cedi'), ('GIP', 'Gibraltar Pound'), ('XAU', 'Gold'), ('XFO', 'Gold-Franc'), ('PYG', 'Guarani'), ('GNF', 'Guinea Franc'), ('GYD', 'Guyana Dollar'), ('HTG', 'Haitian gourde'), ('HKD', 'Hong Kong Dollar'), ('UAH', 'Hryvnia'), ('ISK', 'Iceland Krona'), ('INR', 'Indian Rupee'), ('IRR', 'Iranian Rial'), ('IQD', 'Iraqi Dinar'), ('IMP', 'Isle of Man Pound'), ('JMD', 'Jamaican Dollar'), ('JOD', 'Jordanian Dinar'), ('KES', 'Kenyan Shilling'), ('PGK', 'Kina'), ('LAK', 'Kip'), ('KWD', 'Kuwaiti Dinar'), ('AOA', 'Kwanza'), ('MMK', 'Kyat'), ('GEL', 'Lari'), ('LVL', 'Latvian Lats'), ('LBP', 'Lebanese Pound'), ('ALL', 'Lek'), ('HNL', 'Lempira'), ('SLL', 'Leone'), ('LSL', 'Lesotho loti'), ('LRD', 'Liberian Dollar'), ('LYD', 'Libyan Dinar'), ('SZL', 'Lilangeni'), ('LTL', 'Lithuanian Litas'), ('MGA', 'Malagasy Ariary'), ('MWK', 'Malawian Kwacha'), ('MYR', 'Malaysian Ringgit'), ('TMM', 'Manat'), ('MUR', 'Mauritius Rupee'), ('MZN', 'Metical'), ('MXV', 'Mexican Unidad de Inversion (UDI)'), ('MXN', 'Mexican peso'), ('MDL', 'Moldovan Leu'), ('MAD', 'Moroccan Dirham'), ('BOV', 'Mvdol'), ('NGN', 'Naira'), ('ERN', 'Nakfa'), ('NAD', 'Namibian Dollar'), ('NPR', 'Nepalese Rupee'), ('ANG', 'Netherlands Antillian Guilder'), ('ILS', 'New Israeli Sheqel'), ('RON', 'New Leu'), ('TWD', 'New Taiwan Dollar'), ('NZD', 'New Zealand Dollar'), ('KPW', 'North Korean Won'), ('NOK', 'Norwegian Krone'), ('PEN', 'Nuevo Sol'), ('MRO', 'Ouguiya'), ('TOP', 'Paanga'), ('PKR', 'Pakistan Rupee'), ('XPD', 'Palladium'), ('MOP', 'Pataca'), ('PHP', 'Philippine Peso'), ('XPT', 'Platinum'), ('GBP', 'Pound Sterling'), ('BWP', 'Pula'), ('QAR', 'Qatari Rial'), ('GTQ', 'Quetzal'), ('ZAR', 'Rand'), ('OMR', 'Rial Omani'), ('KHR', 'Riel'), ('MVR', 'Rufiyaa'), ('IDR', 'Rupiah'), ('RUB', 'Russian Ruble'), ('RWF', 'Rwanda Franc'), ('XDR', 'SDR'), ('SHP', 'Saint Helena Pound'), ('SAR', 'Saudi Riyal'), ('RSD', 'Serbian Dinar'), ('SCR', 'Seychelles Rupee'), ('XAG', 'Silver'), ('SGD', 'Singapore Dollar'), ('SBD', 'Solomon Islands Dollar'), ('KGS', 'Som'), ('SOS', 'Somali Shilling'), ('TJS', 'Somoni'), ('SSP', 'South Sudanese Pound'), ('LKR', 'Sri Lanka Rupee'), ('XSU', 'Sucre'), ('SDG', 'Sudanese Pound'), ('SRD', 'Surinam Dollar'), ('SEK', 'Swedish Krona'), ('CHF', 'Swiss Franc'), ('SYP', 'Syrian Pound'), ('BDT', 'Taka'), ('WST', 'Tala'), ('TZS', 'Tanzanian Shilling'), ('KZT', 'Tenge'), ('XXX', 'The codes assigned for transactions where no currency is involved'), ('TTD', 'Trinidad and Tobago Dollar'), ('MNT', 'Tugrik'), ('TND', 'Tunisian Dinar'), ('TRY', 'Turkish Lira'), ('TMT', 'Turkmenistan New Manat'), ('TVD', 'Tuvalu dollar'), ('AED', 'UAE Dirham'), ('XFU', 'UIC-Franc'), ('USD', 'US Dollar'), ('USN', 'US Dollar (Next day)'), ('UGX', 'Uganda Shilling'), ('CLF', 'Unidad de Fomento'), ('COU', 'Unidad de Valor Real'), ('UYI', 'Uruguay Peso en Unidades Indexadas (URUIURUI)'), ('UYU', 'Uruguayan peso'), ('UZS', 'Uzbekistan Sum'), ('VUV', 'Vatu'), ('CHE', 'WIR Euro'), ('CHW', 'WIR Franc'), ('KRW', 'Won'), ('YER', 'Yemeni Rial'), ('JPY', 'Yen'), ('CNY', 'Yuan Renminbi'), ('ZMK', 'Zambian Kwacha'), ('ZMW', 'Zambian Kwacha'), ('ZWD', 'Zimbabwe Dollar A/06'), ('ZWN', 'Zimbabwe dollar A/08'), ('ZWL', 'Zimbabwe dollar A/09'), ('PLN', 'Zloty')], default='CAD', editable=False, max_length=3)),
                ('service_fee', djmoney.models.fields.MoneyField(blank=True, decimal_places=2, default=Decimal('0'), default_currency='CAD', help_text='The service fee that the customer was charged by the associate..', max_digits=10, verbose_name='Service Fee')),
                ('payment_date', models.DateField(blank=True, help_text='The date that this order was paid for.', null=True, verbose_name='Payment Date')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('associate', models.ForeignKey(blank=True, help_text='The associate of our order.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_order_associate_related', to='tenant_foundation.Associate')),
            ],
            options={
                'verbose_name': 'Order',
                'verbose_name_plural': 'Orders',
                'db_table': 'o55_orders',
                'permissions': (('can_get_orders', 'Can get orders'), ('can_get_order', 'Can get order'), ('can_post_order', 'Can create order'), ('can_put_order', 'Can update order'), ('can_delete_order', 'Can delete order')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='OrderComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('comment', models.ForeignKey(help_text='The comment of our reference.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_ordercomment_comment_related', to='tenant_foundation.Comment')),
                ('order', models.ForeignKey(help_text='The order of our reference.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_ordercomment_order_related', to='tenant_foundation.Order')),
            ],
            options={
                'verbose_name': 'Order Comment',
                'verbose_name_plural': 'Order Comments',
                'db_table': 'o55_order_comments',
                'ordering': ('-created',),
                'permissions': (('can_get_order_comments', 'Can get order comments'), ('can_get_order_comment', 'Can get order comment'), ('can_post_order_comment', 'Can post order comment'), ('can_put_order_comment', 'Can update order comment'), ('can_delete_order_comment', 'Can delete order comment')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('name', models.CharField(blank=True, db_index=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
                ('area_served', models.CharField(blank=True, help_text='The geographic area where a service or offered item is provided.', max_length=127, null=True, verbose_name='Area Served')),
                ('available_language', models.CharField(blank=True, help_text='A language someone may use with or at the item, service or place. Please use one of the language codes from the <a href="https://tools.ietf.org/html/bcp47">IETF BCP 47 standard</a>.', max_length=127, null=True, verbose_name='Available Language')),
                ('contact_type', models.CharField(blank=True, help_text='A person or organization can have different contact points, for different purposes. For example, a sales contact point, a PR contact point and so on. This property is used to specify the kind of contact point.', max_length=127, null=True, verbose_name='Contact Type')),
                ('email', models.EmailField(blank=True, db_index=True, help_text='Email address.', max_length=254, null=True, validators=[django.core.validators.EmailValidator(message='Invalid email')], verbose_name='Email')),
                ('fax_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='The fax number.', max_length=128, verbose_name='Fax Number')),
                ('product_supported', models.CharField(blank=True, default='', help_text='The product or service this support contact point is related to (such as product support for a particular product line). This can be a specific product or product line (e.g. "iPhone") or a general category of products or services (e.g. "smartphones").', max_length=31, null=True, verbose_name='Product Supported')),
                ('telephone', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_index=True, default='', help_text='The telephone number.', max_length=128, verbose_name='Telephone')),
                ('telephone_extension', models.CharField(blank=True, default='', help_text='The telephone extension for the number.', max_length=31, null=True, verbose_name='Telephone Extension')),
                ('mobile', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_index=True, help_text='The mobile telephone number.', max_length=128, verbose_name='Mobile')),
                ('address_country', models.CharField(help_text='The country. For example, USA. You can also provide the two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements">ISO 3166-1 alpha-2</a> country code.', max_length=127, verbose_name='Address Country')),
                ('address_locality', models.CharField(help_text='The locality. For example, Mountain View.', max_length=127, verbose_name='Address Locaility')),
                ('address_region', models.CharField(help_text='The region. For example, CA.', max_length=127, verbose_name='Address Region')),
                ('post_office_box_number', models.CharField(blank=True, help_text='Apartment, suite, unit, building, floor, etc.', max_length=255, null=True, verbose_name='Post Office Box Number')),
                ('postal_code', models.CharField(blank=True, db_index=True, help_text='The postal code. For example, 94043.', max_length=127, null=True, verbose_name='Postal Code')),
                ('street_address', models.CharField(help_text='The street address. For example, 1600 Amphitheatre Pkwy.', max_length=255, verbose_name='Street Address')),
                ('street_address_extra', models.CharField(blank=True, help_text='Apartment, suite, unit, building, floor, etc.', max_length=255, null=True, verbose_name='Street Address (Extra Line)')),
                ('elevation', models.FloatField(blank=True, help_text='The elevation of a location (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', null=True, verbose_name='Elevation')),
                ('latitude', models.DecimalField(blank=True, decimal_places=3, help_text='The latitude of a location. For example 37.42242 (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', max_digits=8, null=True, verbose_name='Latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=3, help_text='The longitude of a location. For example -122.08585 (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', max_digits=8, null=True, verbose_name='Longitude')),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, db_index=True, help_text='A longitude and latitude coordinates of this location.', null=True, srid=4326, verbose_name='Location')),
                ('naics', models.CharField(blank=True, help_text='The North American Industry Classification System (NAICS) code for a particular organization or business person.', max_length=15, null=True, verbose_name='NAICS')),
                ('hours_available', models.ManyToManyField(blank=True, help_text='The hours during which this service or contact is available.', related_name='tenant_foundation_organization_contact_point_hours_available_related', to='tenant_foundation.OpeningHoursSpecification')),
                ('owner', models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_organization_abstract_thing_owner_related', to=settings.AUTH_USER_MODEL)),
                ('parent_organization', models.ForeignKey(blank=True, help_text='The larger organization that this organization is a sub-organization of', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_organization_parent_organization_related', to='tenant_foundation.Organization')),
            ],
            options={
                'verbose_name': 'Organization',
                'verbose_name_plural': 'Organizations',
                'db_table': 'o55_organizations',
                'permissions': (('can_get_organizations', 'Can get organizations'), ('can_get_organization', 'Can get organization'), ('can_post_organization', 'Can create organization'), ('can_put_organization', 'Can update organization'), ('can_delete_organization', 'Can delete organization')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='SkillSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(db_index=True, help_text='The category text of this skill set.', max_length=31, verbose_name='Category')),
                ('sub_category', models.CharField(db_index=True, help_text='The sub-category text of this skill set.', max_length=31, verbose_name='Sub-Category')),
                ('insurance_requirement', models.CharField(db_index=True, help_text='The insurance requirement of this skill set.', max_length=63, verbose_name='Insurance Requirement')),
            ],
            options={
                'verbose_name': 'Skill Set',
                'verbose_name_plural': 'Skill Sets',
                'db_table': 'o55_skill_sets',
                'permissions': (('can_get_skill_sets', 'Can get skill sets'), ('can_get_skill_set', 'Can get skill set'), ('can_post_skill_set', 'Can create skill set'), ('can_put_skill_set', 'Can update skill set'), ('can_delete_skill_set', 'Can delete skill set')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('name', models.CharField(blank=True, db_index=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
                ('area_served', models.CharField(blank=True, help_text='The geographic area where a service or offered item is provided.', max_length=127, null=True, verbose_name='Area Served')),
                ('available_language', models.CharField(blank=True, help_text='A language someone may use with or at the item, service or place. Please use one of the language codes from the <a href="https://tools.ietf.org/html/bcp47">IETF BCP 47 standard</a>.', max_length=127, null=True, verbose_name='Available Language')),
                ('contact_type', models.CharField(blank=True, help_text='A person or organization can have different contact points, for different purposes. For example, a sales contact point, a PR contact point and so on. This property is used to specify the kind of contact point.', max_length=127, null=True, verbose_name='Contact Type')),
                ('email', models.EmailField(blank=True, db_index=True, help_text='Email address.', max_length=254, null=True, validators=[django.core.validators.EmailValidator(message='Invalid email')], verbose_name='Email')),
                ('fax_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='The fax number.', max_length=128, verbose_name='Fax Number')),
                ('product_supported', models.CharField(blank=True, default='', help_text='The product or service this support contact point is related to (such as product support for a particular product line). This can be a specific product or product line (e.g. "iPhone") or a general category of products or services (e.g. "smartphones").', max_length=31, null=True, verbose_name='Product Supported')),
                ('telephone', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_index=True, default='', help_text='The telephone number.', max_length=128, verbose_name='Telephone')),
                ('telephone_extension', models.CharField(blank=True, default='', help_text='The telephone extension for the number.', max_length=31, null=True, verbose_name='Telephone Extension')),
                ('mobile', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_index=True, help_text='The mobile telephone number.', max_length=128, verbose_name='Mobile')),
                ('address_country', models.CharField(help_text='The country. For example, USA. You can also provide the two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements">ISO 3166-1 alpha-2</a> country code.', max_length=127, verbose_name='Address Country')),
                ('address_locality', models.CharField(help_text='The locality. For example, Mountain View.', max_length=127, verbose_name='Address Locaility')),
                ('address_region', models.CharField(help_text='The region. For example, CA.', max_length=127, verbose_name='Address Region')),
                ('post_office_box_number', models.CharField(blank=True, help_text='Apartment, suite, unit, building, floor, etc.', max_length=255, null=True, verbose_name='Post Office Box Number')),
                ('postal_code', models.CharField(blank=True, db_index=True, help_text='The postal code. For example, 94043.', max_length=127, null=True, verbose_name='Postal Code')),
                ('street_address', models.CharField(help_text='The street address. For example, 1600 Amphitheatre Pkwy.', max_length=255, verbose_name='Street Address')),
                ('street_address_extra', models.CharField(blank=True, help_text='Apartment, suite, unit, building, floor, etc.', max_length=255, null=True, verbose_name='Street Address (Extra Line)')),
                ('elevation', models.FloatField(blank=True, help_text='The elevation of a location (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', null=True, verbose_name='Elevation')),
                ('latitude', models.DecimalField(blank=True, decimal_places=3, help_text='The latitude of a location. For example 37.42242 (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', max_digits=8, null=True, verbose_name='Latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=3, help_text='The longitude of a location. For example -122.08585 (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', max_digits=8, null=True, verbose_name='Longitude')),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, db_index=True, help_text='A longitude and latitude coordinates of this location.', null=True, srid=4326, verbose_name='Location')),
                ('given_name', models.CharField(blank=True, help_text='The staff members given name.', max_length=63, null=True, verbose_name='Given Name')),
                ('middle_name', models.CharField(blank=True, help_text='The staff members last name.', max_length=63, null=True, verbose_name='Middle Name')),
                ('last_name', models.CharField(blank=True, help_text='The staff members last name.', max_length=63, null=True, verbose_name='Last Name')),
                ('birthdate', models.DateTimeField(blank=True, help_text='The staff members birthdate.', null=True, verbose_name='Birthdate')),
                ('how_hear', models.CharField(blank=True, help_text='How this staff member heared about this organization.', max_length=2055, null=True, verbose_name='How hear')),
                ('join_date', models.DateTimeField(blank=True, help_text='The date the staff member joined this organization.', null=True, verbose_name='Join Date')),
                ('hours_available', models.ManyToManyField(blank=True, help_text='The hours during which this service or contact is available.', related_name='tenant_foundation_staff_contact_point_hours_available_related', to='tenant_foundation.OpeningHoursSpecification')),
                ('owner', models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_staff_abstract_thing_owner_related', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Staff',
                'verbose_name_plural': 'Staves',
                'db_table': 'o55_staff',
                'permissions': (('can_get_staves', 'Can get staves'), ('can_get_staff', 'Can get staff'), ('can_post_staff', 'Can create staff'), ('can_put_staff', 'Can update staff'), ('can_delete_staff', 'Can delete staff')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(db_index=True, help_text='The text content of this tag.', max_length=31, unique=True, verbose_name='Text')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'db_table': 'o55_tags',
                'permissions': (('can_get_tags', 'Can get tags'), ('can_get_tag', 'Can get tag'), ('can_post_tag', 'Can create tag'), ('can_put_tag', 'Can update tag'), ('can_delete_tag', 'Can delete tag')),
                'default_permissions': (),
            },
        ),
        migrations.AddField(
            model_name='order',
            name='category_tags',
            field=models.ManyToManyField(blank=True, help_text='The category tags that this order belongs to.', related_name='tenant_foundation_order_category_tags_related', to='tenant_foundation.Tag'),
        ),
        migrations.AddField(
            model_name='order',
            name='comments',
            field=models.ManyToManyField(blank=True, help_text='The comments of this order sorted by latest creation date..', related_name='tenant_foundation_order_comments_related', through='tenant_foundation.OrderComment', to='tenant_foundation.Comment'),
        ),
        migrations.AddField(
            model_name='order',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='The user whom created this order.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_order_created_by_related', to='shared_foundation.O55User'),
        ),
        migrations.AddField(
            model_name='order',
            name='customer',
            field=models.ForeignKey(help_text='The customer of our order.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_order_customer_related', to='tenant_foundation.Customer'),
        ),
        migrations.AddField(
            model_name='order',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, help_text='The user whom last modified this order.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_order_last_modified_by_related', to='shared_foundation.O55User'),
        ),
        migrations.AddField(
            model_name='order',
            name='skill_sets',
            field=models.ManyToManyField(blank=True, help_text='The skill sets that belong to this order.', related_name='tenant_foundation_order_skill_sets_related', to='tenant_foundation.SkillSet'),
        ),
        migrations.AddField(
            model_name='customeraffiliation',
            name='organization',
            field=models.ForeignKey(help_text='The organization whom this customer is affiliated with.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_customeraffiliation_organization_related', to='tenant_foundation.Organization'),
        ),
        migrations.AddField(
            model_name='customer',
            name='comments',
            field=models.ManyToManyField(blank=True, help_text='The comments of this customer sorted by latest creation date..', related_name='tenant_foundation_customer_comments_related', through='tenant_foundation.CustomerComment', to='tenant_foundation.Comment'),
        ),
        migrations.AddField(
            model_name='customer',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='The user whom created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_customer_created_by_related', to='shared_foundation.O55User'),
        ),
        migrations.AddField(
            model_name='customer',
            name='hours_available',
            field=models.ManyToManyField(blank=True, help_text='The hours during which this service or contact is available.', related_name='tenant_foundation_customer_contact_point_hours_available_related', to='tenant_foundation.OpeningHoursSpecification'),
        ),
        migrations.AddField(
            model_name='customer',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, help_text='The user whom modified this object last.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_customer_last_modified_by_related', to='shared_foundation.O55User'),
        ),
        migrations.AddField(
            model_name='customer',
            name='organizations',
            field=models.ManyToManyField(blank=True, help_text='The organizations that this customer is affiliated with.', through='tenant_foundation.CustomerAffiliation', to='tenant_foundation.Organization'),
        ),
        migrations.AddField(
            model_name='customer',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_customer_abstract_thing_owner_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='associatecomment',
            name='comment',
            field=models.ForeignKey(help_text='The comment of our reference.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_associatecomment_comment_related', to='tenant_foundation.Comment'),
        ),
        migrations.AddField(
            model_name='associateaffiliation',
            name='organization',
            field=models.ForeignKey(help_text='The organization whom this user is affiliated to.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_associateaffiliation_organization_related', to='tenant_foundation.Organization'),
        ),
        migrations.AddField(
            model_name='associate',
            name='comments',
            field=models.ManyToManyField(blank=True, help_text='The comments of this associate sorted by latest creation date..', related_name='tenant_foundation_associate_associate_related', through='tenant_foundation.AssociateComment', to='tenant_foundation.Comment'),
        ),
        migrations.AddField(
            model_name='associate',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='The user whom created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_associate_created_by_related', to='shared_foundation.O55User'),
        ),
        migrations.AddField(
            model_name='associate',
            name='hours_available',
            field=models.ManyToManyField(blank=True, help_text='The hours during which this service or contact is available.', related_name='tenant_foundation_associate_contact_point_hours_available_related', to='tenant_foundation.OpeningHoursSpecification'),
        ),
        migrations.AddField(
            model_name='associate',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, help_text='The user whom modified this object last.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_associate_last_modified_by_related', to='shared_foundation.O55User'),
        ),
        migrations.AddField(
            model_name='associate',
            name='organizations',
            field=models.ManyToManyField(blank=True, help_text='The organizations that this associate is affiliated with.', through='tenant_foundation.AssociateAffiliation', to='tenant_foundation.Organization'),
        ),
        migrations.AddField(
            model_name='associate',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_associate_abstract_thing_owner_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='associate',
            name='skill_sets',
            field=models.ManyToManyField(blank=True, help_text='The skill sets this associate has.', related_name='tenant_foundation_associate_skill_sets_related', to='tenant_foundation.SkillSet'),
        ),
    ]
