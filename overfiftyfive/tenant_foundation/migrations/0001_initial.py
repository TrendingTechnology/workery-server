# Generated by Django 2.0.4 on 2018-04-24 23:41

from decimal import Decimal
from django.conf import settings
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import djmoney.models.fields
import phonenumber_field.modelfields
import tenant_foundation.models.associate
import tenant_foundation.models.awaylog
import tenant_foundation.models.customer
import tenant_foundation.models.opening_hours_specification
import tenant_foundation.models.order
import tenant_foundation.models.organization
import tenant_foundation.models.partner
import tenant_foundation.models.resource_category
import tenant_foundation.models.resource_item
import tenant_foundation.models.resource_item_sort_order
import tenant_foundation.models.skill_set
import tenant_foundation.models.staff
import tenant_foundation.models.tag


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Associate',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('name', models.CharField(blank=True, db_index=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
                ('area_served', models.CharField(blank=True, help_text='The geographic area where a service or offered item is provided.', max_length=127, null=True, verbose_name='Area Served')),
                ('available_language', models.CharField(blank=True, help_text='A language someone may use with or at the item, service or place. Please use one of the language codes from the <a href="https://tools.ietf.org/html/bcp47">IETF BCP 47 standard</a>.', max_length=127, null=True, verbose_name='Available Language')),
                ('contact_type', models.CharField(blank=True, help_text='A person or organization can have different contact points, for different purposes. For example, a sales contact point, a PR contact point and so on. This property is used to specify the kind of contact point.', max_length=127, null=True, verbose_name='Contact Type')),
                ('email', models.EmailField(blank=True, db_index=True, help_text='Email address.', max_length=254, null=True, validators=[django.core.validators.EmailValidator(message='Invalid email')], verbose_name='Email')),
                ('fax_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='The fax number.', max_length=128, null=True, verbose_name='Fax Number')),
                ('product_supported', models.CharField(blank=True, default='', help_text='The product or service this support contact point is related to (such as product support for a particular product line). This can be a specific product or product line (e.g. "iPhone") or a general category of products or services (e.g. "smartphones").', max_length=31, null=True, verbose_name='Product Supported')),
                ('telephone', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_index=True, help_text='The telephone number.', max_length=128, null=True, verbose_name='Telephone')),
                ('telephone_type_of', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Residential Customer'), (2, 'Commercial Customer'), (3, 'Unknown Customer')], default=1, help_text='The type of phone this is. Ex: work, home, etc.', verbose_name='Telephone type of')),
                ('telephone_extension', models.CharField(blank=True, default='', help_text='The telephone number extension.', max_length=31, null=True, verbose_name='Telephone Extension')),
                ('other_telephone', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_index=True, help_text='The alternative telephone number.', max_length=128, null=True, verbose_name='Other Telephone')),
                ('other_telephone_extension', models.CharField(blank=True, default='', help_text='The alternative telephone extension number.', max_length=31, null=True, verbose_name='Other Telephone Extension')),
                ('other_telephone_type_of', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Residential Customer'), (2, 'Commercial Customer'), (3, 'Unknown Customer')], default=1, help_text='The type of phone the alternative telephone is. Ex: work, home, etc.', verbose_name='Other telephone type of')),
                ('address_country', models.CharField(help_text='The country. For example, USA. You can also provide the two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements">ISO 3166-1 alpha-2</a> country code.', max_length=127, verbose_name='Address Country')),
                ('address_locality', models.CharField(help_text='The locality. For example, Mountain View.', max_length=127, verbose_name='Address Locaility')),
                ('address_region', models.CharField(help_text='The region. For example, CA.', max_length=127, verbose_name='Address Region')),
                ('post_office_box_number', models.CharField(blank=True, help_text='Apartment, suite, unit, building, floor, etc.', max_length=255, null=True, verbose_name='Post Office Box Number')),
                ('postal_code', models.CharField(blank=True, db_index=True, help_text='The postal code. For example, 94043.', max_length=127, null=True, verbose_name='Postal Code')),
                ('street_address', models.CharField(help_text='The street address. For example, 1600 Amphitheatre Pkwy.', max_length=255, verbose_name='Street Address')),
                ('street_address_extra', models.CharField(blank=True, help_text='Apartment, suite, unit, building, floor, etc.', max_length=255, null=True, verbose_name='Street Address (Extra Line)')),
                ('elevation', models.FloatField(blank=True, help_text='The elevation of a location (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', null=True, verbose_name='Elevation')),
                ('latitude', models.DecimalField(blank=True, decimal_places=3, help_text='The latitude of a location. For example 37.42242 (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', max_digits=8, null=True, verbose_name='Latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=3, help_text='The longitude of a location. For example -122.08585 (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', max_digits=8, null=True, verbose_name='Longitude')),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, db_index=True, help_text='A longitude and latitude coordinates of this location.', null=True, srid=4326, verbose_name='Location')),
                ('given_name', models.CharField(blank=True, db_index=True, help_text='The customers given name.', max_length=63, null=True, verbose_name='Given Name')),
                ('middle_name', models.CharField(blank=True, db_index=True, help_text='The customers last name.', max_length=63, null=True, verbose_name='Middle Name')),
                ('last_name', models.CharField(blank=True, db_index=True, help_text='The customers last name.', max_length=63, null=True, verbose_name='Last Name')),
                ('birthdate', models.DateField(blank=True, help_text='The customers birthdate.', null=True, verbose_name='Birthdate')),
                ('join_date', models.DateTimeField(blank=True, help_text='The date the customer joined this organization.', null=True, verbose_name='Join Date')),
                ('nationality', models.CharField(blank=True, help_text='Nationality of the person.', max_length=63, null=True, verbose_name='Nationality')),
                ('gender', models.CharField(blank=True, help_text='Gender of the person. While Male and Female may be used, text strings are also acceptable for people who do not identify as a binary gender.', max_length=63, null=True, verbose_name='Gender')),
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.associate.increment_associate_id_number, editable=False, primary_key=True, serialize=False)),
                ('business', models.CharField(blank=True, help_text='The associates business status.', max_length=63, null=True, verbose_name='Business')),
                ('indexed_text', models.CharField(blank=True, db_index=True, help_text='The searchable content text used by the keyword searcher function.', max_length=511, null=True, unique=True, verbose_name='Indexed Text')),
                ('is_ok_to_email', models.BooleanField(default=True, help_text='Indicates whether associate allows being reached by email', verbose_name='Is OK to email')),
                ('is_ok_to_text', models.BooleanField(default=True, help_text='Indicates whether associate allows being reached by text.', verbose_name='Is OK to text')),
                ('hourly_salary_desired', models.PositiveSmallIntegerField(blank=True, help_text='The hourly salary rate the associate', null=True, verbose_name='Hourly Salary Desired')),
                ('limit_special', models.CharField(blank=True, help_text='Any special limitations / handicaps this associate has.', max_length=255, null=True, verbose_name='Limit Special')),
                ('dues_pd', models.DateField(blank=True, help_text='-', null=True, verbose_name='Deus PD')),
                ('ins_due', models.DateField(blank=True, help_text='-', null=True, verbose_name='Ins Due')),
                ('police_check', models.DateField(blank=True, help_text='The date the associate took a police check.', null=True, verbose_name='Police Check')),
                ('drivers_license_class', models.CharField(blank=True, help_text='The associates license class for driving.', max_length=7, null=True, verbose_name='Divers License Class')),
                ('has_car', models.BooleanField(default=False, help_text='Indicates whether associate has a car or not.', verbose_name='Has Car')),
                ('has_van', models.BooleanField(default=False, help_text='Indicates whether associate has a van or not.', verbose_name='Has Van')),
                ('has_truck', models.BooleanField(default=False, help_text='Indicates whether associate has a truck or not.', verbose_name='Has Truck')),
                ('is_full_time', models.BooleanField(default=False, help_text='Indicates whether associate is full time or not.', verbose_name='Is Full Time')),
                ('is_part_time', models.BooleanField(default=False, help_text='Indicates whether associate is part time or not.', verbose_name='Is Part Time')),
                ('is_contract_time', models.BooleanField(default=False, help_text='Indicates whether associate is contracted or not.', verbose_name='Is Contract Time')),
                ('is_small_job', models.BooleanField(default=False, help_text='Indicates whether associate is employed for small jobs or not.', verbose_name='Is Small Job')),
                ('how_hear', models.CharField(blank=True, help_text='How associate heared about this business.', max_length=2055, null=True, verbose_name='How hear')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_associate_created_by_related', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Associate',
                'verbose_name_plural': 'Associates',
                'db_table': 'o55_associates',
                'permissions': (('can_get_associates', 'Can get associates'), ('can_get_associate', 'Can get associate'), ('can_post_associate', 'Can create associate'), ('can_put_associate', 'Can update associate'), ('can_delete_associate', 'Can delete associate')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='AwayLog',
            fields=[
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.awaylog.increment_away_log_id_number, editable=False, primary_key=True, serialize=False)),
                ('reason', models.TextField(blank=True, default='', help_text='A reason the associate is away.', null=True, verbose_name='Reason')),
                ('until_further_notice', models.BooleanField(default=False, help_text='Track whether .', verbose_name='Away until further notice')),
                ('until_date', models.DateField(blank=True, help_text='The date that this user will return on.', null=True, verbose_name='Away until date')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this away log.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_awaylog_created_by_related', to=settings.AUTH_USER_MODEL)),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom last modified this away log.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_awaylog_last_modified_by_related', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, help_text='The user of our away log.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_awaylog_user_related', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'AwayLog',
                'verbose_name_plural': 'AwayLogs',
                'db_table': 'o55_away_logs',
                'permissions': (('can_get_away_logs', 'Can get away logs'), ('can_get_away_log', 'Can get away log'), ('can_post_away_log', 'Can create away log'), ('can_put_away_log', 'Can update away log'), ('can_delete_away_log', 'Can delete away log')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('name', models.CharField(blank=True, db_index=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
                ('area_served', models.CharField(blank=True, help_text='The geographic area where a service or offered item is provided.', max_length=127, null=True, verbose_name='Area Served')),
                ('available_language', models.CharField(blank=True, help_text='A language someone may use with or at the item, service or place. Please use one of the language codes from the <a href="https://tools.ietf.org/html/bcp47">IETF BCP 47 standard</a>.', max_length=127, null=True, verbose_name='Available Language')),
                ('contact_type', models.CharField(blank=True, help_text='A person or organization can have different contact points, for different purposes. For example, a sales contact point, a PR contact point and so on. This property is used to specify the kind of contact point.', max_length=127, null=True, verbose_name='Contact Type')),
                ('email', models.EmailField(blank=True, db_index=True, help_text='Email address.', max_length=254, null=True, validators=[django.core.validators.EmailValidator(message='Invalid email')], verbose_name='Email')),
                ('fax_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='The fax number.', max_length=128, null=True, verbose_name='Fax Number')),
                ('product_supported', models.CharField(blank=True, default='', help_text='The product or service this support contact point is related to (such as product support for a particular product line). This can be a specific product or product line (e.g. "iPhone") or a general category of products or services (e.g. "smartphones").', max_length=31, null=True, verbose_name='Product Supported')),
                ('telephone', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_index=True, help_text='The telephone number.', max_length=128, null=True, verbose_name='Telephone')),
                ('telephone_type_of', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Residential Customer'), (2, 'Commercial Customer'), (3, 'Unknown Customer')], default=1, help_text='The type of phone this is. Ex: work, home, etc.', verbose_name='Telephone type of')),
                ('telephone_extension', models.CharField(blank=True, default='', help_text='The telephone number extension.', max_length=31, null=True, verbose_name='Telephone Extension')),
                ('other_telephone', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_index=True, help_text='The alternative telephone number.', max_length=128, null=True, verbose_name='Other Telephone')),
                ('other_telephone_extension', models.CharField(blank=True, default='', help_text='The alternative telephone extension number.', max_length=31, null=True, verbose_name='Other Telephone Extension')),
                ('other_telephone_type_of', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Residential Customer'), (2, 'Commercial Customer'), (3, 'Unknown Customer')], default=1, help_text='The type of phone the alternative telephone is. Ex: work, home, etc.', verbose_name='Other telephone type of')),
                ('address_country', models.CharField(help_text='The country. For example, USA. You can also provide the two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements">ISO 3166-1 alpha-2</a> country code.', max_length=127, verbose_name='Address Country')),
                ('address_locality', models.CharField(help_text='The locality. For example, Mountain View.', max_length=127, verbose_name='Address Locaility')),
                ('address_region', models.CharField(help_text='The region. For example, CA.', max_length=127, verbose_name='Address Region')),
                ('post_office_box_number', models.CharField(blank=True, help_text='Apartment, suite, unit, building, floor, etc.', max_length=255, null=True, verbose_name='Post Office Box Number')),
                ('postal_code', models.CharField(blank=True, db_index=True, help_text='The postal code. For example, 94043.', max_length=127, null=True, verbose_name='Postal Code')),
                ('street_address', models.CharField(help_text='The street address. For example, 1600 Amphitheatre Pkwy.', max_length=255, verbose_name='Street Address')),
                ('street_address_extra', models.CharField(blank=True, help_text='Apartment, suite, unit, building, floor, etc.', max_length=255, null=True, verbose_name='Street Address (Extra Line)')),
                ('elevation', models.FloatField(blank=True, help_text='The elevation of a location (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', null=True, verbose_name='Elevation')),
                ('latitude', models.DecimalField(blank=True, decimal_places=3, help_text='The latitude of a location. For example 37.42242 (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', max_digits=8, null=True, verbose_name='Latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=3, help_text='The longitude of a location. For example -122.08585 (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', max_digits=8, null=True, verbose_name='Longitude')),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, db_index=True, help_text='A longitude and latitude coordinates of this location.', null=True, srid=4326, verbose_name='Location')),
                ('given_name', models.CharField(blank=True, db_index=True, help_text='The customers given name.', max_length=63, null=True, verbose_name='Given Name')),
                ('middle_name', models.CharField(blank=True, db_index=True, help_text='The customers last name.', max_length=63, null=True, verbose_name='Middle Name')),
                ('last_name', models.CharField(blank=True, db_index=True, help_text='The customers last name.', max_length=63, null=True, verbose_name='Last Name')),
                ('birthdate', models.DateField(blank=True, help_text='The customers birthdate.', null=True, verbose_name='Birthdate')),
                ('join_date', models.DateTimeField(blank=True, help_text='The date the customer joined this organization.', null=True, verbose_name='Join Date')),
                ('nationality', models.CharField(blank=True, help_text='Nationality of the person.', max_length=63, null=True, verbose_name='Nationality')),
                ('gender', models.CharField(blank=True, help_text='Gender of the person. While Male and Female may be used, text strings are also acceptable for people who do not identify as a binary gender.', max_length=63, null=True, verbose_name='Gender')),
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.customer.increment_customer_id_number, editable=False, primary_key=True, serialize=False)),
                ('indexed_text', models.CharField(blank=True, db_index=True, help_text='The searchable content text used by the keyword searcher function.', max_length=511, null=True, unique=True, verbose_name='Indexed Text')),
                ('type_of', models.PositiveSmallIntegerField(blank=True, choices=[(2, 'Residential Customer'), (3, 'Commercial Customer'), (1, 'Unknown Customer')], db_index=True, default=1, help_text='The type of customer this is.', verbose_name='Type of')),
                ('is_ok_to_email', models.BooleanField(default=True, help_text='Indicates whether customer allows being reached by email', verbose_name='Is OK to email')),
                ('is_ok_to_text', models.BooleanField(default=True, help_text='Indicates whether customer allows being reached by text.', verbose_name='Is OK to text')),
                ('is_business', models.BooleanField(default=False, help_text='Indicates whether customer is considered a business representive or not.', verbose_name='Is Business')),
                ('is_senior', models.BooleanField(default=False, help_text='Indicates whether customer is considered a senior or not.', verbose_name='Is Senior')),
                ('is_support', models.BooleanField(default=False, help_text='Indicates whether customer needs support or not.', verbose_name='Is Support')),
                ('job_info_read', models.CharField(blank=True, help_text="The volunteer's name whom received this customer.", max_length=255, null=True, verbose_name='Job information received by')),
                ('how_hear', models.CharField(blank=True, help_text='How customer heared/learned about this Over 55 Inc.', max_length=2055, null=True, verbose_name='Learned about Over 55')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_customer_created_by_related', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Customer',
                'verbose_name_plural': 'Customers',
                'db_table': 'o55_customers',
                'permissions': (('can_get_customers', 'Can get customers'), ('can_get_customer', 'Can get customer'), ('can_post_customer', 'Can create customer'), ('can_put_customer', 'Can update customer'), ('can_delete_customer', 'Can delete customer')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='OpeningHoursSpecification',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('name', models.CharField(blank=True, db_index=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.opening_hours_specification.increment_opening_hours_specification_id_number, editable=False, primary_key=True, serialize=False)),
                ('closes', models.CharField(blank=True, help_text='The closing hour of the place or service on the given day(s) of the week.', max_length=15, null=True, verbose_name='Closes')),
                ('day_of_week', models.CharField(blank=True, help_text='The day of the week for which these opening hours are valid.', max_length=15, null=True, verbose_name='Day Of Week')),
                ('opens', models.CharField(blank=True, help_text='The opening hour of the place or service on the given day(s) of the week.', max_length=15, null=True, verbose_name='Opens')),
                ('valid_from', models.DateField(blank=True, help_text='The date when the item becomes valid.', null=True, verbose_name='Valid From')),
                ('valid_through', models.DateField(blank=True, help_text='The end of the validity of offer, price specification, or opening hours data.', null=True, verbose_name='Valid Through')),
                ('owner', models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_openinghoursspecification_abstract_thing_owner_related', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Opening Hours Specification',
                'verbose_name_plural': 'Opening Hours Specifications',
                'db_table': 'o55_opening_hours_specifications',
                'permissions': (('can_get_tenant_opening_hours_specifications', 'Can get opening hours specifications (tenant)'), ('can_get_tenant_opening_hours_specification', 'Can get opening hours specifications (tenant)'), ('can_post_tenant_opening_hours_specification', 'Can create opening hours specifications (tenant)'), ('can_put_tenant_opening_hours_specification', 'Can update opening hours specifications (tenant)'), ('can_delete_tenant_opening_hours_specification', 'Can delete opening hours specifications (tenant)')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.order.increment_order_id_number, editable=False, primary_key=True, serialize=False)),
                ('description', models.TextField(blank=True, default='', help_text='A description of this job.', null=True, verbose_name='Description')),
                ('assignment_date', models.DateField(blank=True, help_text='The date that an associate was assigned to the customer.', null=True, verbose_name='Assignment Date')),
                ('is_ongoing', models.BooleanField(default=False, help_text='Track whether this order is ongoing job or one-time job.', verbose_name='Is ongoing')),
                ('is_home_support_service', models.BooleanField(default=False, help_text='Track whether this order is a home support service request.', verbose_name='Is Home Support Service')),
                ('is_cancelled', models.BooleanField(default=False, help_text='Track whether this order was cancelled.', verbose_name='Is Cancelled')),
                ('completion_date', models.DateField(blank=True, help_text='The date that this order was completed.', null=True, verbose_name='Completion Date')),
                ('hours', models.PositiveSmallIntegerField(default=0, help_text='The total amount of hours worked on for this order by the associate.', verbose_name='Hours')),
                ('service_fee_currency', djmoney.models.fields.CurrencyField(choices=[('XUA', 'ADB Unit of Account'), ('AFN', 'Afghani'), ('DZD', 'Algerian Dinar'), ('ARS', 'Argentine Peso'), ('AMD', 'Armenian Dram'), ('AWG', 'Aruban Guilder'), ('AUD', 'Australian Dollar'), ('AZN', 'Azerbaijanian Manat'), ('BSD', 'Bahamian Dollar'), ('BHD', 'Bahraini Dinar'), ('THB', 'Baht'), ('PAB', 'Balboa'), ('BBD', 'Barbados Dollar'), ('BYN', 'Belarussian Ruble'), ('BYR', 'Belarussian Ruble'), ('BZD', 'Belize Dollar'), ('BMD', 'Bermudian Dollar (customarily known as Bermuda Dollar)'), ('BTN', 'Bhutanese ngultrum'), ('VEF', 'Bolivar Fuerte'), ('BOB', 'Boliviano'), ('XBA', 'Bond Markets Units European Composite Unit (EURCO)'), ('BRL', 'Brazilian Real'), ('BND', 'Brunei Dollar'), ('BGN', 'Bulgarian Lev'), ('BIF', 'Burundi Franc'), ('XOF', 'CFA Franc BCEAO'), ('XAF', 'CFA franc BEAC'), ('XPF', 'CFP Franc'), ('CAD', 'Canadian Dollar'), ('CVE', 'Cape Verde Escudo'), ('KYD', 'Cayman Islands Dollar'), ('CLP', 'Chilean peso'), ('XTS', 'Codes specifically reserved for testing purposes'), ('COP', 'Colombian peso'), ('KMF', 'Comoro Franc'), ('CDF', 'Congolese franc'), ('BAM', 'Convertible Marks'), ('NIO', 'Cordoba Oro'), ('CRC', 'Costa Rican Colon'), ('HRK', 'Croatian Kuna'), ('CUP', 'Cuban Peso'), ('CUC', 'Cuban convertible peso'), ('CZK', 'Czech Koruna'), ('GMD', 'Dalasi'), ('DKK', 'Danish Krone'), ('MKD', 'Denar'), ('DJF', 'Djibouti Franc'), ('STD', 'Dobra'), ('DOP', 'Dominican Peso'), ('VND', 'Dong'), ('XCD', 'East Caribbean Dollar'), ('EGP', 'Egyptian Pound'), ('SVC', 'El Salvador Colon'), ('ETB', 'Ethiopian Birr'), ('EUR', 'Euro'), ('XBB', 'European Monetary Unit (E.M.U.-6)'), ('XBD', 'European Unit of Account 17(E.U.A.-17)'), ('XBC', 'European Unit of Account 9(E.U.A.-9)'), ('FKP', 'Falkland Islands Pound'), ('FJD', 'Fiji Dollar'), ('HUF', 'Forint'), ('GHS', 'Ghana Cedi'), ('GIP', 'Gibraltar Pound'), ('XAU', 'Gold'), ('XFO', 'Gold-Franc'), ('PYG', 'Guarani'), ('GNF', 'Guinea Franc'), ('GYD', 'Guyana Dollar'), ('HTG', 'Haitian gourde'), ('HKD', 'Hong Kong Dollar'), ('UAH', 'Hryvnia'), ('ISK', 'Iceland Krona'), ('INR', 'Indian Rupee'), ('IRR', 'Iranian Rial'), ('IQD', 'Iraqi Dinar'), ('IMP', 'Isle of Man Pound'), ('JMD', 'Jamaican Dollar'), ('JOD', 'Jordanian Dinar'), ('KES', 'Kenyan Shilling'), ('PGK', 'Kina'), ('LAK', 'Kip'), ('KWD', 'Kuwaiti Dinar'), ('AOA', 'Kwanza'), ('MMK', 'Kyat'), ('GEL', 'Lari'), ('LVL', 'Latvian Lats'), ('LBP', 'Lebanese Pound'), ('ALL', 'Lek'), ('HNL', 'Lempira'), ('SLL', 'Leone'), ('LSL', 'Lesotho loti'), ('LRD', 'Liberian Dollar'), ('LYD', 'Libyan Dinar'), ('SZL', 'Lilangeni'), ('LTL', 'Lithuanian Litas'), ('MGA', 'Malagasy Ariary'), ('MWK', 'Malawian Kwacha'), ('MYR', 'Malaysian Ringgit'), ('TMM', 'Manat'), ('MUR', 'Mauritius Rupee'), ('MZN', 'Metical'), ('MXV', 'Mexican Unidad de Inversion (UDI)'), ('MXN', 'Mexican peso'), ('MDL', 'Moldovan Leu'), ('MAD', 'Moroccan Dirham'), ('BOV', 'Mvdol'), ('NGN', 'Naira'), ('ERN', 'Nakfa'), ('NAD', 'Namibian Dollar'), ('NPR', 'Nepalese Rupee'), ('ANG', 'Netherlands Antillian Guilder'), ('ILS', 'New Israeli Sheqel'), ('RON', 'New Leu'), ('TWD', 'New Taiwan Dollar'), ('NZD', 'New Zealand Dollar'), ('KPW', 'North Korean Won'), ('NOK', 'Norwegian Krone'), ('PEN', 'Nuevo Sol'), ('MRO', 'Ouguiya'), ('TOP', 'Paanga'), ('PKR', 'Pakistan Rupee'), ('XPD', 'Palladium'), ('MOP', 'Pataca'), ('PHP', 'Philippine Peso'), ('XPT', 'Platinum'), ('GBP', 'Pound Sterling'), ('BWP', 'Pula'), ('QAR', 'Qatari Rial'), ('GTQ', 'Quetzal'), ('ZAR', 'Rand'), ('OMR', 'Rial Omani'), ('KHR', 'Riel'), ('MVR', 'Rufiyaa'), ('IDR', 'Rupiah'), ('RUB', 'Russian Ruble'), ('RWF', 'Rwanda Franc'), ('XDR', 'SDR'), ('SHP', 'Saint Helena Pound'), ('SAR', 'Saudi Riyal'), ('RSD', 'Serbian Dinar'), ('SCR', 'Seychelles Rupee'), ('XAG', 'Silver'), ('SGD', 'Singapore Dollar'), ('SBD', 'Solomon Islands Dollar'), ('KGS', 'Som'), ('SOS', 'Somali Shilling'), ('TJS', 'Somoni'), ('SSP', 'South Sudanese Pound'), ('LKR', 'Sri Lanka Rupee'), ('XSU', 'Sucre'), ('SDG', 'Sudanese Pound'), ('SRD', 'Surinam Dollar'), ('SEK', 'Swedish Krona'), ('CHF', 'Swiss Franc'), ('SYP', 'Syrian Pound'), ('BDT', 'Taka'), ('WST', 'Tala'), ('TZS', 'Tanzanian Shilling'), ('KZT', 'Tenge'), ('XXX', 'The codes assigned for transactions where no currency is involved'), ('TTD', 'Trinidad and Tobago Dollar'), ('MNT', 'Tugrik'), ('TND', 'Tunisian Dinar'), ('TRY', 'Turkish Lira'), ('TMT', 'Turkmenistan New Manat'), ('TVD', 'Tuvalu dollar'), ('AED', 'UAE Dirham'), ('XFU', 'UIC-Franc'), ('USD', 'US Dollar'), ('USN', 'US Dollar (Next day)'), ('UGX', 'Uganda Shilling'), ('CLF', 'Unidad de Fomento'), ('COU', 'Unidad de Valor Real'), ('UYI', 'Uruguay Peso en Unidades Indexadas (URUIURUI)'), ('UYU', 'Uruguayan peso'), ('UZS', 'Uzbekistan Sum'), ('VUV', 'Vatu'), ('CHE', 'WIR Euro'), ('CHW', 'WIR Franc'), ('KRW', 'Won'), ('YER', 'Yemeni Rial'), ('JPY', 'Yen'), ('CNY', 'Yuan Renminbi'), ('ZMK', 'Zambian Kwacha'), ('ZMW', 'Zambian Kwacha'), ('ZWD', 'Zimbabwe Dollar A/06'), ('ZWN', 'Zimbabwe dollar A/08'), ('ZWL', 'Zimbabwe dollar A/09'), ('PLN', 'Zloty')], default='CAD', editable=False, max_length=3)),
                ('service_fee', djmoney.models.fields.MoneyField(blank=True, decimal_places=2, default=Decimal('0'), default_currency='CAD', help_text='The service fee that the customer was charged by the associate..', max_digits=10, verbose_name='Service Fee')),
                ('payment_date', models.DateField(blank=True, help_text='The date that this order was paid for.', null=True, verbose_name='Payment Date')),
                ('type_of', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Residential Job Type'), (2, 'Commercial Job Type'), (3, 'Unassigned Job Type')], default=3, help_text='The type of job this is.', verbose_name='Type Of')),
                ('indexed_text', models.CharField(blank=True, db_index=True, help_text='The searchable content text used by the keyword searcher function.', max_length=1024, null=True, unique=True, verbose_name='Indexed Text')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('associate', models.ForeignKey(blank=True, help_text='The associate of our order.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_order_associate_related', to='tenant_foundation.Associate')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this order.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_order_created_by_related', to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(help_text='The customer of our order.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_order_customer_related', to='tenant_foundation.Customer')),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom last modified this order.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_order_last_modified_by_related', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Order',
                'verbose_name_plural': 'Orders',
                'db_table': 'o55_orders',
                'permissions': (('can_get_orders', 'Can get orders'), ('can_get_order', 'Can get order'), ('can_post_order', 'Can create order'), ('can_put_order', 'Can update order'), ('can_delete_order', 'Can delete order')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('name', models.CharField(blank=True, db_index=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
                ('area_served', models.CharField(blank=True, help_text='The geographic area where a service or offered item is provided.', max_length=127, null=True, verbose_name='Area Served')),
                ('available_language', models.CharField(blank=True, help_text='A language someone may use with or at the item, service or place. Please use one of the language codes from the <a href="https://tools.ietf.org/html/bcp47">IETF BCP 47 standard</a>.', max_length=127, null=True, verbose_name='Available Language')),
                ('contact_type', models.CharField(blank=True, help_text='A person or organization can have different contact points, for different purposes. For example, a sales contact point, a PR contact point and so on. This property is used to specify the kind of contact point.', max_length=127, null=True, verbose_name='Contact Type')),
                ('email', models.EmailField(blank=True, db_index=True, help_text='Email address.', max_length=254, null=True, validators=[django.core.validators.EmailValidator(message='Invalid email')], verbose_name='Email')),
                ('fax_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='The fax number.', max_length=128, null=True, verbose_name='Fax Number')),
                ('product_supported', models.CharField(blank=True, default='', help_text='The product or service this support contact point is related to (such as product support for a particular product line). This can be a specific product or product line (e.g. "iPhone") or a general category of products or services (e.g. "smartphones").', max_length=31, null=True, verbose_name='Product Supported')),
                ('telephone', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_index=True, help_text='The telephone number.', max_length=128, null=True, verbose_name='Telephone')),
                ('telephone_type_of', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Residential Customer'), (2, 'Commercial Customer'), (3, 'Unknown Customer')], default=1, help_text='The type of phone this is. Ex: work, home, etc.', verbose_name='Telephone type of')),
                ('telephone_extension', models.CharField(blank=True, default='', help_text='The telephone number extension.', max_length=31, null=True, verbose_name='Telephone Extension')),
                ('other_telephone', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_index=True, help_text='The alternative telephone number.', max_length=128, null=True, verbose_name='Other Telephone')),
                ('other_telephone_extension', models.CharField(blank=True, default='', help_text='The alternative telephone extension number.', max_length=31, null=True, verbose_name='Other Telephone Extension')),
                ('other_telephone_type_of', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Residential Customer'), (2, 'Commercial Customer'), (3, 'Unknown Customer')], default=1, help_text='The type of phone the alternative telephone is. Ex: work, home, etc.', verbose_name='Other telephone type of')),
                ('address_country', models.CharField(help_text='The country. For example, USA. You can also provide the two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements">ISO 3166-1 alpha-2</a> country code.', max_length=127, verbose_name='Address Country')),
                ('address_locality', models.CharField(help_text='The locality. For example, Mountain View.', max_length=127, verbose_name='Address Locaility')),
                ('address_region', models.CharField(help_text='The region. For example, CA.', max_length=127, verbose_name='Address Region')),
                ('post_office_box_number', models.CharField(blank=True, help_text='Apartment, suite, unit, building, floor, etc.', max_length=255, null=True, verbose_name='Post Office Box Number')),
                ('postal_code', models.CharField(blank=True, db_index=True, help_text='The postal code. For example, 94043.', max_length=127, null=True, verbose_name='Postal Code')),
                ('street_address', models.CharField(help_text='The street address. For example, 1600 Amphitheatre Pkwy.', max_length=255, verbose_name='Street Address')),
                ('street_address_extra', models.CharField(blank=True, help_text='Apartment, suite, unit, building, floor, etc.', max_length=255, null=True, verbose_name='Street Address (Extra Line)')),
                ('elevation', models.FloatField(blank=True, help_text='The elevation of a location (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', null=True, verbose_name='Elevation')),
                ('latitude', models.DecimalField(blank=True, decimal_places=3, help_text='The latitude of a location. For example 37.42242 (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', max_digits=8, null=True, verbose_name='Latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=3, help_text='The longitude of a location. For example -122.08585 (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', max_digits=8, null=True, verbose_name='Longitude')),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, db_index=True, help_text='A longitude and latitude coordinates of this location.', null=True, srid=4326, verbose_name='Location')),
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.organization.increment_organization_id_number, editable=False, primary_key=True, serialize=False)),
                ('type_of', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Unknown Organization Type'), (2, 'Private Organization Type'), (3, 'Non-Profit Organization Type'), (4, 'Government Organization')], default=1, help_text='The type of organization this is based on Over55 internal classification.', verbose_name='Type of')),
                ('indexed_text', models.CharField(blank=True, db_index=True, help_text='The searchable content text used by the keyword searcher function.', max_length=511, null=True, unique=True, verbose_name='Indexed Text')),
                ('naics', models.CharField(blank=True, help_text='The North American Industry Classification System (NAICS) code for a particular organization or business person.', max_length=15, null=True, verbose_name='NAICS')),
                ('hours_available', models.ManyToManyField(blank=True, help_text='The hours during which this service or contact is available.', related_name='tenant_foundation_organization_contact_point_hours_available_related', to='tenant_foundation.OpeningHoursSpecification')),
                ('owner', models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_organization_abstract_thing_owner_related', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Organization',
                'verbose_name_plural': 'Organizations',
                'db_table': 'o55_organizations',
                'permissions': (('can_get_organizations', 'Can get organizations'), ('can_get_organization', 'Can get organization'), ('can_post_organization', 'Can create organization'), ('can_put_organization', 'Can update organization'), ('can_delete_organization', 'Can delete organization')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='OrganizationAssociateAffiliation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_of', models.PositiveSmallIntegerField(choices=[(1, 'Affiliation'), (2, 'Alumni Of'), (3, 'Funder'), (4, 'Member Of'), (5, 'Sponsor'), (6, 'Owns'), (7, 'Founder'), (8, 'Employee')], help_text='The type of affilication this customer has with the organization.', verbose_name='Type Of')),
                ('associate', models.ForeignKey(help_text='The associate of our reference.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_organizationassociateaffiliation_associate_related', to='tenant_foundation.Associate')),
                ('organization', models.ForeignKey(help_text='The organization whom this user is affiliated to.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_organizationassociateaffiliation_organization_related', to='tenant_foundation.Organization')),
            ],
            options={
                'verbose_name': 'Organization Associate Affiliation',
                'verbose_name_plural': 'Organization Associate Affiliation',
                'db_table': 'o55_organization_associate_affiliations',
            },
        ),
        migrations.CreateModel(
            name='Partner',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('name', models.CharField(blank=True, db_index=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
                ('area_served', models.CharField(blank=True, help_text='The geographic area where a service or offered item is provided.', max_length=127, null=True, verbose_name='Area Served')),
                ('available_language', models.CharField(blank=True, help_text='A language someone may use with or at the item, service or place. Please use one of the language codes from the <a href="https://tools.ietf.org/html/bcp47">IETF BCP 47 standard</a>.', max_length=127, null=True, verbose_name='Available Language')),
                ('contact_type', models.CharField(blank=True, help_text='A person or organization can have different contact points, for different purposes. For example, a sales contact point, a PR contact point and so on. This property is used to specify the kind of contact point.', max_length=127, null=True, verbose_name='Contact Type')),
                ('email', models.EmailField(blank=True, db_index=True, help_text='Email address.', max_length=254, null=True, validators=[django.core.validators.EmailValidator(message='Invalid email')], verbose_name='Email')),
                ('fax_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='The fax number.', max_length=128, null=True, verbose_name='Fax Number')),
                ('product_supported', models.CharField(blank=True, default='', help_text='The product or service this support contact point is related to (such as product support for a particular product line). This can be a specific product or product line (e.g. "iPhone") or a general category of products or services (e.g. "smartphones").', max_length=31, null=True, verbose_name='Product Supported')),
                ('telephone', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_index=True, help_text='The telephone number.', max_length=128, null=True, verbose_name='Telephone')),
                ('telephone_type_of', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Residential Customer'), (2, 'Commercial Customer'), (3, 'Unknown Customer')], default=1, help_text='The type of phone this is. Ex: work, home, etc.', verbose_name='Telephone type of')),
                ('telephone_extension', models.CharField(blank=True, default='', help_text='The telephone number extension.', max_length=31, null=True, verbose_name='Telephone Extension')),
                ('other_telephone', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_index=True, help_text='The alternative telephone number.', max_length=128, null=True, verbose_name='Other Telephone')),
                ('other_telephone_extension', models.CharField(blank=True, default='', help_text='The alternative telephone extension number.', max_length=31, null=True, verbose_name='Other Telephone Extension')),
                ('other_telephone_type_of', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Residential Customer'), (2, 'Commercial Customer'), (3, 'Unknown Customer')], default=1, help_text='The type of phone the alternative telephone is. Ex: work, home, etc.', verbose_name='Other telephone type of')),
                ('address_country', models.CharField(help_text='The country. For example, USA. You can also provide the two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements">ISO 3166-1 alpha-2</a> country code.', max_length=127, verbose_name='Address Country')),
                ('address_locality', models.CharField(help_text='The locality. For example, Mountain View.', max_length=127, verbose_name='Address Locaility')),
                ('address_region', models.CharField(help_text='The region. For example, CA.', max_length=127, verbose_name='Address Region')),
                ('post_office_box_number', models.CharField(blank=True, help_text='Apartment, suite, unit, building, floor, etc.', max_length=255, null=True, verbose_name='Post Office Box Number')),
                ('postal_code', models.CharField(blank=True, db_index=True, help_text='The postal code. For example, 94043.', max_length=127, null=True, verbose_name='Postal Code')),
                ('street_address', models.CharField(help_text='The street address. For example, 1600 Amphitheatre Pkwy.', max_length=255, verbose_name='Street Address')),
                ('street_address_extra', models.CharField(blank=True, help_text='Apartment, suite, unit, building, floor, etc.', max_length=255, null=True, verbose_name='Street Address (Extra Line)')),
                ('elevation', models.FloatField(blank=True, help_text='The elevation of a location (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', null=True, verbose_name='Elevation')),
                ('latitude', models.DecimalField(blank=True, decimal_places=3, help_text='The latitude of a location. For example 37.42242 (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', max_digits=8, null=True, verbose_name='Latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=3, help_text='The longitude of a location. For example -122.08585 (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', max_digits=8, null=True, verbose_name='Longitude')),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, db_index=True, help_text='A longitude and latitude coordinates of this location.', null=True, srid=4326, verbose_name='Location')),
                ('given_name', models.CharField(blank=True, db_index=True, help_text='The customers given name.', max_length=63, null=True, verbose_name='Given Name')),
                ('middle_name', models.CharField(blank=True, db_index=True, help_text='The customers last name.', max_length=63, null=True, verbose_name='Middle Name')),
                ('last_name', models.CharField(blank=True, db_index=True, help_text='The customers last name.', max_length=63, null=True, verbose_name='Last Name')),
                ('birthdate', models.DateField(blank=True, help_text='The customers birthdate.', null=True, verbose_name='Birthdate')),
                ('join_date', models.DateTimeField(blank=True, help_text='The date the customer joined this organization.', null=True, verbose_name='Join Date')),
                ('nationality', models.CharField(blank=True, help_text='Nationality of the person.', max_length=63, null=True, verbose_name='Nationality')),
                ('gender', models.CharField(blank=True, help_text='Gender of the person. While Male and Female may be used, text strings are also acceptable for people who do not identify as a binary gender.', max_length=63, null=True, verbose_name='Gender')),
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.partner.increment_partner_id_number, editable=False, primary_key=True, serialize=False)),
                ('indexed_text', models.CharField(blank=True, db_index=True, help_text='The searchable content text used by the keyword searcher function.', max_length=511, null=True, unique=True, verbose_name='Indexed Text')),
                ('is_ok_to_email', models.BooleanField(default=True, help_text='Indicates whether partner allows being reached by email', verbose_name='Is OK to email')),
                ('is_ok_to_text', models.BooleanField(default=True, help_text='Indicates whether partner allows being reached by text.', verbose_name='Is OK to text')),
                ('how_hear', models.CharField(blank=True, help_text='How partner heared about this business.', max_length=2055, null=True, verbose_name='How hear')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_partner_created_by_related', to=settings.AUTH_USER_MODEL)),
                ('hours_available', models.ManyToManyField(blank=True, help_text='The hours during which this service or contact is available.', related_name='tenant_foundation_partner_contact_point_hours_available_related', to='tenant_foundation.OpeningHoursSpecification')),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom modified this object last.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_partner_last_modified_by_related', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_partner_abstract_thing_owner_related', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Partner',
                'verbose_name_plural': 'Partners',
                'db_table': 'o55_partners',
                'permissions': (('can_get_partners', 'Can get partners'), ('can_get_partner', 'Can get partner'), ('can_post_partner', 'Can create partner'), ('can_put_partner', 'Can update partner'), ('can_delete_partner', 'Can delete partner')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='ResourceCategory',
            fields=[
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.resource_category.increment_resource_category_id_number, editable=False, primary_key=True, serialize=False)),
                ('icon', models.CharField(db_index=True, help_text='The icon of this resource category.', max_length=31, unique=True, verbose_name='icon')),
                ('title', models.CharField(db_index=True, help_text='The title of this resource category.', max_length=63, unique=True, verbose_name='title')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of this resource category.', null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Resource Category',
                'verbose_name_plural': 'Resource Categories',
                'db_table': 'o55_resource_categories',
                'permissions': (('can_get_resource_categories', 'Can get resource_categories'), ('can_get_resource_category', 'Can get resource_category'), ('can_post_resource_category', 'Can create resource_category'), ('can_put_resource_category', 'Can update resource_category'), ('can_delete_resource_category', 'Can delete resource_category')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='ResourceItem',
            fields=[
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.resource_item.increment_resource_item_id_number, editable=False, primary_key=True, serialize=False)),
                ('icon', models.CharField(blank=True, db_index=True, help_text='The icon of this resource item.', max_length=31, verbose_name='icon')),
                ('title', models.CharField(db_index=True, help_text='The title of this resource item.', max_length=63, verbose_name='title')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of this resource item.', null=True, verbose_name='Description')),
                ('category', models.ForeignKey(help_text='The resource category this item belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_resourceitem_resource_categories', to='tenant_foundation.ResourceCategory')),
            ],
            options={
                'verbose_name': 'Resource Item',
                'verbose_name_plural': 'Resource Items',
                'db_table': 'o55_resource_items',
                'permissions': (('can_get_resource_items', 'Can get resource_items'), ('can_get_resource_item', 'Can get resource_item'), ('can_post_resource_item', 'Can create resource_item'), ('can_put_resource_item', 'Can update resource_item'), ('can_delete_resource_item', 'Can delete resource_item')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='ResourceItemSortOrder',
            fields=[
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.resource_item_sort_order.increment_resource_item_sort_order_id_number, editable=False, primary_key=True, serialize=False)),
                ('ordering_number', models.PositiveSmallIntegerField(blank=True, default=1, help_text='The ordering number this item will be placed per category.', verbose_name='Ordering Number')),
                ('category', models.ForeignKey(help_text='The resource category this item belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_resourceitemsortorder_resource_categories', to='tenant_foundation.ResourceCategory')),
                ('item', models.ForeignKey(help_text='The resource item this object belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_resourceitemsortorder_resource_items', to='tenant_foundation.ResourceItem')),
            ],
            options={
                'verbose_name': 'Resource Item Sort Order',
                'verbose_name_plural': 'Resource Item Sort Orders',
                'db_table': 'o55_resource_item_sort_orders',
                'permissions': (('can_get_resource_item_sort_orders', 'Can get resource item sort orders'), ('can_get_resource_item_sort_order', 'Can get resource item sort order'), ('can_post_resource_item_sort_order', 'Can create resource item sort order'), ('can_put_resource_item_sort_order', 'Can update resource item sort order'), ('can_delete_resource_item_sort_order', 'Can delete resource item sort order')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='SkillSet',
            fields=[
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.skill_set.increment_skillset_id_number, editable=False, primary_key=True, serialize=False)),
                ('category', models.CharField(db_index=True, help_text='The category text of this skill set.', max_length=31, verbose_name='Category')),
                ('sub_category', models.CharField(db_index=True, help_text='The sub-category text of this skill set.', max_length=31, verbose_name='Sub-Category')),
                ('insurance_requirement', models.CharField(db_index=True, help_text='The insurance requirement of this skill set.', max_length=63, verbose_name='Insurance Requirement')),
                ('description', models.TextField(blank=True, default='', help_text='A description of the skill set.', null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Skill Set',
                'verbose_name_plural': 'Skill Sets',
                'db_table': 'o55_skill_sets',
                'permissions': (('can_get_skill_sets', 'Can get skill sets'), ('can_get_skill_set', 'Can get skill set'), ('can_post_skill_set', 'Can create skill set'), ('can_put_skill_set', 'Can update skill set'), ('can_delete_skill_set', 'Can delete skill set')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('name', models.CharField(blank=True, db_index=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
                ('area_served', models.CharField(blank=True, help_text='The geographic area where a service or offered item is provided.', max_length=127, null=True, verbose_name='Area Served')),
                ('available_language', models.CharField(blank=True, help_text='A language someone may use with or at the item, service or place. Please use one of the language codes from the <a href="https://tools.ietf.org/html/bcp47">IETF BCP 47 standard</a>.', max_length=127, null=True, verbose_name='Available Language')),
                ('contact_type', models.CharField(blank=True, help_text='A person or organization can have different contact points, for different purposes. For example, a sales contact point, a PR contact point and so on. This property is used to specify the kind of contact point.', max_length=127, null=True, verbose_name='Contact Type')),
                ('email', models.EmailField(blank=True, db_index=True, help_text='Email address.', max_length=254, null=True, validators=[django.core.validators.EmailValidator(message='Invalid email')], verbose_name='Email')),
                ('fax_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='The fax number.', max_length=128, null=True, verbose_name='Fax Number')),
                ('product_supported', models.CharField(blank=True, default='', help_text='The product or service this support contact point is related to (such as product support for a particular product line). This can be a specific product or product line (e.g. "iPhone") or a general category of products or services (e.g. "smartphones").', max_length=31, null=True, verbose_name='Product Supported')),
                ('telephone', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_index=True, help_text='The telephone number.', max_length=128, null=True, verbose_name='Telephone')),
                ('telephone_type_of', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Residential Customer'), (2, 'Commercial Customer'), (3, 'Unknown Customer')], default=1, help_text='The type of phone this is. Ex: work, home, etc.', verbose_name='Telephone type of')),
                ('telephone_extension', models.CharField(blank=True, default='', help_text='The telephone number extension.', max_length=31, null=True, verbose_name='Telephone Extension')),
                ('other_telephone', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_index=True, help_text='The alternative telephone number.', max_length=128, null=True, verbose_name='Other Telephone')),
                ('other_telephone_extension', models.CharField(blank=True, default='', help_text='The alternative telephone extension number.', max_length=31, null=True, verbose_name='Other Telephone Extension')),
                ('other_telephone_type_of', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Residential Customer'), (2, 'Commercial Customer'), (3, 'Unknown Customer')], default=1, help_text='The type of phone the alternative telephone is. Ex: work, home, etc.', verbose_name='Other telephone type of')),
                ('address_country', models.CharField(help_text='The country. For example, USA. You can also provide the two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements">ISO 3166-1 alpha-2</a> country code.', max_length=127, verbose_name='Address Country')),
                ('address_locality', models.CharField(help_text='The locality. For example, Mountain View.', max_length=127, verbose_name='Address Locaility')),
                ('address_region', models.CharField(help_text='The region. For example, CA.', max_length=127, verbose_name='Address Region')),
                ('post_office_box_number', models.CharField(blank=True, help_text='Apartment, suite, unit, building, floor, etc.', max_length=255, null=True, verbose_name='Post Office Box Number')),
                ('postal_code', models.CharField(blank=True, db_index=True, help_text='The postal code. For example, 94043.', max_length=127, null=True, verbose_name='Postal Code')),
                ('street_address', models.CharField(help_text='The street address. For example, 1600 Amphitheatre Pkwy.', max_length=255, verbose_name='Street Address')),
                ('street_address_extra', models.CharField(blank=True, help_text='Apartment, suite, unit, building, floor, etc.', max_length=255, null=True, verbose_name='Street Address (Extra Line)')),
                ('elevation', models.FloatField(blank=True, help_text='The elevation of a location (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', null=True, verbose_name='Elevation')),
                ('latitude', models.DecimalField(blank=True, decimal_places=3, help_text='The latitude of a location. For example 37.42242 (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', max_digits=8, null=True, verbose_name='Latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=3, help_text='The longitude of a location. For example -122.08585 (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', max_digits=8, null=True, verbose_name='Longitude')),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, db_index=True, help_text='A longitude and latitude coordinates of this location.', null=True, srid=4326, verbose_name='Location')),
                ('given_name', models.CharField(blank=True, db_index=True, help_text='The customers given name.', max_length=63, null=True, verbose_name='Given Name')),
                ('middle_name', models.CharField(blank=True, db_index=True, help_text='The customers last name.', max_length=63, null=True, verbose_name='Middle Name')),
                ('last_name', models.CharField(blank=True, db_index=True, help_text='The customers last name.', max_length=63, null=True, verbose_name='Last Name')),
                ('birthdate', models.DateField(blank=True, help_text='The customers birthdate.', null=True, verbose_name='Birthdate')),
                ('join_date', models.DateTimeField(blank=True, help_text='The date the customer joined this organization.', null=True, verbose_name='Join Date')),
                ('nationality', models.CharField(blank=True, help_text='Nationality of the person.', max_length=63, null=True, verbose_name='Nationality')),
                ('gender', models.CharField(blank=True, help_text='Gender of the person. While Male and Female may be used, text strings are also acceptable for people who do not identify as a binary gender.', max_length=63, null=True, verbose_name='Gender')),
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.staff.increment_staff_id_number, editable=False, primary_key=True, serialize=False)),
                ('how_hear', models.CharField(blank=True, help_text='How this staff member heared about this organization.', max_length=2055, null=True, verbose_name='How hear')),
                ('indexed_text', models.CharField(blank=True, db_index=True, help_text='The searchable content text used by the keyword searcher function.', max_length=511, null=True, unique=True, verbose_name='Indexed Text')),
                ('created_by', models.ForeignKey(blank=True, help_text='The user whom created this object.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_staff_created_by_related', to=settings.AUTH_USER_MODEL)),
                ('hours_available', models.ManyToManyField(blank=True, help_text='The hours during which this service or contact is available.', related_name='tenant_foundation_staff_contact_point_hours_available_related', to='tenant_foundation.OpeningHoursSpecification')),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='The user whom modified this object last.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_staff_last_modified_by_related', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_staff_abstract_thing_owner_related', to=settings.AUTH_USER_MODEL)),
                ('skill_sets', models.ManyToManyField(blank=True, help_text='The skill sets this staff has.', related_name='tenant_foundation_staff_skill_sets_related', to='tenant_foundation.SkillSet')),
            ],
            options={
                'verbose_name': 'Staff',
                'verbose_name_plural': 'Staves',
                'db_table': 'o55_staff',
                'permissions': (('can_get_staves', 'Can get staves'), ('can_get_staff', 'Can get staff'), ('can_post_staff', 'Can create staff'), ('can_put_staff', 'Can update staff'), ('can_delete_staff', 'Can delete staff')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(db_index=True, default=tenant_foundation.models.tag.increment_tag_id_number, editable=False, primary_key=True, serialize=False)),
                ('text', models.CharField(db_index=True, help_text='The text content of this tag.', max_length=31, unique=True, verbose_name='Text')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of this tag.', null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'db_table': 'o55_tags',
                'permissions': (('can_get_tags', 'Can get tags'), ('can_get_tag', 'Can get tag'), ('can_post_tag', 'Can create tag'), ('can_put_tag', 'Can update tag'), ('can_delete_tag', 'Can delete tag')),
                'default_permissions': (),
            },
        ),
        migrations.AddField(
            model_name='staff',
            name='tags',
            field=models.ManyToManyField(blank=True, help_text='The tags associated with this staff member.', related_name='tenant_foundation_staff_tags_related', to='tenant_foundation.Tag'),
        ),
        migrations.AddField(
            model_name='resourcecategory',
            name='sorted_items',
            field=models.ManyToManyField(blank=True, help_text='The items belonging to this category sorted by "ordering_number" field.', through='tenant_foundation.ResourceItemSortOrder', to='tenant_foundation.ResourceItem'),
        ),
        migrations.AddField(
            model_name='organization',
            name='tags',
            field=models.ManyToManyField(blank=True, help_text='The tags associated with this organization.', related_name='tenant_foundation_organization_tags_related', to='tenant_foundation.Tag'),
        ),
        migrations.AddField(
            model_name='order',
            name='skill_sets',
            field=models.ManyToManyField(blank=True, help_text='The skill sets that belong to this order.', related_name='tenant_foundation_order_skill_sets_related', to='tenant_foundation.SkillSet'),
        ),
        migrations.AddField(
            model_name='order',
            name='tags',
            field=models.ManyToManyField(blank=True, help_text='The category tags that this order belongs to.', related_name='tenant_foundation_order_tags_related', to='tenant_foundation.Tag'),
        ),
        migrations.AddField(
            model_name='customer',
            name='hours_available',
            field=models.ManyToManyField(blank=True, help_text='The hours during which this service or contact is available.', related_name='tenant_foundation_customer_contact_point_hours_available_related', to='tenant_foundation.OpeningHoursSpecification'),
        ),
        migrations.AddField(
            model_name='customer',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, help_text='The user whom modified this object last.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_customer_last_modified_by_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='customer',
            name='organization',
            field=models.ForeignKey(blank=True, help_text='The organization that this customer is affiliated with.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='tenant_foundation.Organization'),
        ),
        migrations.AddField(
            model_name='customer',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_customer_abstract_thing_owner_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='customer',
            name='skill_sets',
            field=models.ManyToManyField(blank=True, help_text='The skill sets this customer has.', related_name='tenant_foundation_customer_skill_sets_related', to='tenant_foundation.SkillSet'),
        ),
        migrations.AddField(
            model_name='customer',
            name='tags',
            field=models.ManyToManyField(blank=True, help_text='The tags associated with this customer.', related_name='tenant_foundation_customer_tags_related', to='tenant_foundation.Tag'),
        ),
        migrations.AddField(
            model_name='associate',
            name='hours_available',
            field=models.ManyToManyField(blank=True, help_text='The hours during which this service or contact is available.', related_name='tenant_foundation_associate_contact_point_hours_available_related', to='tenant_foundation.OpeningHoursSpecification'),
        ),
        migrations.AddField(
            model_name='associate',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, help_text='The user whom modified this object last.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tenant_foundation_associate_last_modified_by_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='associate',
            name='organizations',
            field=models.ManyToManyField(blank=True, help_text='The organizations that this associate is affiliated with.', through='tenant_foundation.OrganizationAssociateAffiliation', to='tenant_foundation.Organization'),
        ),
        migrations.AddField(
            model_name='associate',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_associate_abstract_thing_owner_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='associate',
            name='skill_sets',
            field=models.ManyToManyField(blank=True, help_text='The skill sets this associate has.', related_name='tenant_foundation_associate_skill_sets_related', to='tenant_foundation.SkillSet'),
        ),
        migrations.AddField(
            model_name='associate',
            name='tags',
            field=models.ManyToManyField(blank=True, help_text='The tags associated with this associate.', related_name='tenant_foundation_associate_tags_related', to='tenant_foundation.Tag'),
        ),
    ]
