# Generated by Django 2.0 on 2017-12-27 21:03

from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('address_country', models.CharField(help_text='The country. For example, USA. You can also provide the two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements">ISO 3166-1 alpha-2</a> country code.', max_length=127, verbose_name='Address Country')),
                ('address_locality', models.CharField(help_text='The locality. For example, Mountain View.', max_length=127, verbose_name='Address Locaility')),
                ('address_region', models.CharField(help_text='The region. For example, CA.', max_length=127, verbose_name='Address Region')),
                ('post_office_box_number', models.CharField(blank=True, help_text='Apartment, suite, unit, building, floor, etc.', max_length=255, null=True, verbose_name='Post Office Box Number')),
                ('postal_code', models.CharField(blank=True, db_index=True, help_text='The postal code. For example, 94043.', max_length=127, null=True, verbose_name='Postal Code')),
                ('street_address', models.CharField(help_text='The street address. For example, 1600 Amphitheatre Pkwy.', max_length=255, verbose_name='Street Address')),
                ('street_address_extra', models.CharField(blank=True, help_text='Apartment, suite, unit, building, floor, etc.', max_length=255, null=True, verbose_name='Street Address (Extra Line)')),
                ('elevation', models.FloatField(blank=True, help_text='The elevation of a location (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', null=True, verbose_name='Elevation')),
                ('latitude', models.DecimalField(blank=True, decimal_places=3, help_text='The latitude of a location. For example 37.42242 (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', max_digits=8, null=True, verbose_name='Latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=3, help_text='The longitude of a location. For example -122.08585 (<a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS 84</a>).', max_digits=8, null=True, verbose_name='Longitude')),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, db_index=True, help_text='A longitude and latitude coordinates of this location.', null=True, srid=4326, verbose_name='Location')),
                ('given_name', models.CharField(blank=True, help_text='The employees given name.', max_length=63, null=True, verbose_name='Given Name')),
                ('middle_name', models.CharField(blank=True, help_text='The employees last name.', max_length=63, null=True, verbose_name='Middle Name')),
                ('last_name', models.CharField(blank=True, help_text='The employees last name.', max_length=63, null=True, verbose_name='Last Name')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified', models.DateTimeField(auto_now=True, db_index=True)),
                ('user', models.OneToOneField(blank=True, help_text='The user whom owns this customer.', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Customer',
                'verbose_name_plural': 'Customers',
                'db_table': 'o55_customers',
            },
        ),
        migrations.CreateModel(
            name='OpeningHoursSpecification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('alternate_name', models.CharField(blank=True, help_text='An alias for the item.', max_length=255, null=True, verbose_name='Alternate Name')),
                ('description', models.TextField(blank=True, default='', help_text='A short description of the item.', null=True, verbose_name='Description')),
                ('name', models.CharField(blank=True, default='', help_text='The name of the item.', max_length=255, null=True, verbose_name='Name')),
                ('url', models.URLField(blank=True, help_text='URL of the item.', null=True, verbose_name='URL')),
                ('closes', models.CharField(blank=True, help_text='The closing hour of the place or service on the given day(s) of the week.', max_length=15, null=True, verbose_name='Closes')),
                ('day_of_week', models.CharField(blank=True, help_text='The day of the week for which these opening hours are valid.', max_length=15, null=True, verbose_name='Day Of Week')),
                ('opens', models.CharField(blank=True, help_text='The opening hour of the place or service on the given day(s) of the week.', max_length=15, null=True, verbose_name='Opens')),
                ('valid_from', models.DateField(blank=True, help_text='The date when the item becomes valid.', null=True, verbose_name='Valid From')),
                ('valid_through', models.DateField(blank=True, help_text='The end of the validity of offer, price specification, or opening hours data.', null=True, verbose_name='Valid Through')),
                ('owner', models.ForeignKey(blank=True, help_text='The user whom owns this thing.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenant_foundation_openinghoursspecification_abstract_thing_owner_related', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Opening Hours Specification',
                'verbose_name_plural': 'Opening Hours Specifications',
                'db_table': 'o55_opening_hours_specifications',
            },
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('given_name', models.CharField(blank=True, help_text='The employees given name.', max_length=63, null=True, verbose_name='Given Name')),
                ('middle_name', models.CharField(blank=True, help_text='The employees last name.', max_length=63, null=True, verbose_name='Middle Name')),
                ('last_name', models.CharField(blank=True, help_text='The employees last name.', max_length=63, null=True, verbose_name='Last Name')),
                ('business', models.CharField(blank=True, help_text='The employees business status.', max_length=63, null=True, verbose_name='Business')),
                ('is_active', models.BooleanField(default=False, help_text='Track whether this employee is active.', verbose_name='Is Active')),
                ('birthdate', models.DateTimeField(blank=True, help_text='The employees birthdate.', null=True, verbose_name='Birthdate')),
                ('address', models.CharField(blank=True, help_text='The employees address.', max_length=127, null=True, verbose_name='Address')),
                ('join_date', models.DateTimeField(blank=True, help_text='The date the employee joined.', null=True, verbose_name='Join Date')),
                ('phone', models.CharField(blank=True, db_index=True, help_text='The phone number of the employee.', max_length=16, null=True, verbose_name='Phone Number')),
                ('fax', models.CharField(blank=True, help_text='The fax number of the employee.', max_length=16, null=True, verbose_name='Fax Number')),
                ('cell', models.CharField(blank=True, db_index=True, help_text='The cell number of the employee.', max_length=16, null=True, verbose_name='Cell Number')),
                ('email', models.EmailField(blank=True, db_index=True, help_text='The email of this employee.', max_length=254, null=True, verbose_name='Email')),
                ('city', models.CharField(db_index=True, help_text='The city this employee lives in.', max_length=31, verbose_name='City')),
                ('province', models.CharField(blank=True, db_index=True, help_text='The province this employee lives in.', max_length=15, null=True, verbose_name='Province')),
                ('postal_code', models.CharField(blank=True, db_index=True, help_text='The postal code. For example, 94043.', max_length=11, null=True, verbose_name='Postal Code')),
                ('ldn_area', models.CharField(blank=True, help_text='The area in London that this employee lives in.', max_length=31, null=True, verbose_name='London Area')),
                ('hourly_salary_desired', models.PositiveSmallIntegerField(blank=True, help_text='The hourly salary rate the employee', null=True, verbose_name='Hourly Salary Desired')),
                ('limit_special', models.CharField(blank=True, help_text='Any special limitations / handicaps this employee has.', max_length=255, null=True, verbose_name='Limit Special')),
                ('dues_pd', models.DateTimeField(blank=True, help_text='-', null=True, verbose_name='Deus PD')),
                ('ins_due', models.DateTimeField(blank=True, help_text='-', null=True, verbose_name='Ins Due')),
                ('police_check', models.DateTimeField(blank=True, help_text='The date the employee took a police check.', null=True, verbose_name='Police Check')),
                ('comments', models.CharField(blank=True, help_text='The comments associated with this employee.', max_length=1027, null=True, verbose_name='Comments')),
                ('drivers_license_class', models.CharField(blank=True, help_text='The employees license class for driving.', max_length=7, null=True, verbose_name='Divers License Class')),
                ('has_car', models.BooleanField(default=False, help_text='Indicates whether employee has a car or not.', verbose_name='Has Car')),
                ('has_van', models.BooleanField(default=False, help_text='Indicates whether employee has a van or not.', verbose_name='Has Van')),
                ('has_truck', models.BooleanField(default=False, help_text='Indicates whether employee has a truck or not.', verbose_name='Has Truck')),
                ('is_full_time', models.BooleanField(default=False, help_text='Indicates whether employee is full time or not.', verbose_name='Is Full Time')),
                ('is_part_time', models.BooleanField(default=False, help_text='Indicates whether employee is part time or not.', verbose_name='Is Part Time')),
                ('is_contract_time', models.BooleanField(default=False, help_text='Indicates whether employee is contracted or not.', verbose_name='Is Contract Time')),
                ('is_small_job', models.BooleanField(default=False, help_text='Indicates whether employee is employed for small jobs or not.', verbose_name='Is Small Job')),
                ('how_hear', models.CharField(blank=True, help_text='How employee heared about this business.', max_length=2055, null=True, verbose_name='How hear')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified', models.DateTimeField(auto_now=True, db_index=True)),
                ('user', models.OneToOneField(blank=True, help_text='The user whom belongs to this employee.', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Staff',
                'verbose_name_plural': 'Staves',
                'db_table': 'o55_staff',
            },
        ),
    ]
